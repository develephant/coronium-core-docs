{
    "docs": [
        {
            "location": "/",
            "text": "Coronium Core\n is an all-in-one Lua application server built for \nCorona\n developers.\n\n\n \nClick Here To Install Coronium Core Now!\n\n\n\nCore Features\n\n\n\n\n\n\n Simple Lua Based API\n\n\n Corona Client Plugin\n\n\n Quick & Easy Installation\n\n\n\n\n\n\n Browser Based Webmin\n\n\n MySQL Databases\n\n\n Mongo Databases\n\n\n\n\n\n\n User Management\n\n\n Application Analytics\n\n\n File Mangement\n\n\n\n\n\n\n\n\n Recurring Jobs Service\n\n\n Dynamic Web Pages\n\n\n Customizable Server APIs\n\n\n\n\n\n\n Email Sending via Mailgun\n\n\n Powered by Nginx & LuaJIT\n\n\n Detailed Documentation\n\n\n\n\n\n\n\nMySQL Example\n\n\nClient-Side Only\n\n\nUsing the Corona Plugin:\n\n\nlocal\n \ncore\n \n=\n \nrequire\n(\n\"plugin.coronium-core\"\n)\n\n\n\ncore\n.\ninit\n({\n\n  \nserver\n \n=\n \n\"https://my.coronium.server\"\n,\n\n  \nkey\n \n=\n \n\"4057c8a8-0ab2-11e8-8f97-3edbd9b391ed\"\n\n\n})\n\n\n\nlocal\n \nfunction\n \nonResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nname\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nmysql\n.\nselectOne\n({\n\n  \ndb\n \n=\n \n\"products\"\n,\n\n  \ntbl\n \n=\n \n\"toys\"\n,\n\n  \nwhere\n \n=\n \n{\n \nname\n \n=\n \n\"red car\"\n \n}\n\n\n},\n \nonResponse\n)\n\n\n\n\n\n\nServer-Side API\n\n\nA server-side API module:\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ngetCars\n(\ninput\n)\n\n  \nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nselectOne\n(\n\"products\"\n,\n \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nwhere\n \n=\n \n{\n \nname\n \n=\n \ninput\n.\nname\n \n}\n\n  \n})\n\n\n  \nif\n \nnot\n \nres\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \nreturn\n \nres\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nCalling from the client-side:\n\n\n--== Initialization (see above)\n\n\n\nlocal\n \nfunction\n \nonResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nname\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\napi\n.\ngetCars\n({\nname\n=\n\"red car\"\n},\n \nonResponse\n)\n\n\n\n\n\n\nOverview\n\n\nExtend your applications into the cloud with Mongo and MySQL databases, user management, analytics, recurring jobs, secure file transfers and storage, dynamic public facing web pages, email, and more; all scripted using a ridiculously simple Lua based API.\n\n\nCoronium Core\n includes a fully visual browser based \"Webmin\" to view statistics, app analytics, work with users, manage API projects, create recurring jobs, monitor your system, edit code with a robust code editor, and more.\n\n\nUse the \nCoronium Core Corona plugin\n for most tasks without ever writing a line of code on the server. When you need to take it to the next level, create custom server-side APIs with Lua for complex data driven applications.\n\n\nWith the \nCoronium Core\n all-in-one server, you own and control your data, with an easy to use custom built solution for \nCorona\n developers.\n\n\nInstall\n\n\n \nClick Here to Get Started Installing Coronium Core!\n\n\n\nUpdates\n\n\nLooking for updates for your \nCoronium Core\n server? \nClick Here\n.\n\n\nSupport\n\n\n\n\nCorona Forum Support\n\n\nLive Support (varies)",
            "title": "Introduction"
        },
        {
            "location": "/#coronium-core-is-an-all-in-one-lua-application-server-built-for-corona-developers",
            "text": "",
            "title": "Coronium Core is an all-in-one Lua application server built for Corona developers."
        },
        {
            "location": "/#core-features",
            "text": "Simple Lua Based API   Corona Client Plugin   Quick & Easy Installation     Browser Based Webmin   MySQL Databases   Mongo Databases     User Management   Application Analytics   File Mangement     Recurring Jobs Service   Dynamic Web Pages   Customizable Server APIs     Email Sending via Mailgun   Powered by Nginx & LuaJIT   Detailed Documentation",
            "title": "Core Features"
        },
        {
            "location": "/#mysql-example",
            "text": "Client-Side Only  Using the Corona Plugin:  local   core   =   require ( \"plugin.coronium-core\" )  core . init ({ \n   server   =   \"https://my.coronium.server\" , \n   key   =   \"4057c8a8-0ab2-11e8-8f97-3edbd9b391ed\"  })  local   function   onResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . name ) \n   end  end  core . mysql . selectOne ({ \n   db   =   \"products\" , \n   tbl   =   \"toys\" , \n   where   =   {   name   =   \"red car\"   }  },   onResponse )   Server-Side API  A server-side API module:  local   api   =   core . api ()  function   api . getCars ( input ) \n   local   res ,   err   =   core . mysql . selectOne ( \"products\" ,   { \n     tbl   =   \"toys\" , \n     where   =   {   name   =   input . name   } \n   }) \n\n   if   not   res   then \n     return   core . error ( err ) \n   end \n\n   return   res  end  return   api   Calling from the client-side:  --== Initialization (see above)  local   function   onResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . name ) \n   end  end  core . api . getCars ({ name = \"red car\" },   onResponse )",
            "title": "MySQL Example"
        },
        {
            "location": "/#overview",
            "text": "Extend your applications into the cloud with Mongo and MySQL databases, user management, analytics, recurring jobs, secure file transfers and storage, dynamic public facing web pages, email, and more; all scripted using a ridiculously simple Lua based API.  Coronium Core  includes a fully visual browser based \"Webmin\" to view statistics, app analytics, work with users, manage API projects, create recurring jobs, monitor your system, edit code with a robust code editor, and more.  Use the  Coronium Core Corona plugin  for most tasks without ever writing a line of code on the server. When you need to take it to the next level, create custom server-side APIs with Lua for complex data driven applications.  With the  Coronium Core  all-in-one server, you own and control your data, with an easy to use custom built solution for  Corona  developers.",
            "title": "Overview"
        },
        {
            "location": "/#install",
            "text": "",
            "title": "Install"
        },
        {
            "location": "/#updates",
            "text": "Looking for updates for your  Coronium Core  server?  Click Here .",
            "title": "Updates"
        },
        {
            "location": "/#support",
            "text": "Corona Forum Support  Live Support (varies)",
            "title": "Support"
        },
        {
            "location": "/server/installation/digitalocean/",
            "text": "DigitalOcean\n\n\nCoronium Core\n runs best on a \nDigitalOcean\n Ubuntu 16.04\n droplet.\n\n\n\n\nScreencast Available\n\n\nWatch the installation instructions in a screencast format by \nClicking here\n.\n\n\n\n\nCreate A Droplet\n\n\n\n\nFree Droplets\n\n\nIf you're new to \nDigitalOcean\n please consider signing up with \nthis link\n. Not only will you receive a $10 credit, but it also helps support the continued development, and testing of \nCoronium Core\n.\n\n\n\n\nOnce you log into your \nDigitalOcean\n account, click the \nCreate\n button and select \nDroplets\n from the menu.\n\n\n\n\nOn the next screen, first select a \nUbuntu 16.04\n droplet distribution.\n\n\n \n\n\nSelect the droplet size. \nA 1 GB/1 CPU droplet is recommended as a minimum\n.\n\n\n\n\nNext, select a region for the droplet. Consider choosing a location closest to your most active user base.\n\n\n\n\nSelect your SSH profile to attach to the droplet.\n\n\n\n\n\n\nPassword Option\n\n\nThere is an option where you can use a password instead of an SSH key, which may be easier if you're only testing \nCoronium Core\n, though I wouldn't recommend it. You can learn more about generating SSH keys for \nDigitalOcean\n here: \nCreating SSH Keys\n.\n\n\n\n\nNow give your droplet a hostname.\n\n\n\n\nBe sure to replace \ncoronium.develephant.com\n with your own hostname.\n\n\nAnd finally, click the \nCreate\n button to spin up the droplet.\n\n\n\n\nInstall Coronium Core\n\n\nOnce your droplet is done spinning up, note the ip address.\n\n\n\n\nUsing a terminal/shell of your choice, SSH into the droplet.\n\n\n\n\nTip\n\n\nYou can use the built in terminal on OSX. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh root@<your-instance-ip>\n\n\n\n\n\nReplace \n<your-instance-ip>\n with the address that was assigned to your droplet.\n\n\nOnce you are connected to the droplet, copy and paste the following line into the terminal:\n\n\nwget https://s3.amazonaws.com/coronium-core/do.sh && sudo bash do.sh\n\n\n\n\n\nDatabase Passwords\n\n\nOnce the installation is complete, you will be prompted for your choice of database passwords. Make sure they are secure, and don't lose them. You will use these passwords to connect to your databases both internally and externally. \n\n\n\n\nChanging Passwords\n\n\nIf you need to change the passwords later see \nDatabase Passswords\n in the server guide.\n\n\n\n\nServer Key\n\n\nThe server key is used by the Coronium Core client-side \ninitialization\n method. This key is presented at the end of the installation. Copy the key to use now so you won't have to re-log into the server. To retrieve the key later, use the coronium tool on the server (see \nServer Key\n).\n\n\nNext Steps\n\n\nOnce the installation is complete, take a look at the \nPost Install\n section.",
            "title": "DigitalOcean"
        },
        {
            "location": "/server/installation/digitalocean/#digitalocean",
            "text": "Coronium Core  runs best on a  DigitalOcean  Ubuntu 16.04  droplet.   Screencast Available  Watch the installation instructions in a screencast format by  Clicking here .",
            "title": " DigitalOcean"
        },
        {
            "location": "/server/installation/digitalocean/#create-a-droplet",
            "text": "Free Droplets  If you're new to  DigitalOcean  please consider signing up with  this link . Not only will you receive a $10 credit, but it also helps support the continued development, and testing of  Coronium Core .   Once you log into your  DigitalOcean  account, click the  Create  button and select  Droplets  from the menu.   On the next screen, first select a  Ubuntu 16.04  droplet distribution.     Select the droplet size.  A 1 GB/1 CPU droplet is recommended as a minimum .   Next, select a region for the droplet. Consider choosing a location closest to your most active user base.   Select your SSH profile to attach to the droplet.    Password Option  There is an option where you can use a password instead of an SSH key, which may be easier if you're only testing  Coronium Core , though I wouldn't recommend it. You can learn more about generating SSH keys for  DigitalOcean  here:  Creating SSH Keys .   Now give your droplet a hostname.   Be sure to replace  coronium.develephant.com  with your own hostname.  And finally, click the  Create  button to spin up the droplet.",
            "title": "Create A Droplet"
        },
        {
            "location": "/server/installation/digitalocean/#install-coronium-core",
            "text": "Once your droplet is done spinning up, note the ip address.   Using a terminal/shell of your choice, SSH into the droplet.   Tip  You can use the built in terminal on OSX. For Windows, check out  PuTTY .   ssh root@<your-instance-ip>  Replace  <your-instance-ip>  with the address that was assigned to your droplet.  Once you are connected to the droplet, copy and paste the following line into the terminal:  wget https://s3.amazonaws.com/coronium-core/do.sh && sudo bash do.sh",
            "title": "Install Coronium Core"
        },
        {
            "location": "/server/installation/digitalocean/#database-passwords",
            "text": "Once the installation is complete, you will be prompted for your choice of database passwords. Make sure they are secure, and don't lose them. You will use these passwords to connect to your databases both internally and externally.    Changing Passwords  If you need to change the passwords later see  Database Passswords  in the server guide.",
            "title": "Database Passwords"
        },
        {
            "location": "/server/installation/digitalocean/#server-key",
            "text": "The server key is used by the Coronium Core client-side  initialization  method. This key is presented at the end of the installation. Copy the key to use now so you won't have to re-log into the server. To retrieve the key later, use the coronium tool on the server (see  Server Key ).",
            "title": "Server Key"
        },
        {
            "location": "/server/installation/digitalocean/#next-steps",
            "text": "Once the installation is complete, take a look at the  Post Install  section.",
            "title": "Next Steps"
        },
        {
            "location": "/server/installation/amazon_ls/",
            "text": "Amazon Lightsail\n\n\nAmazon Lightsail\n is a simplified interface for using EC2.\n\n\n\n\nCoronium Core\n server is eligible for the free tier using Amazon Web Services. \n\n\n\n\nCreate An Instance\n\n\n\n\n\n\nLog into your AWS account and \nopen Amazon Lightsail\n.\n\n\n\n\n\n\nClick the \"Create Instance\" button.\n\n\n\n\n\n\nChoose \"Linux/Unix\" under the \"Select a platform\" section.\n\n\n\n\n\n\nUnder \"Select a blueprint\" click \"OS Only\" and choose \nUbuntu 16.04 LTS\n.\n\n\n\n\n\n\nUnder \"Choose your instance plan\" select at minimum a 2GB ($10) instance. \nNote: A 1GB instance will work for testing the platform.\n \n\n\n\n\n\n\nIn the \"Identify your instance\" section enter a name for your \nCoronium Core\n server.\n\n\n\n\n\n\nClick the \nCreate Instance\n button to start the instance creation process.\n\n\n\n\n\n\nConfigure An Instance\n\n\n\n\n\n\nOnce the instance is in a \"Running\" state, select the instance by clicking its name. \n\n\n\n\n\n\nOn the overview page, select the \"Networking\" section.\n\n\n\n\n\n\nUnder the \"Firewall\" section, add the following by using the \"+ Add another\" link:\n\n\n\n\n[+Add another] -> From the \"Application\" dropdown, select \nHTTPS\n.\n\n\n[+Add another] -> From the \"Application\" dropdown, select \nMySQL/Aurora\n.\n\n\n[+Add another] -> From the \"Application\" dropdown, select \nCustom\n, and then enter \n27017\n in the \"Port range\" field.\n\n\n[+Add another] -> From the \"Application\" dropdown, select \nCustom\n, and then enter \n10001\n in the \"Port range\" field.\n\n\n\n\n\n\n\n\nInstall Coronium Core\n\n\n\n\n\n\nReturn to the overview page for your instance and note the \"Public IP\".\n\n\n\n\n\n\nClick the \nConnect using SSH\n button to connect to the new instance.\n\n\n\n\n\n\nOnce you are connected to the instance, copy and paste the following line into the terminal:\n\n\n\n\n\n\nwget https://s3.amazonaws.com/coronium-core/ec2.sh && sudo bash ec2.sh\n\n\n\n\n\nDatabase Passwords\n\n\nOnce the installation is complete, you will be prompted for your choice of database passwords. Make sure they are secure, and don't lose them. You will use these passwords to connect to your databases both internally and externally.\n\n\n\n\nChanging Passwords\n\n\nIf you need to change the passwords later see \nDatabase Passswords\n in the server guide.\n\n\n\n\nServer Key\n\n\nThe server key is used by the Coronium Core client-side \ninitialization\n method. This key is presented at the end of the installation. Copy the key to use now so you won't have to re-log into the server. To retrieve the key later, use the coronium tool on the server (see \nServer Key\n).\n\n\nConnecting\n\n\nMost often if you need to work with something on the instance, you will use the \ncoronium\n user to log in (which was created on install). The \nubuntu\n user is used for updating, and system level operations.\n\n\nTo connect with the \ncoronium\n user, you will need to use a shell program on your local machine.\n\n\n\n\nTip\n\n\nYou can use the built in terminal on OSX. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh -i <path/to/.pem> coronium@<your-instance-ip>\n\n\n\n\n\nIf you don't know your SSH Key (.pem), navigate to your \nLightsail Account\n page.  Download your key under the \"SSH Keys\" tab.\n\n\nNext Steps\n\n\nOnce the installation is complete, take a look at the \nPost Install\n section.",
            "title": "Amazon Lightsail"
        },
        {
            "location": "/server/installation/amazon_ls/#amazon-lightsail",
            "text": "Amazon Lightsail  is a simplified interface for using EC2.   Coronium Core  server is eligible for the free tier using Amazon Web Services.",
            "title": " Amazon Lightsail"
        },
        {
            "location": "/server/installation/amazon_ls/#create-an-instance",
            "text": "Log into your AWS account and  open Amazon Lightsail .    Click the \"Create Instance\" button.    Choose \"Linux/Unix\" under the \"Select a platform\" section.    Under \"Select a blueprint\" click \"OS Only\" and choose  Ubuntu 16.04 LTS .    Under \"Choose your instance plan\" select at minimum a 2GB ($10) instance.  Note: A 1GB instance will work for testing the platform.      In the \"Identify your instance\" section enter a name for your  Coronium Core  server.    Click the  Create Instance  button to start the instance creation process.",
            "title": "Create An Instance"
        },
        {
            "location": "/server/installation/amazon_ls/#configure-an-instance",
            "text": "Once the instance is in a \"Running\" state, select the instance by clicking its name.     On the overview page, select the \"Networking\" section.    Under the \"Firewall\" section, add the following by using the \"+ Add another\" link:   [+Add another] -> From the \"Application\" dropdown, select  HTTPS .  [+Add another] -> From the \"Application\" dropdown, select  MySQL/Aurora .  [+Add another] -> From the \"Application\" dropdown, select  Custom , and then enter  27017  in the \"Port range\" field.  [+Add another] -> From the \"Application\" dropdown, select  Custom , and then enter  10001  in the \"Port range\" field.",
            "title": "Configure An Instance"
        },
        {
            "location": "/server/installation/amazon_ls/#install-coronium-core",
            "text": "Return to the overview page for your instance and note the \"Public IP\".    Click the  Connect using SSH  button to connect to the new instance.    Once you are connected to the instance, copy and paste the following line into the terminal:    wget https://s3.amazonaws.com/coronium-core/ec2.sh && sudo bash ec2.sh",
            "title": "Install Coronium Core"
        },
        {
            "location": "/server/installation/amazon_ls/#database-passwords",
            "text": "Once the installation is complete, you will be prompted for your choice of database passwords. Make sure they are secure, and don't lose them. You will use these passwords to connect to your databases both internally and externally.   Changing Passwords  If you need to change the passwords later see  Database Passswords  in the server guide.",
            "title": "Database Passwords"
        },
        {
            "location": "/server/installation/amazon_ls/#server-key",
            "text": "The server key is used by the Coronium Core client-side  initialization  method. This key is presented at the end of the installation. Copy the key to use now so you won't have to re-log into the server. To retrieve the key later, use the coronium tool on the server (see  Server Key ).",
            "title": "Server Key"
        },
        {
            "location": "/server/installation/amazon_ls/#connecting",
            "text": "Most often if you need to work with something on the instance, you will use the  coronium  user to log in (which was created on install). The  ubuntu  user is used for updating, and system level operations.  To connect with the  coronium  user, you will need to use a shell program on your local machine.   Tip  You can use the built in terminal on OSX. For Windows, check out  PuTTY .   ssh -i <path/to/.pem> coronium@<your-instance-ip>  If you don't know your SSH Key (.pem), navigate to your  Lightsail Account  page.  Download your key under the \"SSH Keys\" tab.",
            "title": "Connecting"
        },
        {
            "location": "/server/installation/amazon_ls/#next-steps",
            "text": "Once the installation is complete, take a look at the  Post Install  section.",
            "title": "Next Steps"
        },
        {
            "location": "/server/installation/amazon/",
            "text": "Amazon EC2\n\n\nCoronium Core\n server is now installed using \nAmazon Lightsail\n, which is a simplified interface for working with EC2 instances.\n\n\nClick here for \nCoronium Core\n installation instructions using \nAmazon Lightsail\n.",
            "title": "Amazon EC2"
        },
        {
            "location": "/server/installation/amazon/#amazon-ec2",
            "text": "Coronium Core  server is now installed using  Amazon Lightsail , which is a simplified interface for working with EC2 instances.  Click here for  Coronium Core  installation instructions using  Amazon Lightsail .",
            "title": " Amazon EC2"
        },
        {
            "location": "/server/installation/postinstall/",
            "text": "Password\n\n\nThe default password for a fresh install is: \ncloudadmin\n.\n\n\n\n\nChange The Password\n\n\nYou should change the default password after the install.\n\n\n\n\nLog in with the \ncoronium\n user:\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nUse the following command to change the password:\n\n\nsudo passwd coronium\n\n\n\n\n\nAnd then follow the prompts.\n\n\nEnable HTTPS\n\n\nTo secure your Coronium Core server with HTTPS, see the \nHTTPS/SSL\n section.\n\n\nWebmin Access\n\n\nTo access the Coronium Core Webmin, see the \nWebmin Guide\n.\n\n\nDatabase Security\n\n\nTo keep your databases more secure see \nMySQL Remote Access\n and \nMongoDB Remote Access\n.",
            "title": "Post Install"
        },
        {
            "location": "/server/installation/postinstall/#password",
            "text": "The default password for a fresh install is:  cloudadmin .   Change The Password  You should change the default password after the install.   Log in with the  coronium  user:  ssh coronium@<your-instance-ip>  Use the following command to change the password:  sudo passwd coronium  And then follow the prompts.",
            "title": "Password"
        },
        {
            "location": "/server/installation/postinstall/#enable-https",
            "text": "To secure your Coronium Core server with HTTPS, see the  HTTPS/SSL  section.",
            "title": "Enable HTTPS"
        },
        {
            "location": "/server/installation/postinstall/#webmin-access",
            "text": "To access the Coronium Core Webmin, see the  Webmin Guide .",
            "title": "Webmin Access"
        },
        {
            "location": "/server/installation/postinstall/#database-security",
            "text": "To keep your databases more secure see  MySQL Remote Access  and  MongoDB Remote Access .",
            "title": "Database Security"
        },
        {
            "location": "/server/webmin/setup/",
            "text": "Google Chrome\n\n\nFor the best Webmin experience, please use the \nGoogle Chrome\n web browser.\n\n\n\n\nTo access the Coronium Core Webmin, navigate to the following address using your browser:\n\n\nhttp://<your-coronium-domain>/_coronium/webmin/\n\n\nIf you've secured your system using SSL (see \nHTTPS/SSL\n), then:\n\n\nhttps://<your-coronium-domain>/_coronium/webmin/\n\n\n\n\nImportant Note\n\n\nBe sure to add the trailing slash ( \n/\n ) to the webmin address.\n\n\n\n\nYou will be asked for the Webmin access credentials, the user is \ncloudwebmin\n. The default password is \ncloudadmin\n.\n\n\nTo change the webmin password see the \nPassword\n section of the Webmin Guide.\n\n\nSee the \nAPI Code Editor\n screencast for an example of using the Webmin.",
            "title": "Browser Access"
        },
        {
            "location": "/server/webmin/scope/",
            "text": "Screencast Available\n\n\nLearn about application scopes in a screencast format by \nClicking here\n.\n\n\n\n\nCoronium Core supports multiple applications. Each Coronium Core based Corona application must have an \"application scope\" to allow for individual users and metrics. This allows you to filter users and metrics per application.\n\n\nSetting Up Scopes\n\n\nThe application scope is set in the \ncore.init\n method on the client-side in your Corona application.\n\n\nIt is important to choose a short but descriptive application scope name that is unique from your other application scopes.\n\n\n\n\nDon't Change The Scope!\n\n\nOnce the scope is set, do not change it for that particular application. If you do, you will lose user and metric associations.\n\n\n\n\nExample\n\n\ncore\n.\ninit\n({\n\n  \nserver\n \n=\n \n\"http://192.168.71.73\"\n,\n\n  \nkey\n \n=\n \n\"03624656-ca90-11e7-b8d4-fb59abeb4c03\"\n,\n\n  \nscope\n \n=\n \n\"Space Race\"\n\n\n})\n\n\n\n\n\n\nOnce you have set the scope, all \nUsers\n and \nAnalytics\n module methods will be scoped to that specfic application, which you can use to filter views in the Coronium Core Webmin.\n\n\nEnabling Scopes\n\n\nYou must run at least one \nUser\n or \nAnalytics\n method for the scope to be available in the Webmin. If the scope is not visible from the \"Application Scope\" dropdown menu, use the \nUpdate Scopes Cache\n option in the Webmin \nConfig\n section.",
            "title": "Application Scope"
        },
        {
            "location": "/server/webmin/scope/#setting-up-scopes",
            "text": "The application scope is set in the  core.init  method on the client-side in your Corona application.  It is important to choose a short but descriptive application scope name that is unique from your other application scopes.   Don't Change The Scope!  Once the scope is set, do not change it for that particular application. If you do, you will lose user and metric associations.   Example  core . init ({ \n   server   =   \"http://192.168.71.73\" , \n   key   =   \"03624656-ca90-11e7-b8d4-fb59abeb4c03\" , \n   scope   =   \"Space Race\"  })   Once you have set the scope, all  Users  and  Analytics  module methods will be scoped to that specfic application, which you can use to filter views in the Coronium Core Webmin.",
            "title": "Setting Up Scopes"
        },
        {
            "location": "/server/webmin/scope/#enabling-scopes",
            "text": "You must run at least one  User  or  Analytics  method for the scope to be available in the Webmin. If the scope is not visible from the \"Application Scope\" dropdown menu, use the  Update Scopes Cache  option in the Webmin  Config  section.",
            "title": "Enabling Scopes"
        },
        {
            "location": "/server/webmin/mailgun/",
            "text": "Screencast Available\n\n\nLearn how to set up the \nMailgun\n settings in a screencast format by \nClicking here\n.\n\n\n\n\nIf you're planning on using either the client or server-side \nEmail\n module or requiring your users to confirm registration by email with the \nUsers\n module, then you will need a valid \nMailgun\n account.\n\n\nOnce you have your account set-up you will need to provide your \nSending Domain\n and \nSecret API Key\n from Mailgun to your Coronium Core system.\n\n\nUsing the \nWebmin\n, navigate to the \nConfiguration\n section and enter the requested information under the \nMailgun\n tab. Click the \nUpdate\n button to add your credentials.\n\n\nYou can now use the \nEmail\n module, confirm user registrations, and send password resets with both the client-side and server-side \nUsers\n module.",
            "title": "Mailgun Config"
        },
        {
            "location": "/server/webmin/password/",
            "text": "To change the Coronium Core Webmin password, you must first log into the server using the \ncoronium\n user.\n\n\nwebmin-passwd\n\n\nRun the following on the command line and follow the prompts:\n\n\nsudo webmin-passwd\n\n\n\n\n\n\n\nWebmin Defaults\n\n\nThe Coronium Core Webmin user is always \ncloudwebmin\n. The default password is \ncloudadmin\n.",
            "title": "Password"
        },
        {
            "location": "/server/webmin/password/#webmin-passwd",
            "text": "Run the following on the command line and follow the prompts:  sudo webmin-passwd   Webmin Defaults  The Coronium Core Webmin user is always  cloudwebmin . The default password is  cloudadmin .",
            "title": "webmin-passwd"
        },
        {
            "location": "/server/guide/login/",
            "text": "To log in to your Coronium Core server, using a terminal/shell of your choice, SSH with the \ncoronium\n user.\n\n\nssh coronium@<server-ip-or-domain>\n\n\n\n\n\n\n\nTip\n\n\nYou can use the built in terminal on OSX. For Windows, check out \nPuTTY\n.",
            "title": "Logging In"
        },
        {
            "location": "/server/guide/key/",
            "text": "A server key is generated when you first install the server. You use this key when connecting with the client-side plugin. See the client-side \nInitialization\n section for more details.\n\n\nViewing Your Key\n\n\nUsing the \nWebmin\n you can find the server key in the \nConfiguration\n section.\n\n\n\n\nPost-Install\n\n\nThe server key is also displayed directly after installation in the console.\n\n\n\n\nRegenerate A Key\n\n\nIn the event that you need to generate a new keyfile, log in as the \ncoronium\n user and on the command line run:\n\n\nsudo coronium genkey\n\n\n\n\n\n\n\nImportant Note\n\n\nIf you regenerate the keyfile, any deployed Corona apps that use the server key will be unable to connect to the server.",
            "title": "Server Key"
        },
        {
            "location": "/server/guide/key/#viewing-your-key",
            "text": "Using the  Webmin  you can find the server key in the  Configuration  section.   Post-Install  The server key is also displayed directly after installation in the console.",
            "title": "Viewing Your Key"
        },
        {
            "location": "/server/guide/key/#regenerate-a-key",
            "text": "In the event that you need to generate a new keyfile, log in as the  coronium  user and on the command line run:  sudo coronium genkey   Important Note  If you regenerate the keyfile, any deployed Corona apps that use the server key will be unable to connect to the server.",
            "title": "Regenerate A Key"
        },
        {
            "location": "/server/guide/usage/",
            "text": "Coronium Webmin\n\n\nUse the Coronium \nWebmin\n to view and control many aspects of your Coronium Core server through a web browser.\n\n\nCoronium Tool\n\n\nThe Coronium tool is accessable via SSH. You must be logged in as the \ncoronium\n user to use the command line tool.\n\n\nA command line tool is available on the server to handle a few common operations. To see available options, on the command line, type:\n\n\ncoronium\n\n\n\n\n\n...and press the Enter key.\n\n\nViewing Logs\n\n\nWebmin\n\n\nUsing the \nWebmin\n go to the \nLog Viewer\n section and select a log to view.\n\n\nSSH\n\n\nTo view log files via SSH, connect to the server with the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nTo quickly monitor the debug log file, enter \ncclog\n on the command line.\n\n\nLog files can be found in the \n/usr/local/coronium/logs\n directory.\n\n\nTo watch a log file in real-time:\n\n\ntail -f /usr/local/coronium/logs/<log-name>.log\n\n\n\n\n\nPress \ncontrol-x\n to stop watching the log file.\n\n\n\n\nLog File Rotation\n\n\nThe log files are managed automatically, and will be \"rotated\" once they exceed a certain size limit.\n\n\n\n\nSystem Services\n\n\nWhen your \nCoronium Core\n server starts, its monitored by a utility called \nMonit\n, which makes sure that the required processes stay active. In the event that a process runs into an issue or crashes, it will be restarted shortly.\n\n\nIn the rare case where you need to manually stop, start or restart the Coronium stack, log in using the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nTo stop the Coronium stack, on the command line, enter:\n\n\nsudo coronium stop\n\n\n\n\n\nTo start the Coronium stack, use:\n\n\nsudo coronium start\n\n\n\n\n\nTo restart the Coronium stack, use:\n\n\nsudo coronium restart\n\n\n\n\n\n\n\nCaution\n\n\nYou should rarely need to manually control the Coronium stack process.\n\n\n\n\nUser Directories\n\n\nThe following user directories can be found in \n/home/coronium\n. They are will not be affected in any server updates.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nSee also\n\n\n\n\n\n\n\n\n\n\nfiles\n\n\nHolds all file uploads.\n\n\nFiles\n\n\n\n\n\n\nprojects\n\n\nHolds all the api projects.\n\n\nProjects\n\n\n\n\n\n\npages\n\n\nHolds all public facing web pages.\n\n\nPages\n\n\n\n\n\n\ntemplates\n\n\nHolds all templates for the server-side template module.\n\n\nTemplate\n\n\n\n\n\n\nconfig\n\n\nHolds all configuration files.\n\n\n\n\n\n\n\n\n\n\nPublic Directory\n\n\nIf you store files in the \nfiles/public\n directory they are accessible via the browser, which makes them insecure by nature. A common use case for storing files in the public directory is for displaying them within \npage templates\n. \n\n\n\n\nFile Selection\n\n\nIf a file with the same path exists in the \npages\n directory, it will be served first. If a file does not exist at the path, then the \nfiles/public\n directory will be checked.\n\n\n\n\nPath Examples\n\n\nFile: \n/home/coronium/files/public/imgs/image.png\n\n\nURL: \nhttps://your.coronium.server/imgs/image.png\n\n\nDatabase Passwords\n\n\nIf you need to change the databases passwords at any time, you can issue the following commands, and carefully follow the instructions while logged in as the \ncoronium\n user:\n\n\nMongo\n\n\nYou will need to provide your current Mongo password.\n\n\nsudo mongo-updatepw\n\n\n\n\n\nMySQL\n\n\nsudo mysql-updatepw",
            "title": "General Usage"
        },
        {
            "location": "/server/guide/usage/#coronium-webmin",
            "text": "Use the Coronium  Webmin  to view and control many aspects of your Coronium Core server through a web browser.",
            "title": "Coronium Webmin"
        },
        {
            "location": "/server/guide/usage/#coronium-tool",
            "text": "The Coronium tool is accessable via SSH. You must be logged in as the  coronium  user to use the command line tool.  A command line tool is available on the server to handle a few common operations. To see available options, on the command line, type:  coronium  ...and press the Enter key.",
            "title": "Coronium Tool"
        },
        {
            "location": "/server/guide/usage/#viewing-logs",
            "text": "",
            "title": "Viewing Logs"
        },
        {
            "location": "/server/guide/usage/#webmin",
            "text": "Using the  Webmin  go to the  Log Viewer  section and select a log to view.",
            "title": "Webmin"
        },
        {
            "location": "/server/guide/usage/#ssh",
            "text": "To view log files via SSH, connect to the server with the  coronium  user.  ssh coronium@<your-instance-ip>  To quickly monitor the debug log file, enter  cclog  on the command line.  Log files can be found in the  /usr/local/coronium/logs  directory.  To watch a log file in real-time:  tail -f /usr/local/coronium/logs/<log-name>.log  Press  control-x  to stop watching the log file.   Log File Rotation  The log files are managed automatically, and will be \"rotated\" once they exceed a certain size limit.",
            "title": "SSH"
        },
        {
            "location": "/server/guide/usage/#system-services",
            "text": "When your  Coronium Core  server starts, its monitored by a utility called  Monit , which makes sure that the required processes stay active. In the event that a process runs into an issue or crashes, it will be restarted shortly.  In the rare case where you need to manually stop, start or restart the Coronium stack, log in using the  coronium  user.  ssh coronium@<your-instance-ip>  To stop the Coronium stack, on the command line, enter:  sudo coronium stop  To start the Coronium stack, use:  sudo coronium start  To restart the Coronium stack, use:  sudo coronium restart   Caution  You should rarely need to manually control the Coronium stack process.",
            "title": "System Services"
        },
        {
            "location": "/server/guide/usage/#user-directories",
            "text": "The following user directories can be found in  /home/coronium . They are will not be affected in any server updates.     Name  Description  See also      files  Holds all file uploads.  Files    projects  Holds all the api projects.  Projects    pages  Holds all public facing web pages.  Pages    templates  Holds all templates for the server-side template module.  Template    config  Holds all configuration files.",
            "title": "User Directories"
        },
        {
            "location": "/server/guide/usage/#public-directory",
            "text": "If you store files in the  files/public  directory they are accessible via the browser, which makes them insecure by nature. A common use case for storing files in the public directory is for displaying them within  page templates .    File Selection  If a file with the same path exists in the  pages  directory, it will be served first. If a file does not exist at the path, then the  files/public  directory will be checked.   Path Examples  File:  /home/coronium/files/public/imgs/image.png  URL:  https://your.coronium.server/imgs/image.png",
            "title": "Public Directory"
        },
        {
            "location": "/server/guide/usage/#database-passwords",
            "text": "If you need to change the databases passwords at any time, you can issue the following commands, and carefully follow the instructions while logged in as the  coronium  user:",
            "title": "Database Passwords"
        },
        {
            "location": "/server/guide/usage/#mongo",
            "text": "You will need to provide your current Mongo password.  sudo mongo-updatepw",
            "title": "Mongo"
        },
        {
            "location": "/server/guide/usage/#mysql",
            "text": "sudo mysql-updatepw",
            "title": "MySQL"
        },
        {
            "location": "/server/guide/ssl/",
            "text": "Secure your \nCoronium Core\n server by utilizing the free SSL certificate service \nLet's Encrypt\n.\n\n\n\n\nWarning\n\n\nSetting up a secure Coronium Core server is not a trivial process, so be sure to read through \nall\n of the steps before starting, and then follow them carefully.\n\n\n\n\n\n\nScreencast Available\n\n\nLearn how to set up HTTPS in a screencast format by \nClicking here\n.\n\n\n\n\nOverview\n\n\nTo be issued a secure certificate, you must have a fully qualified domain name, and the proper DNS set up to serve the domain.\n\n\nA fully qualified domain name is basically a registered domain name. Where you decide to purchase a domain is up to you. \nGoDaddy\n is a popular choice. \n\n\nOnce you have your domain name, you will need to \"point\" it to your Coronium Core server. Most domain registars provide a means of setting up DNS.\n\n\nYou will want to set up a 3rd level domain for your Coronium Core server. This looks something like:\n\n\ncoronium.<mydomain>.com\n\n\nAmazon\n\n\nWhen you first install Coronium Core, make sure to \nadd the proper ports\n to security group settings. You can then use the \nRoute 53\n service for your DNS. There are ample guides to assist you. \n\n\nOnce set up, proceed to the \nLet's Encrypt\n section below.\n\n\nDigitalOcean\n\n\nYou will need to point your domain to the DigitalOcean nameservers. The process for this varies by domain registar, but in all cases, you will need the DigitalOcean nameserver addresses, which are:\n\n\n\n\nns1.digitalocean.com\n\n\nns2.digitalocean.com\n\n\nns3.digitalocean.com\n\n\n\n\nInstructions for setting nameservers on GoDaddy can be found \nhere\n.\n\n\n\n\nDroplet Required\n\n\nSpin up a Coronium Core droplet as outlined in the \nDigitalOcean Installation\n section before continuing.\n\n\n\n\n1. In the DigitalOcean control panel, click the \nNetworking\n link at the top:\n\n\n\n\n2. Enter your new domain name, without any prefix:\n\n\n\n\n3. Click the \nAdd Domain\n button:\n\n\n\n\n4. On the next screen, do the following:\n\n\n\n\nEnter the hostname (only the domain prefix) of your Coronium Core server. (1)\n\n\nFrom the \nWILL DIRECT TO\n field, select your Coronium Core droplet. (2)\n\n\n\n\n\n\n5. Click the \nCreate Record\n button on the right:\n\n\n\n\nAt this point your DNS is set up, but generally needs to propagate. This can take anywhere from 5 minutes to a number of hours (though usually within 15 minutes). \n\n\nYou can check the progress using a site like \nwhatsmydns\n. Enter the full domain, including the prefix, to test.\n\n\nLet's Encrypt\n\n\n\n\nActive Domain Required\n\n\nDo not continue with this guide until you have an active domain name for your Coronium Core server that you can reach through your web browser.\n\n\n\n\nTo move your Coronium Core server over to HTTPS, perform the following steps:\n\n\n1. Log into your Coronium Core droplet using the \nroot\n user:\n\n\nssh root@<your-coronium-domain>\n\n\n\n\n\nNote: The root user is \nubuntu\n if hosting on Amazon.\n\n\nIf you have not changed the password yet, the default is \ncloudadmin\n. You may be prompted for your password at various times during this process.\n\n\n2. Copy and paste the following on the command line to run the Coronium Core SSL updater:\n\n\n\n\nConfiguration Changes\n\n\nAt this point make sure you're ready to move over to HTTPS. The following process will permanently modify your configuration settings.\n\n\n\n\nwget https://s3.amazonaws.com/coronium-core/ssl.sh && sudo bash ./ssl.sh\n\n\n\n\n\nThe script will install the needed components, and update the configuration files. \n\n\nYou will then be propted for the \nhostname\n, a \nfully qualified domain name\n, and a valid \nemail\n. These items are required to request a certificate from Let's Encrypt.\n\n\nAs stated earlier, you should have created a 3rd level domain, for example: \ncoronium.<domain>.com\n. Using the example, when entering the requested information, it might look like:\n\n\n\n\nInput Issues\n\n\nMake sure to hit the \ndelete\n key a few times before entering values. If the update returns a confirmation instantly, then a space in the data is the most likely reason. If this happens, start again at step 2 above.\n\n\n\n\nEnter a hostname:\n \ncoronium\n\n\nEnter a FQDN:\n \ncoronium.<domain>.com\n\n\nEnter an email:\n \nyou@your-email.com\n\n\nBe sure to replace the information with your own answers.\n\n\n\n\nCheck Your Information\n\n\nMake sure to triple check your information. If not, then you might not be issued a certificate.\n\n\n\n\nAfter receiving your secure certificate, the script will exit and your Coronium Core server will be accesible using \nhttps\n. \n\n\n\n\nServer Reboot\n\n\nIt's generally a good idea to reboot the server instance by entering \nsudo reboot -h\n on the command line. Wait a minute, and then check to make sure the server is running again.\n\n\n\n\nBe sure to update the \nhost\n in the client configuration (in the Corona project):\n\n\ncore\n:\ninit\n({\n\n  \nserver\n \n=\n \n\"https://<coronium-core-host>\"\n\n  \n...\n\n\n})",
            "title": "HTTPS/SSL"
        },
        {
            "location": "/server/guide/ssl/#overview",
            "text": "To be issued a secure certificate, you must have a fully qualified domain name, and the proper DNS set up to serve the domain.  A fully qualified domain name is basically a registered domain name. Where you decide to purchase a domain is up to you.  GoDaddy  is a popular choice.   Once you have your domain name, you will need to \"point\" it to your Coronium Core server. Most domain registars provide a means of setting up DNS.  You will want to set up a 3rd level domain for your Coronium Core server. This looks something like:  coronium.<mydomain>.com",
            "title": "Overview"
        },
        {
            "location": "/server/guide/ssl/#amazon",
            "text": "When you first install Coronium Core, make sure to  add the proper ports  to security group settings. You can then use the  Route 53  service for your DNS. There are ample guides to assist you.   Once set up, proceed to the  Let's Encrypt  section below.",
            "title": "Amazon"
        },
        {
            "location": "/server/guide/ssl/#digitalocean",
            "text": "You will need to point your domain to the DigitalOcean nameservers. The process for this varies by domain registar, but in all cases, you will need the DigitalOcean nameserver addresses, which are:   ns1.digitalocean.com  ns2.digitalocean.com  ns3.digitalocean.com   Instructions for setting nameservers on GoDaddy can be found  here .   Droplet Required  Spin up a Coronium Core droplet as outlined in the  DigitalOcean Installation  section before continuing.   1. In the DigitalOcean control panel, click the  Networking  link at the top:   2. Enter your new domain name, without any prefix:   3. Click the  Add Domain  button:   4. On the next screen, do the following:   Enter the hostname (only the domain prefix) of your Coronium Core server. (1)  From the  WILL DIRECT TO  field, select your Coronium Core droplet. (2)    5. Click the  Create Record  button on the right:   At this point your DNS is set up, but generally needs to propagate. This can take anywhere from 5 minutes to a number of hours (though usually within 15 minutes).   You can check the progress using a site like  whatsmydns . Enter the full domain, including the prefix, to test.",
            "title": "DigitalOcean"
        },
        {
            "location": "/server/guide/ssl/#lets-encrypt",
            "text": "Active Domain Required  Do not continue with this guide until you have an active domain name for your Coronium Core server that you can reach through your web browser.   To move your Coronium Core server over to HTTPS, perform the following steps:  1. Log into your Coronium Core droplet using the  root  user:  ssh root@<your-coronium-domain>  Note: The root user is  ubuntu  if hosting on Amazon.  If you have not changed the password yet, the default is  cloudadmin . You may be prompted for your password at various times during this process.  2. Copy and paste the following on the command line to run the Coronium Core SSL updater:   Configuration Changes  At this point make sure you're ready to move over to HTTPS. The following process will permanently modify your configuration settings.   wget https://s3.amazonaws.com/coronium-core/ssl.sh && sudo bash ./ssl.sh  The script will install the needed components, and update the configuration files.   You will then be propted for the  hostname , a  fully qualified domain name , and a valid  email . These items are required to request a certificate from Let's Encrypt.  As stated earlier, you should have created a 3rd level domain, for example:  coronium.<domain>.com . Using the example, when entering the requested information, it might look like:   Input Issues  Make sure to hit the  delete  key a few times before entering values. If the update returns a confirmation instantly, then a space in the data is the most likely reason. If this happens, start again at step 2 above.   Enter a hostname:   coronium  Enter a FQDN:   coronium.<domain>.com  Enter an email:   you@your-email.com  Be sure to replace the information with your own answers.   Check Your Information  Make sure to triple check your information. If not, then you might not be issued a certificate.   After receiving your secure certificate, the script will exit and your Coronium Core server will be accesible using  https .    Server Reboot  It's generally a good idea to reboot the server instance by entering  sudo reboot -h  on the command line. Wait a minute, and then check to make sure the server is running again.   Be sure to update the  host  in the client configuration (in the Corona project):  core : init ({ \n   server   =   \"https://<coronium-core-host>\" \n   ...  })",
            "title": "Let's Encrypt"
        },
        {
            "location": "/server/guide/lifecycle/",
            "text": "The Coronium Core server works much like a regular web server.\n\n\nRequest\n\n\nA request is sent by the client, either from the \nCorona plug-in\n or the \nPages API\n, and then a client connection is initiated and the workload is processed by one of the built-in module APIs, or a custom server-side API.\n\n\nAs a developer you should make sure your server-side APIs are concise and optimized to get the response back to the client as quick as possible.\n\n\nEvery request takes up a server connection (and memory) until a response is returned.\n\n\nResponse\n\n\nOnce the workload has been process, the response is sent back down to the client, and the client connection is closed.\n\n\nNo state is kept\n. Once the response is sent, the server no longer has access to the client connection. \n\n\nContext\n\n\nThere are two special cases that work outside of the request/response lifecycle; \nJobs\n and \nTimers\n.\n\n\nBoth of these live in their own context that is detached from the request/response lifecycle. When using \nJobs\n or \nTimers\n you are not able to send responses to a client, as they don't exist in this context.\n\n\nJobs\n run in their own service and can only be managed through the \nWebmin\n. \nTimers\n can be started during a client request, but are immeadiatly detached into their own context.",
            "title": "Lifecycle/Context"
        },
        {
            "location": "/server/guide/lifecycle/#request",
            "text": "A request is sent by the client, either from the  Corona plug-in  or the  Pages API , and then a client connection is initiated and the workload is processed by one of the built-in module APIs, or a custom server-side API.  As a developer you should make sure your server-side APIs are concise and optimized to get the response back to the client as quick as possible.  Every request takes up a server connection (and memory) until a response is returned.",
            "title": "Request"
        },
        {
            "location": "/server/guide/lifecycle/#response",
            "text": "Once the workload has been process, the response is sent back down to the client, and the client connection is closed.  No state is kept . Once the response is sent, the server no longer has access to the client connection.",
            "title": "Response"
        },
        {
            "location": "/server/guide/lifecycle/#context",
            "text": "There are two special cases that work outside of the request/response lifecycle;  Jobs  and  Timers .  Both of these live in their own context that is detached from the request/response lifecycle. When using  Jobs  or  Timers  you are not able to send responses to a client, as they don't exist in this context.  Jobs  run in their own service and can only be managed through the  Webmin .  Timers  can be started during a client request, but are immeadiatly detached into their own context.",
            "title": "Context"
        },
        {
            "location": "/server/guide/mongo/",
            "text": "If you don't plan on using any of the Mongo based modules, like \ncore.data\n or \ncore.mongo\n you can reclaim some memory and resources for your system.\n\n\nTo disable MongoDB, you will need to log in as the \nroot\n user (\nubuntu\n on EC2) and run the following on the command line:\n\n\nsudo mongo-enabled \nfalse\n\n\n\n\n\n\nThis will stop the MongoDB service from running. \nThe server will automatically reboot after issuing this command\n.\n\n\nIn the future, if you decide you need MongoDB, log in as the \nroot\n user (\nubuntu\n on EC2), and run:\n\n\nsudo mongo-enabled \ntrue",
            "title": "Disabling MongoDB"
        },
        {
            "location": "/server/guide/tools/",
            "text": "Command Line Tools\n\n\nThe \nCoronium Core\n server command line tools can be used once you have logged into the server using your command line. Be sure to log in as the \ncoronium\n user.\n\n\ncoronium\n\n\nUsage:\n \ncoronium\n\n\nWill show the possible options you can use with the \ncoronium\n tool.\n\n\n\n\nmongo-updatepw\n\n\nUsage:\n \nsudo mongo-updatepw\n\n\nWill display the Mongo password update tool.\n\n\n\n\nmongo-remote\n\n\nUsage:\n \nsudo mongo-remote [on|off]\n\n\nToggle the ability to connect to the Mongo database remotely.\n\n\n\n\nmongo-enabled\n\n\nUsage:\n \nsudo mongo-enabled [true|false]\n\n\nEnable/disable the MongoDB service for the server. This will save on resources if you are not using MongoDB.\n\n\n\n\nmysql-updatepw\n\n\nUsage:\n \nsudo mysql-updatepw\n\n\nWill display the MySQL password update tool.\n\n\n\n\nmysql-remote\n\n\nUsage:\n \nsudo mysql-remote [on|off]\n\n\nToggle the ability to connect to the MySQL database remotely.\n\n\n\n\nwebmin-passwd\n\n\nUsage:\n \nsudo webmin-passwd\n\n\nWill display the Webmin password update tool.\n\n\n\n\nwebmin-apihost\n\n\n\n\nDanger!\n\n\nDo not use this command unless you know why and how.\n\n\n\n\nUsage:\n \nsudo webmin-apihost <host-address>\n\n\nChange the API host address.",
            "title": "CLI Tools"
        },
        {
            "location": "/server/guide/tools/#command-line-tools",
            "text": "The  Coronium Core  server command line tools can be used once you have logged into the server using your command line. Be sure to log in as the  coronium  user.",
            "title": "Command Line Tools"
        },
        {
            "location": "/server/guide/tools/#coronium",
            "text": "Usage:   coronium  Will show the possible options you can use with the  coronium  tool.",
            "title": "coronium"
        },
        {
            "location": "/server/guide/tools/#mongo-updatepw",
            "text": "Usage:   sudo mongo-updatepw  Will display the Mongo password update tool.",
            "title": "mongo-updatepw"
        },
        {
            "location": "/server/guide/tools/#mongo-remote",
            "text": "Usage:   sudo mongo-remote [on|off]  Toggle the ability to connect to the Mongo database remotely.",
            "title": "mongo-remote"
        },
        {
            "location": "/server/guide/tools/#mongo-enabled",
            "text": "Usage:   sudo mongo-enabled [true|false]  Enable/disable the MongoDB service for the server. This will save on resources if you are not using MongoDB.",
            "title": "mongo-enabled"
        },
        {
            "location": "/server/guide/tools/#mysql-updatepw",
            "text": "Usage:   sudo mysql-updatepw  Will display the MySQL password update tool.",
            "title": "mysql-updatepw"
        },
        {
            "location": "/server/guide/tools/#mysql-remote",
            "text": "Usage:   sudo mysql-remote [on|off]  Toggle the ability to connect to the MySQL database remotely.",
            "title": "mysql-remote"
        },
        {
            "location": "/server/guide/tools/#webmin-passwd",
            "text": "Usage:   sudo webmin-passwd  Will display the Webmin password update tool.",
            "title": "webmin-passwd"
        },
        {
            "location": "/server/guide/tools/#webmin-apihost",
            "text": "Danger!  Do not use this command unless you know why and how.   Usage:   sudo webmin-apihost <host-address>  Change the API host address.",
            "title": "webmin-apihost"
        },
        {
            "location": "/server/modules/api/",
            "text": "The API module allows you to create server-side api methods that can be called using the client-side \nAPI\n module.\n\n\nA server-side api is useful for more complex application logic, and in fact, is the only way to access the full functionality of the \nMySQL\n and \nMongo\n modules. Some modules are only available server-side.\n\n\nProjects\n\n\nServer-side api methods are housed in \"API Projects\" that are stored on the server. Projects allow you to create specific functionality for an API, which can then be shared amongst multiple client applications. \n\n\nManaging Projects\n\n\nYou manage projects by using the Coronium \nWebmin\n \nAPI Builder\n.\n\n\nAdd Project\n\n\nLog into your browser based \nWebmin\n and go to the \nAPI Builder\n section. Click the \nNew Project\n button and follow the instructions.\n\n\nAfter creating your project, you can use the \nAPI Builder\n code editor to build your custom API code.\n\n\nDelete Project\n\n\nLog into your browser based \nWebmin\n and go to the \nAPI Builder\n section. Click the \nDelete\n button for the project you want to delete, and follow the instructions.\n\n\nProject Files\n\n\nmain.lua\n\n\n\n\nWebmin Code Editor\n\n\nYou can edit the \nmain.lua\n and other project files using a visual code editor. Go to the \nAPI Builder\n section in the \nWebmin\n and click the project file you would like to edit.\n\n\n\n\nThe \nmain.lua\n file will contain your custom server-side api methods for the project. By default a simple \"echo\" test method is generated.\n\n\nmain.lua example\n\n\n-- Coronium Core API\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ntest\n(\n \ninput\n \n)\n\n  \nreturn\n \ninput\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nYou can call this method from the client using the client-side \nAPI\n module.\n\n\nClient-side example\n\n\ncore\n.\ninit\n({\n\n  \nserver\n \n=\n \n\"https://your.coronium.host\"\n,\n\n  \nkey\n \n=\n \n\"<coronium-server-key>\"\n,\n\n  \nscope\n \n=\n \n\"<application-scope>\"\n,\n\n  \napi\n \n=\n \n\"default\"\n\n\n})\n\n\n\nlocal\n \napiResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nname\n)\n \n-- Jimmy\n\n  \nend\n\n\nend\n\n\ncore\n.\napi\n.\ntest\n({\nname\n=\n\"Jimmy\"\n},\n \napiResponse\n)\n\n\n\n\n\n\nAdding Files\n\n\nThere may be times when you would like to split up your API project code into seperate files. You can add new files to a project using the \nWebmin\n. \n\n\nGo to the \nAPI Builder\n section of the Webmin and click the \nAdd File\n button for the project you would like to add a file to and requiring it into the projects \nmain.lua\n file.\n\n\nThe important thing to know about external file modules is that they cannot return output to the client directly. \nOnly the main.lua file can send output back down to the client\n.\n\n\nBecause of this it is important that you set up your external file modules properly to return results back to the \nmain.lua\n file for sending results downstream.\n\n\nExample File Module\n\n\n--project/default/db.lua\n\n\nlocal\n \ndb\n \n=\n \n{}\n\n\n\nfunction\n \ndb\n.\ngetSomeData\n(\nparams\n)\n\n\n  \nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nselectOne\n(\n\"products\"\n,\n \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nwhere\n \n=\n \n{\n \ncolor\n \n=\n \nparams\n.\ncolor\n \n}\n\n  \n})\n\n\n  \n--we must return the result back to the main.lua\n\n  \nreturn\n \nres\n,\n \nerr\n\n\n\nend\n\n\n\nreturn\n \n\n\n\n\n\nExample Main Lua File\n\n\n--project/default/main.lua\n\n\nlocal\n \ndb\n \n=\n \nrequire\n(\n\"project.db\"\n)\n\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ndoSomething\n(\ninput\n)\n\n\n  \nlocal\n \nres\n,\n \nerr\n \n=\n \ndb\n.\ngetSomeData\n({\ncolor\n \n=\n \n\"Red\"\n})\n\n\n  \n--here we can return data to the downstream client\n\n  \nif\n \nnot\n \nres\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \nreturn\n \nres\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\ncore.api\n\n\nTo create your api, you need to extend the \ncore.api\n object. As shown in the main.lua file above, this is done like so:\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\n\n\n\nAdd your api methods to the \napi\n object, and finally return the \napi\n object at the end of the file.\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\naddUser\n(\ninput\n)\n\n  \n...\n \n--code here\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nInput\n\n\nCustom API methods are passed two parameters, which are a table of \ninput\n values sent up from the client-side \ncore.api\n method, and the \nscope\n of the current client call (see \nApplication Scope\n). \n\n\nSome methods may not send input, in which case the input parameter will be \nnil\n. Most often you will only use the \ninput\n parameter.\n\n\n\n\nNote\n\n\nThe \ninput\n parameter is supplied from the client-side call (see \nclient-side API\n). The \nscope\n is determined internally. You \ndo not\n send the scope value in the client-side API call.\n\n\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\n-- Input only\n\n\nfunction\n \napi\n.\naddUser\n(\ninput\n)\n\n  \nlocal\n \nname\n \n=\n \ninput\n.\nname\n\n  \nlocal\n \nage\n \n=\n \ninput\n.\nage\n\n\n  \n...\n\n\nend\n\n\n\n-- Input and Scope\n\n\nfunction\n \napi\n.\ngetUser\n(\ninput\n,\n \nscope\n)\n\n  \nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\ngetWithQuery\n(\nscope\n,\n \n{\n\n    \nusername\n \n=\n \ninput\n.\nname\n\n  \n})\n\n\n  \n...\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nReturn\n\n\nAll api methods must return a response.\n This can either be the result of the api operation, or an error (see errors below). You can only return a \nsingle\n response value.\n\n\nA response value can be one of the following Lua types: \nString\n, \nNumber\n, \nBoolean\n, or \nTable\n. String and Table values must be JSON encodable. The value returned will be sent back down to the client for consumption.\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ndoSomething\n(\ninput\n)\n\n\n  \nreturn\n \n\"Welcome to Coronium\"\n\n  \n--OR\n\n  \nreturn\n \n42\n\n  \n--OR\n\n  \nreturn\n \ntrue\n\n  \n--OR\n\n  \nreturn\n \n{\nname\n \n=\n \n\"Sally\"\n,\n \nage\n \n=\n \n34\n}\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nTo learn how to consume the response on the client, see the client-side \nAPI\n module.\n\n\ncore.error\n\n\nReturn an error response object to the client.\n\n\ncore\n.\nerror\n(\nmessage\n,\n \ncode\n)\n\n\n\n\n\n\nErrors\n\n\nAt times you may want to indicate to the client that an error has taken place in the server-side api operation. To do this, you return a \ncore.error\n response object. This will be interpeted by the client as an error event.\n\n\nThe \ncore.error\n object requires a \nstring\n message parameter, and an optional \nnumber\n based error code.\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\nechoName\n(\ninput\n)\n\n  \nif\n \nnot\n \ninput\n.\nname\n \nthen\n\n    \n-- Return error with string only:\n\n    \nreturn\n \ncore\n.\nerror\n(\n\"The name parameter is missing!\"\n)\n\n\n    \n-- OR\n\n\n    \n-- Return error with a custom status code too:\n\n    \nreturn\n \ncore\n.\nerror\n(\n\"The name parameter is missing!\"\n,\n \n110\n)\n\n  \nend\n\n\n  \nreturn\n \n\"Hello, \"\n \n..\n \ninput\n.\nname\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nSome of the built in modules return an error string \nand\n an error code which you can pass downstream to the client. See each modules documentation for more information.\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ngetUser\n(\ninput\n)\n\n\n  \nlocal\n \nuser\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nget\n(\n\"aad3eba3-9c9c-9a1b-f236de1e3752\"\n)\n\n\n  \nif\n \nnot\n \nuser\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n,\n \ncode\n)\n\n  \nend\n\n\n  \nreturn\n \nuser\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nWhen using custom error codes, make sure to check the latest reserved \nStatus Codes\n and choose something not listed there. Custom status codes should generally be in the 100-199 range.\n\n\nUsing Modules\n\n\nMost often you will want to do something more useful than echoing data. You can use the server-side modules to add functionality to your api.\n\n\nExamples\n\n\nList the available collections in a Mongo database:\n\n\nServer-side\n\n\n--main.lua\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ngetCollections\n(\ninput\n)\n\n\n  \n--get the database name from the input\n\n  \nlocal\n \ndb_name\n \n=\n \ninput\n.\ndb_name\n\n\n  \n--get a mongo db instance\n\n  \nlocal\n \ndb\n,\n \nerr\n \n=\n \ncore\n.\nmongo\n(\ndb_name\n)\n\n\n  \n--check for errors\n\n  \nif\n \nnot\n \ndb\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \n--get the collection list\n\n  \nlocal\n \nlist\n,\n \nerr\n \n=\n \ndb\n:\nlistCollections\n()\n\n\n  \n--check for errors\n\n  \nif\n \nnot\n \nlist\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \n--otherwise return the list\n\n  \nreturn\n \nlist\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nSome things to note in the code above:\n\n\n\n\nErrors from the server-side modules can be passed to the client with \ncore.error\n.\n\n\nAny return values from server-side modules can be used in the \nreturn\n.\n\n\n\n\nTo issue a call to this api method on the client, we use the client-side \nAPI\n module:\n\n\nClient-side\n\n\nlocal\n \nfunction\n \napiResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \n--got collection list\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nprint\n(\nevt\n.\nresult\n[\ni\n])\n \n-- collection name\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\napi\n.\ngetCollections\n({\ndb_name\n=\n\"app\"\n},\n \napiResponse\n)\n\n\n\n\n\n\nGet a user using a MySQL query:\n\n\nServer-side\n\n\n--main.lua\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\nqueryUser\n(\ninput\n)\n\n\n  \n--get id number from the input\n\n  \nlocal\n \nid\n \n=\n \ninput\n.\nid\n\n\n  \n--check for id value\n\n  \nif\n \nnot\n \nid\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\n\"Id is missing!\"\n)\n\n  \nend\n\n\n  \n--build sql query\n\n  \nlocal\n \nq\n \n=\n \ncore\n.\nsf\n(\n\"SELECT * FROM users WHERE id=%d;\"\n,\n \ninput\n.\nid\n)\n\n\n  \n--run the query\n\n  \nlocal\n \nrecord\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nquery\n(\n\"app\"\n,\n \nq\n)\n\n\n  \n--check for error\n\n  \nif\n \nnot\n \nrecord\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \n--return the record\n\n  \nreturn\n \nrecord\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nClient-side\n\n\nlocal\n \nfunction\n \napiResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \n--result is a record\n\n    \nprint\n(\nevt\n.\nresult\n.\nname\n)\n \n--output 'name' column\n\n  \nend\n\n\nend\n\n\n\ncore\n.\napi\n.\nqueryUser\n({\nid\n=\n20\n},\n \napiResponse\n)\n\n\n\n\n\n\n\n\nClient-Side MySQL\n\n\nThe following example can also be done directly from the client-side \nMySQL\n module.\n\n\n\n\nAssuming we have a MySQL database properly created called \"app\", we can quickly insert a new record to the \"users\" table like so:\n\n\nServer-side\n\n\n--main.lua\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\naddUser\n(\ninput\n)\n\n\n  \n--insert data using EZ query method\n\n  \nlocal\n \nid\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ninsert\n(\n\"app\"\n,\n \n{\n\n    \ntbl\n \n=\n \n\"users\"\n,\n\n    \n--pass the input directly, escaping string values\n\n    \nvalues\n \n=\n \ncore\n.\nmysql\n.\nescapeAll\n(\ninput\n)\n\n  \n})\n\n\n  \n--check for error\n\n  \nif\n \nnot\n \nid\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \n--return new record id\n\n  \nreturn\n \nid\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nClient-side\n\n\nlocal\n \nfunction\n \napiResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n)\n \n--result is id\n\n  \nend\n\n\nend\n\n\n\nlocal\n \ndata\n \n=\n \n{\n\n  \nname\n \n=\n \n\"Johnson\"\n,\n\n  \nage\n \n=\n \n32\n,\n\n  \nactive\n \n=\n \ntrue\n\n\n}\n\n\n\ncore\n.\napi\n.\naddUser\n(\ndata\n,\n \napiResponse\n)",
            "title": "API"
        },
        {
            "location": "/server/modules/api/#projects",
            "text": "Server-side api methods are housed in \"API Projects\" that are stored on the server. Projects allow you to create specific functionality for an API, which can then be shared amongst multiple client applications.",
            "title": "Projects"
        },
        {
            "location": "/server/modules/api/#managing-projects",
            "text": "You manage projects by using the Coronium  Webmin   API Builder .",
            "title": "Managing Projects"
        },
        {
            "location": "/server/modules/api/#add-project",
            "text": "Log into your browser based  Webmin  and go to the  API Builder  section. Click the  New Project  button and follow the instructions.  After creating your project, you can use the  API Builder  code editor to build your custom API code.",
            "title": "Add Project"
        },
        {
            "location": "/server/modules/api/#delete-project",
            "text": "Log into your browser based  Webmin  and go to the  API Builder  section. Click the  Delete  button for the project you want to delete, and follow the instructions.",
            "title": "Delete Project"
        },
        {
            "location": "/server/modules/api/#project-files",
            "text": "",
            "title": "Project Files"
        },
        {
            "location": "/server/modules/api/#mainlua",
            "text": "Webmin Code Editor  You can edit the  main.lua  and other project files using a visual code editor. Go to the  API Builder  section in the  Webmin  and click the project file you would like to edit.   The  main.lua  file will contain your custom server-side api methods for the project. By default a simple \"echo\" test method is generated.  main.lua example  -- Coronium Core API  local   api   =   core . api ()  function   api . test (   input   ) \n   return   input  end  return   api   You can call this method from the client using the client-side  API  module.  Client-side example  core . init ({ \n   server   =   \"https://your.coronium.host\" , \n   key   =   \"<coronium-server-key>\" , \n   scope   =   \"<application-scope>\" , \n   api   =   \"default\"  })  local   apiResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . name )   -- Jimmy \n   end  end  core . api . test ({ name = \"Jimmy\" },   apiResponse )",
            "title": "main.lua"
        },
        {
            "location": "/server/modules/api/#adding-files",
            "text": "There may be times when you would like to split up your API project code into seperate files. You can add new files to a project using the  Webmin .   Go to the  API Builder  section of the Webmin and click the  Add File  button for the project you would like to add a file to and requiring it into the projects  main.lua  file.  The important thing to know about external file modules is that they cannot return output to the client directly.  Only the main.lua file can send output back down to the client .  Because of this it is important that you set up your external file modules properly to return results back to the  main.lua  file for sending results downstream.  Example File Module  --project/default/db.lua  local   db   =   {}  function   db . getSomeData ( params ) \n\n   local   res ,   err   =   core . mysql . selectOne ( \"products\" ,   { \n     tbl   =   \"toys\" , \n     where   =   {   color   =   params . color   } \n   }) \n\n   --we must return the result back to the main.lua \n   return   res ,   err  end  return    Example Main Lua File  --project/default/main.lua  local   db   =   require ( \"project.db\" )  local   api   =   core . api ()  function   api . doSomething ( input ) \n\n   local   res ,   err   =   db . getSomeData ({ color   =   \"Red\" }) \n\n   --here we can return data to the downstream client \n   if   not   res   then \n     return   core . error ( err ) \n   end \n\n   return   res  end  return   api",
            "title": "Adding Files"
        },
        {
            "location": "/server/modules/api/#coreapi",
            "text": "To create your api, you need to extend the  core.api  object. As shown in the main.lua file above, this is done like so:  local   api   =   core . api ()   Add your api methods to the  api  object, and finally return the  api  object at the end of the file.  Example  local   api   =   core . api ()  function   api . addUser ( input ) \n   ...   --code here  end  return   api",
            "title": "core.api"
        },
        {
            "location": "/server/modules/api/#input",
            "text": "Custom API methods are passed two parameters, which are a table of  input  values sent up from the client-side  core.api  method, and the  scope  of the current client call (see  Application Scope ).   Some methods may not send input, in which case the input parameter will be  nil . Most often you will only use the  input  parameter.   Note  The  input  parameter is supplied from the client-side call (see  client-side API ). The  scope  is determined internally. You  do not  send the scope value in the client-side API call.   Example  local   api   =   core . api ()  -- Input only  function   api . addUser ( input ) \n   local   name   =   input . name \n   local   age   =   input . age \n\n   ...  end  -- Input and Scope  function   api . getUser ( input ,   scope ) \n   local   res ,   err   =   core . users . getWithQuery ( scope ,   { \n     username   =   input . name \n   }) \n\n   ...  end  return   api",
            "title": "Input"
        },
        {
            "location": "/server/modules/api/#return",
            "text": "All api methods must return a response.  This can either be the result of the api operation, or an error (see errors below). You can only return a  single  response value.  A response value can be one of the following Lua types:  String ,  Number ,  Boolean , or  Table . String and Table values must be JSON encodable. The value returned will be sent back down to the client for consumption.  Example  local   api   =   core . api ()  function   api . doSomething ( input ) \n\n   return   \"Welcome to Coronium\" \n   --OR \n   return   42 \n   --OR \n   return   true \n   --OR \n   return   { name   =   \"Sally\" ,   age   =   34 }  end  return   api   To learn how to consume the response on the client, see the client-side  API  module.",
            "title": "Return"
        },
        {
            "location": "/server/modules/api/#coreerror",
            "text": "Return an error response object to the client.  core . error ( message ,   code )",
            "title": "core.error"
        },
        {
            "location": "/server/modules/api/#errors",
            "text": "At times you may want to indicate to the client that an error has taken place in the server-side api operation. To do this, you return a  core.error  response object. This will be interpeted by the client as an error event.  The  core.error  object requires a  string  message parameter, and an optional  number  based error code.  Example  local   api   =   core . api ()  function   api . echoName ( input ) \n   if   not   input . name   then \n     -- Return error with string only: \n     return   core . error ( \"The name parameter is missing!\" ) \n\n     -- OR \n\n     -- Return error with a custom status code too: \n     return   core . error ( \"The name parameter is missing!\" ,   110 ) \n   end \n\n   return   \"Hello, \"   ..   input . name  end  return   api   Some of the built in modules return an error string  and  an error code which you can pass downstream to the client. See each modules documentation for more information.  Example  local   api   =   core . api ()  function   api . getUser ( input ) \n\n   local   user ,   err ,   code   =   core . users . get ( \"aad3eba3-9c9c-9a1b-f236de1e3752\" ) \n\n   if   not   user   then \n     return   core . error ( err ,   code ) \n   end \n\n   return   user  end  return   api   When using custom error codes, make sure to check the latest reserved  Status Codes  and choose something not listed there. Custom status codes should generally be in the 100-199 range.",
            "title": "Errors"
        },
        {
            "location": "/server/modules/api/#using-modules",
            "text": "Most often you will want to do something more useful than echoing data. You can use the server-side modules to add functionality to your api.",
            "title": "Using Modules"
        },
        {
            "location": "/server/modules/api/#examples",
            "text": "List the available collections in a Mongo database:  Server-side  --main.lua  local   api   =   core . api ()  function   api . getCollections ( input ) \n\n   --get the database name from the input \n   local   db_name   =   input . db_name \n\n   --get a mongo db instance \n   local   db ,   err   =   core . mongo ( db_name ) \n\n   --check for errors \n   if   not   db   then \n     return   core . error ( err ) \n   end \n\n   --get the collection list \n   local   list ,   err   =   db : listCollections () \n\n   --check for errors \n   if   not   list   then \n     return   core . error ( err ) \n   end \n\n   --otherwise return the list \n   return   list  end  return   api   Some things to note in the code above:   Errors from the server-side modules can be passed to the client with  core.error .  Any return values from server-side modules can be used in the  return .   To issue a call to this api method on the client, we use the client-side  API  module:  Client-side  local   function   apiResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     --got collection list \n     for   i = 1 ,   # evt . result   do \n       print ( evt . result [ i ])   -- collection name \n     end \n   end  end  core . api . getCollections ({ db_name = \"app\" },   apiResponse )   Get a user using a MySQL query:  Server-side  --main.lua  local   api   =   core . api ()  function   api . queryUser ( input ) \n\n   --get id number from the input \n   local   id   =   input . id \n\n   --check for id value \n   if   not   id   then \n     return   core . error ( \"Id is missing!\" ) \n   end \n\n   --build sql query \n   local   q   =   core . sf ( \"SELECT * FROM users WHERE id=%d;\" ,   input . id ) \n\n   --run the query \n   local   record ,   err   =   core . mysql . query ( \"app\" ,   q ) \n\n   --check for error \n   if   not   record   then \n     return   core . error ( err ) \n   end \n\n   --return the record \n   return   record  end  return   api   Client-side  local   function   apiResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     --result is a record \n     print ( evt . result . name )   --output 'name' column \n   end  end  core . api . queryUser ({ id = 20 },   apiResponse )    Client-Side MySQL  The following example can also be done directly from the client-side  MySQL  module.   Assuming we have a MySQL database properly created called \"app\", we can quickly insert a new record to the \"users\" table like so:  Server-side  --main.lua  local   api   =   core . api ()  function   api . addUser ( input ) \n\n   --insert data using EZ query method \n   local   id ,   err   =   core . mysql . insert ( \"app\" ,   { \n     tbl   =   \"users\" , \n     --pass the input directly, escaping string values \n     values   =   core . mysql . escapeAll ( input ) \n   }) \n\n   --check for error \n   if   not   id   then \n     return   core . error ( err ) \n   end \n\n   --return new record id \n   return   id  end  return   api   Client-side  local   function   apiResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result )   --result is id \n   end  end  local   data   =   { \n   name   =   \"Johnson\" , \n   age   =   32 , \n   active   =   true  }  core . api . addUser ( data ,   apiResponse )",
            "title": "Examples"
        },
        {
            "location": "/server/modules/data/",
            "text": "The \ndata\n module provides a simple interface to the underlying Mongo database. It is meant for basic tasks. See the \nMongo\n module if you require more advanced usage.\n\n\n\n\nClient-Side Data\n\n\nMost data handling can be handled directly on the client-side, without the need to create a server-side api. See the client-side the \nData\n module.\n\n\n\n\ncore.data\n\n\nTo perform any of the object methods, you need a reference to the \ndata\n module.\n\n\ncore\n.\ndata\n(\nsource_name\n[,\n \ndb_name\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource_name\n\n\nThe source name to use for the objects.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndb_name\n\n\nSet a specific database. Default: \"_app\"\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nA source object, or \nnil\n and an error.\n\n\nExample\n\n\nlocal\n \nusers\n \n=\n \ncore\n.\ndata\n(\n\"users\"\n)\n\n\n\n\n\n\nget\n\n\nGet a data object from the Mongo database.\n\n\n<\nsource\n>\n:\nget\n(\nidOrQuery\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nidOrQuery\n\n\nA string id or query table.\n\n\nString\n or \nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nobj\n,\n \nerr\n \n=\n \nusers\n:\nget\n(\n\"id1234\"\n)\n\n\n\n\n\n\n\n\nTip\n\n\nTo retrieve multiple data objects, see the \ngetPage\n method.\n\n\n\n\nsave\n\n\nCreate a new, or update an existing, data object and save it in the Mongo database.\n\n\n<\nsource\n>\n:\nsave\n(\nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nobj\n\n\nA data object to save.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nid\n,\n \nerr\n \n=\n \nusers\n:\nsave\n(\nobj\n)\n\n\n\n\n\n\ndelete\n\n\nDelete a data object from the Mongo database.\n\n\n<\nsource\n>\n:\ndelete\n(\nidOrObj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nidOrObj\n\n\nAn object id string or data object with \n_id\n field.\n\n\nString\n or \nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nsuccess\n,\n \nerr\n \n=\n \nusers\n:\ndelete\n(\nobj\n)\n\n\n\n\n\n\nPagination\n\n\ngetPage\n\n\nGet multiple data objects from the Mongo database based on a specific criteria.\n\n\n<\nsource\n>\n:\ngetPage\n(\npage\n,\n \nperPage\n,\n \nsort\n,\n \nquery\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npage\n\n\nThe page number to return.\n\n\nnone\n\n\nNumber\n\n\nY\n\n\n\n\n\n\nperPage\n\n\nThe number of objects per page.\n\n\n20\n\n\nNumber\n\n\nN\n\n\n\n\n\n\nsort\n\n\nSort constant or sorting table.\n\n\ncore.ASC\n\n\nConst\n or \nTable\n\n\nN\n\n\n\n\n\n\nquery\n\n\nSpecialized query table.\n\n\n{ } (all records)\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nSort Constants\n\n\n\n\n\n\n\n\nEnum\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncore.ASC\n\n\nSort in an ascending order.\n\n\n\n\n\n\ncore.DESC\n\n\nSort in a descending order.\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nobjects\n \n=\n \nusers\n:\ngetPage\n({},\n \n1\n,\n \n10\n)",
            "title": "Data"
        },
        {
            "location": "/server/modules/data/#coredata",
            "text": "To perform any of the object methods, you need a reference to the  data  module.  core . data ( source_name [,   db_name ])   Parameters     Name  Description  Type  Required      source_name  The source name to use for the objects.  String  Y    db_name  Set a specific database. Default: \"_app\"  String  N     Returns  A source object, or  nil  and an error.  Example  local   users   =   core . data ( \"users\" )",
            "title": "core.data"
        },
        {
            "location": "/server/modules/data/#get",
            "text": "Get a data object from the Mongo database.  < source > : get ( idOrQuery )   Parameters     Name  Description  Type  Required      idOrQuery  A string id or query table.  String  or  Table  Y     Example  local   obj ,   err   =   users : get ( \"id1234\" )    Tip  To retrieve multiple data objects, see the  getPage  method.",
            "title": "get"
        },
        {
            "location": "/server/modules/data/#save",
            "text": "Create a new, or update an existing, data object and save it in the Mongo database.  < source > : save ( obj )   Parameters     Name  Description  Type  Required      obj  A data object to save.  Table  Y     Example  local   id ,   err   =   users : save ( obj )",
            "title": "save"
        },
        {
            "location": "/server/modules/data/#delete",
            "text": "Delete a data object from the Mongo database.  < source > : delete ( idOrObj )   Parameters     Name  Description  Type  Required      idOrObj  An object id string or data object with  _id  field.  String  or  Table  Y     Example  local   success ,   err   =   users : delete ( obj )",
            "title": "delete"
        },
        {
            "location": "/server/modules/data/#pagination",
            "text": "",
            "title": "Pagination"
        },
        {
            "location": "/server/modules/data/#getpage",
            "text": "Get multiple data objects from the Mongo database based on a specific criteria.  < source > : getPage ( page ,   perPage ,   sort ,   query )   Parameters     Name  Description  Default  Type  Required      page  The page number to return.  none  Number  Y    perPage  The number of objects per page.  20  Number  N    sort  Sort constant or sorting table.  core.ASC  Const  or  Table  N    query  Specialized query table.  { } (all records)  Table  N     Sort Constants     Enum  Description      core.ASC  Sort in an ascending order.    core.DESC  Sort in a descending order.     Example  local   objects   =   users : getPage ({},   1 ,   10 )",
            "title": "getPage"
        },
        {
            "location": "/server/modules/email/",
            "text": "Send email messages using the \nMailgun\n messaging service. Supports both \nUS\n and \nEU\n API endpoints.\n\n\n\n\nMailgun Account Required\n\n\nA valid \nMailgun\n account and the proper configuration must be set up to use the \nemail\n module. See the \nConfiguration\n section below. The \nMailgun\n messaging service allows you to send up to 10,000 free email messages a month.\n\n\n\n\n\n\nScreencast Available\n\n\nLearn about sending email in a screencast format by \nClicking here\n.\n\n\n\n\nnew\n\n\nCreate a new email message object.\n\n\ncore\n.\nemail\n.\nnew\n()\n\n\n\n\n\n\nParameters\n\n\nThis method does not require any parameters.\n\n\n\n\nIf you need to make a call to a different \nMailgun\n domain other than your default see \nOverriding Defaults\n.\n\n\n\n\nReturns\n\n\nA new email message object based on the default \nMailgun\n credentials.\n\n\nExample\n\n\nlocal\n \nmsg\n \n=\n \ncore\n.\nemail\n.\nnew\n()\n\n\n\n\n\n\nMessage Object\n\n\nto\n\n\nThe address(es) to send the message to. Multiple values must be seperated by a comma. \nThis is a required value\n.\n\n\nmsg\n:\nto\n(\n \naddress\n[,\n \naddressN\n]\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naddress\n\n\nThe recipient address(es).\n\n\nString\n\n\n\n\n\n\n\n\nExamples\n\n\nSingle address:\n\n\n--Address only\n\n\nmsg\n:\nto\n(\n\"user@email.com\"\n)\n\n\n\n--With name\n\n\nmsg\n:\nto\n(\n\"Chris <user@email.com>\"\n)\n\n\n\n\n\n\nMultiple addresses:\n\n\nmsg\n:\nto\n(\n\"user1@email.com\"\n,\n \n\"Jim <user2@email.com>\"\n)\n\n\n\n\n\n\nfrom\n\n\nThe message sender address. \nThis is a required value\n.\n\n\nmsg\n:\nfrom\n(\n \naddress\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naddress\n\n\nThe sender address.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nmsg\n:\nfrom\n(\n\"sender@email.com\"\n)\n\n\n\n\n\n\ncc\n\n\nThe address(es) to \"cc\" the message to. Multiple values must be seperated by a comma.\n\n\nmsg\n:\ncc\n(\n \naddress\n[,\n \naddressN\n]\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naddress\n\n\nThe \"cc\" address(es).\n\n\nString\n\n\n\n\n\n\n\n\nExamples\n\n\nSingle address:\n\n\n--Address only\n\n\nmsg\n:\ncc\n(\n\"user@email.com\"\n)\n\n\n\n--With name\n\n\nmsg\n:\ncc\n(\n\"Chris <user@email.com>\"\n)\n\n\n\n\n\n\nMultiple addresses:\n\n\nmsg\n:\ncc\n(\n\"user1@email.com\"\n,\n \n\"Jim <user2@email.com>\"\n)\n\n\n\n\n\n\nbcc\n\n\nThe address(es) to \"bcc\" the message to. Multiple values must be seperated by a comma.\n\n\nmsg\n:\nbcc\n(\n \naddress\n[,\n \naddressN\n]\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naddress\n\n\nThe \"bcc\" address(es).\n\n\nString\n\n\n\n\n\n\n\n\nExamples\n\n\nSingle address:\n\n\n--Address only\n\n\nmsg\n:\nbcc\n(\n\"user@email.com\"\n)\n\n\n\n--With name\n\n\nmsg\n:\nbcc\n(\n\"Chris <user@email.com>\"\n)\n\n\n\n\n\n\nMultiple addresses:\n\n\nmsg\n:\nbcc\n(\n\"user1@email.com\"\n,\n \n\"Jim <user2@email.com>\"\n)\n\n\n\n\n\n\nreplyTo\n\n\nSets a specific reply-to address. If not set, the sender address is the default.\n\n\nmsg\n:\nreplyTo\n(\n \naddress\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naddress\n\n\nA specific reply-to address.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nmsg\n:\nreplyTo\n(\n\"Support <support@email.com>\"\n)\n\n\n\n\n\n\nsubject\n\n\nThe subject line for the email. The default is \"(no subject)\" if not provided.\n\n\nmsg\n:\nsubject\n(\n \nsubject_str\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nsubject_str\n\n\nThe subject title.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nmsg\n:\nsubject\n(\n\"A Super Email\"\n)\n\n\n\n\n\n\ntext\n\n\nThe plain text version of the message body.\n\n\nmsg\n:\ntext\n(\n \nmessage_str\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmessage_str\n\n\nA plain string message.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nmsg\n:\ntext\n(\n\"Here is your plain information.\"\n)\n\n\n\n\n\n\nhtml\n\n\nThe html version of the message body.\n\n\nmsg\n:\nhtml\n(\n \nmessage_html\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmessage_html\n\n\nAn html string message.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nmsg\n:\nhtml\n(\n\"Here is your <b>bold</b> information.\"\n)\n\n\n\n\n\n\ntag\n\n\nSets a specific tag for the email. Can be used for tracking in Mailgun.\n\n\nmsg\n:\ntag\n(\n \ntag_str\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\ntag_str\n\n\nA string tag for tracking.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nmsg\n:\ntag\n(\n\"appuser\"\n)\n\n\n\n\n\n\nrequireTls\n\n\nForce Mailgun to use TLS when sending the message. Defaults to \nfalse\n.\n\n\nmsg\n:\nrequireTls\n(\n \nbool\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nbool\n\n\nWhether to enable TLS for this message.\n\n\nBoolean\n\n\n\n\n\n\n\n\nExample\n\n\nmsg\n:\nrequireTls\n(\ntrue\n)\n\n\n\n\n\n\nskipVerification\n\n\nSkip certificate verification when using TLS. Defaults to \nfalse\n.\n\n\nmsg\n:\nskipVerification\n(\n \nbool\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nbool\n\n\nWhether to skip verification in TLS.\n\n\nBoolean\n\n\n\n\n\n\n\n\nExample\n\n\nmsg\n:\nskipVerification\n(\ntrue\n)\n\n\n\n\n\n\ntestMode\n\n\nUsed for debugging in Mailgun. Defaults to \nfalse\n.\n\n\nmsg\n:\ntestMode\n(\n \nbool\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nbool\n\n\nWhether to enable test mode.\n\n\nBoolean\n\n\n\n\n\n\n\n\nExample\n\n\nmsg\n:\ntestMode\n(\ntrue\n)\n\n\n\n\n\n\nsend\n\n\nSend the final message via Mailgun.\n\n\nmsg\n:\nsend\n()\n\n\n\n\n\n\nParameters\n\n\nThis method takes no parameters.\n\n\nExample\n\n\nlocal\n \nresp\n,\n \nerr\n \n=\n \nmsg\n:\nsend\n()\n\n\n\n\n\n\nConfiguration\n\n\nTo use the \nEmail\n module you will need a valid \nMailgun\n account.\n\n\nOnce you have your account set-up you will need to provide your \nSending Domain\n, \nSecret API Key\n, and \nAPI Region\n from \nMailgun\n to your Coronium Core system.\n\n\nUsing the \nWebmin\n, navigate to the \nConfig\n section and enter the requested information in the \nMailgun Settings\n area. Click the \nupdate\n button to enable your credentials.\n\n\nYou can now use the \nEmail\n module for sending email.\n\n\nOverriding Defaults\n\n\nYou can also pass your \nMailgun\n options directly in the \nnew\n method. This can be useful when you need to send from another \nMailgun\n domain besides your default.\n\n\ncore\n.\nemail\n.\nnew\n(\nkey\n,\n \ndomain\n[,\n \nregion\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nA Mailgun API key.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndomain\n\n\nA verified Mailgun domain.\n\n\nString\n\n\nY\n\n\n\n\n\n\nregion\n\n\nA Mailgun API region. \nUS\n (default) or \nEU\n.\n\n\nString\n\n\nIf EU\n\n\n\n\n\n\n\n\nReturns\n\n\nA new email message object based on the \nMailgun\n credentials.\n\n\nExample\n\n\nlocal\n \nmsg\n \n=\n \ncore\n.\nemail\n.\nnew\n(\n<\nmailgun\n-\nkey\n>\n,\n \n<\nmailgun\n-\nhost\n>\n,\n \n<\n\"US\"\n|\n\"EU\"\n>\n)",
            "title": "Email"
        },
        {
            "location": "/server/modules/email/#new",
            "text": "Create a new email message object.  core . email . new ()   Parameters  This method does not require any parameters.   If you need to make a call to a different  Mailgun  domain other than your default see  Overriding Defaults .   Returns  A new email message object based on the default  Mailgun  credentials.  Example  local   msg   =   core . email . new ()",
            "title": "new"
        },
        {
            "location": "/server/modules/email/#message-object",
            "text": "",
            "title": "Message Object"
        },
        {
            "location": "/server/modules/email/#to",
            "text": "The address(es) to send the message to. Multiple values must be seperated by a comma.  This is a required value .  msg : to (   address [,   addressN ]   )   Parameters     Name  Description  Type      address  The recipient address(es).  String     Examples  Single address:  --Address only  msg : to ( \"user@email.com\" )  --With name  msg : to ( \"Chris <user@email.com>\" )   Multiple addresses:  msg : to ( \"user1@email.com\" ,   \"Jim <user2@email.com>\" )",
            "title": "to"
        },
        {
            "location": "/server/modules/email/#from",
            "text": "The message sender address.  This is a required value .  msg : from (   address   )   Parameters     Name  Description  Type      address  The sender address.  String     Example  msg : from ( \"sender@email.com\" )",
            "title": "from"
        },
        {
            "location": "/server/modules/email/#cc",
            "text": "The address(es) to \"cc\" the message to. Multiple values must be seperated by a comma.  msg : cc (   address [,   addressN ]   )   Parameters     Name  Description  Type      address  The \"cc\" address(es).  String     Examples  Single address:  --Address only  msg : cc ( \"user@email.com\" )  --With name  msg : cc ( \"Chris <user@email.com>\" )   Multiple addresses:  msg : cc ( \"user1@email.com\" ,   \"Jim <user2@email.com>\" )",
            "title": "cc"
        },
        {
            "location": "/server/modules/email/#bcc",
            "text": "The address(es) to \"bcc\" the message to. Multiple values must be seperated by a comma.  msg : bcc (   address [,   addressN ]   )   Parameters     Name  Description  Type      address  The \"bcc\" address(es).  String     Examples  Single address:  --Address only  msg : bcc ( \"user@email.com\" )  --With name  msg : bcc ( \"Chris <user@email.com>\" )   Multiple addresses:  msg : bcc ( \"user1@email.com\" ,   \"Jim <user2@email.com>\" )",
            "title": "bcc"
        },
        {
            "location": "/server/modules/email/#replyto",
            "text": "Sets a specific reply-to address. If not set, the sender address is the default.  msg : replyTo (   address   )   Parameters     Name  Description  Type      address  A specific reply-to address.  String     Example  msg : replyTo ( \"Support <support@email.com>\" )",
            "title": "replyTo"
        },
        {
            "location": "/server/modules/email/#subject",
            "text": "The subject line for the email. The default is \"(no subject)\" if not provided.  msg : subject (   subject_str   )   Parameters     Name  Description  Type      subject_str  The subject title.  String     Example  msg : subject ( \"A Super Email\" )",
            "title": "subject"
        },
        {
            "location": "/server/modules/email/#text",
            "text": "The plain text version of the message body.  msg : text (   message_str   )   Parameters     Name  Description  Type      message_str  A plain string message.  String     Example  msg : text ( \"Here is your plain information.\" )",
            "title": "text"
        },
        {
            "location": "/server/modules/email/#html",
            "text": "The html version of the message body.  msg : html (   message_html   )   Parameters     Name  Description  Type      message_html  An html string message.  String     Example  msg : html ( \"Here is your <b>bold</b> information.\" )",
            "title": "html"
        },
        {
            "location": "/server/modules/email/#tag",
            "text": "Sets a specific tag for the email. Can be used for tracking in Mailgun.  msg : tag (   tag_str   )   Parameters     Name  Description  Type      tag_str  A string tag for tracking.  String     Example  msg : tag ( \"appuser\" )",
            "title": "tag"
        },
        {
            "location": "/server/modules/email/#requiretls",
            "text": "Force Mailgun to use TLS when sending the message. Defaults to  false .  msg : requireTls (   bool   )   Parameters     Name  Description  Type      bool  Whether to enable TLS for this message.  Boolean     Example  msg : requireTls ( true )",
            "title": "requireTls"
        },
        {
            "location": "/server/modules/email/#skipverification",
            "text": "Skip certificate verification when using TLS. Defaults to  false .  msg : skipVerification (   bool   )   Parameters     Name  Description  Type      bool  Whether to skip verification in TLS.  Boolean     Example  msg : skipVerification ( true )",
            "title": "skipVerification"
        },
        {
            "location": "/server/modules/email/#testmode",
            "text": "Used for debugging in Mailgun. Defaults to  false .  msg : testMode (   bool   )   Parameters     Name  Description  Type      bool  Whether to enable test mode.  Boolean     Example  msg : testMode ( true )",
            "title": "testMode"
        },
        {
            "location": "/server/modules/email/#send",
            "text": "Send the final message via Mailgun.  msg : send ()   Parameters  This method takes no parameters.  Example  local   resp ,   err   =   msg : send ()",
            "title": "send"
        },
        {
            "location": "/server/modules/email/#configuration",
            "text": "To use the  Email  module you will need a valid  Mailgun  account.  Once you have your account set-up you will need to provide your  Sending Domain ,  Secret API Key , and  API Region  from  Mailgun  to your Coronium Core system.  Using the  Webmin , navigate to the  Config  section and enter the requested information in the  Mailgun Settings  area. Click the  update  button to enable your credentials.  You can now use the  Email  module for sending email.",
            "title": "Configuration"
        },
        {
            "location": "/server/modules/email/#overriding-defaults",
            "text": "You can also pass your  Mailgun  options directly in the  new  method. This can be useful when you need to send from another  Mailgun  domain besides your default.  core . email . new ( key ,   domain [,   region ])   Parameters     Name  Description  Type  Required      key  A Mailgun API key.  String  Y    domain  A verified Mailgun domain.  String  Y    region  A Mailgun API region.  US  (default) or  EU .  String  If EU     Returns  A new email message object based on the  Mailgun  credentials.  Example  local   msg   =   core . email . new ( < mailgun - key > ,   < mailgun - host > ,   < \"US\" | \"EU\" > )",
            "title": "Overriding Defaults"
        },
        {
            "location": "/server/modules/files/",
            "text": "Provides methods to manage server side files.\n\n\n\n\nUpload / Download\n\n\nFile transfers are performed using the client-side \nFiles\n module.\n\n\n\n\n\n\nUsing S3\n\n\nIf you'd like to transfer files using \nAmazon S3\n take a look at the \nS3 Lite\n plugin for Corona.\n\n\n\n\nlist\n\n\nList the files in the specified directory path. Returns a \ntable\n array, or \nnil\n and an error.\n\n\ncore\n.\nfiles\n.\nlist\n(\ndirpath\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndirpath\n\n\nThe directory to list.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nlocal\n \nlist\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\nlist\n(\n\"imgs\"\n)\n\n\n\n\n\n\n\n\nThis method will only list the \nfiles\n in the directory, not any directories. If no files are present, it will return an empty table.\n\n\n\n\nmove\n\n\nMove a file in the server files directory.\n\n\ncore\n.\nfiles\n.\nmove\n(\nsrcpath\n,\n \ndestpath\n,\n \noverwrite\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcpath\n\n\nThe source filepath with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndestpath\n\n\nThe destination filepath with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\noverwrite\n\n\nIf \ntrue\n overwrite existing files (default \nfalse\n).\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nok\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\nmove\n(\n\"imgs/image01.png\"\n,\n \n\"assets/image01.png\"\n)\n\n\n\n\n\n\ncopy\n\n\nCopy a file in the server files directory.\n\n\ncore\n.\nfiles\n.\ncopy\n(\nsrcpath\n,\n \ndestpath\n,\n \noverwrite\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcpath\n\n\nThe source filepath with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndestpath\n\n\nThe destination filepath with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\noverwrite\n\n\nIf \ntrue\n overwrite existing files (default \nfalse\n).\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nok\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\ncopy\n(\n\"imgs/image01.png\"\n,\n \n\"assets/image01.png\"\n)\n\n\n\n\n\n\nremove\n\n\nRemove a file from the server files directory. Returns \ntrue\n on success, or \nnil\n and an error.\n\n\ncore\n.\nfiles\n.\nremove\n(\nfilepath\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfilepath\n\n\nThe source filepath.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nok\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\nremove\n(\n\"imgs/image002.png\"\n)\n\n\n\n\n\n\nrename\n\n\nRename a file in the server files directory. Returns \ntrue\n on success, or \nnil\n and an error.\n\n\ncore\n.\nfiles\n.\nrename\n(\nfilepath\n,\n \nnew_name\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfilepath\n\n\nThe source filepath.\n\n\nString\n\n\nY\n\n\n\n\n\n\nnew_name\n\n\nThe name to rename the file to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nok\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\nrename\n(\n\"imgs/image001.png\"\n,\n \n\"image002.png\"\n)\n\n\n\n\n\n\n\n\nNote\n\n\nThis rename method will not move a file. Any path supplied to the \nnew_name\n parameter will be ignored.",
            "title": "Files"
        },
        {
            "location": "/server/modules/files/#list",
            "text": "List the files in the specified directory path. Returns a  table  array, or  nil  and an error.  core . files . list ( dirpath )   Parameters     Name  Description  Type  Required      dirpath  The directory to list.  String  Y     local   list ,   err   =   core . files . list ( \"imgs\" )    This method will only list the  files  in the directory, not any directories. If no files are present, it will return an empty table.",
            "title": "list"
        },
        {
            "location": "/server/modules/files/#move",
            "text": "Move a file in the server files directory.  core . files . move ( srcpath ,   destpath ,   overwrite )   Parameters     Name  Description  Type  Required      srcpath  The source filepath with extension.  String  Y    destpath  The destination filepath with extension.  String  Y    overwrite  If  true  overwrite existing files (default  false ).  Boolean  N     Example  local   ok ,   err   =   core . files . move ( \"imgs/image01.png\" ,   \"assets/image01.png\" )",
            "title": "move"
        },
        {
            "location": "/server/modules/files/#copy",
            "text": "Copy a file in the server files directory.  core . files . copy ( srcpath ,   destpath ,   overwrite )   Parameters     Name  Description  Type  Required      srcpath  The source filepath with extension.  String  Y    destpath  The destination filepath with extension.  String  Y    overwrite  If  true  overwrite existing files (default  false ).  Boolean  N     Example  local   ok ,   err   =   core . files . copy ( \"imgs/image01.png\" ,   \"assets/image01.png\" )",
            "title": "copy"
        },
        {
            "location": "/server/modules/files/#remove",
            "text": "Remove a file from the server files directory. Returns  true  on success, or  nil  and an error.  core . files . remove ( filepath )   Parameters     Name  Description  Type  Required      filepath  The source filepath.  String  Y     Example  local   ok ,   err   =   core . files . remove ( \"imgs/image002.png\" )",
            "title": "remove"
        },
        {
            "location": "/server/modules/files/#rename",
            "text": "Rename a file in the server files directory. Returns  true  on success, or  nil  and an error.  core . files . rename ( filepath ,   new_name )   Parameters     Name  Description  Type  Required      filepath  The source filepath.  String  Y    new_name  The name to rename the file to.  String  Y     Example  local   ok ,   err   =   core . files . rename ( \"imgs/image001.png\" ,   \"image002.png\" )    Note  This rename method will not move a file. Any path supplied to the  new_name  parameter will be ignored.",
            "title": "rename"
        },
        {
            "location": "/server/modules/jobs/api/",
            "text": "A cron-like service allowing you to run code periodically for a variety of use cases. \n\n\nJobs are created using the Coronium \nWebmin\n. See the \nJobs Guide\n section for details.\n\n\nJob Objects\n\n\ncore.job\n\n\nGet a new reference to a Job object.\n\n\nlocal\n \njob\n \n=\n \ncore\n.\njob\n()\n\n\n\n\n\n\nReturns\n\n\nA new Job object to add your job code to.\n\n\nExample\n\n\nSee the \nJobs Guide\n section for examples.\n\n\njob.run\n\n\nThe function that is used to run your job code.\n\n\nfunction\n \njob\n.\nrun\n()\n\n  \n...\n\n\nend\n\n\n\n\n\n\nExample\n\n\nSee the \nJobs Guide\n section for examples.\n\n\nReturn\n\n\nWhen your work is done in your Job file, you \nmust\n return a response to the \nJob Service\n. It can be one of the following:\n\n\njob.OK\n\n\nLets the \nJob Service\n know that this job has completed successfully, and should continue to run on the next service interval.\n\n\nExample\n\n\nreturn\n \njob\n.\nOK\n\n\n\n\n\n\njob.SLEEP\n\n\nLets the \nJob Service\n know that this job has completed successfully, and should not run again for another 24 hours from its last run. This return is helpful for Jobs that use \nHelpers\n\n\nExample\n\n\nreturn\n \njob\n.\nSLEEP\n\n\n\n\n\n\njob.STOP\n\n\nLets the \nJob Service\n know that the Job should no longer run until the Job Service is restarted or reloaded. Can be useful for error, or other stop conditions. This does \nnot\n mark the Job \ndeactivated\n (see \njob.EXIT\n).\n\n\nExample\n\n\nreturn\n \njob\n.\nSTOP\n\n\n\n\n\n\njob.EXIT\n\n\nLets the \nJob Service\n know that this job should be marked as \ndeactivated\n, and no longer run on service intervals. You must reactivate this Job through the Webmin to have it be included in the Job Service on future restarts or reloads.\n\n\nExample\n\n\nreturn\n \njob\n.\nEXIT\n\n\n\n\n\n\nErrors\n\n\nIf a Job causes a critical error or the job file cannot be found, it will be removed from the current service intervals, and the Job will be marked as \ndeactivated\n. The last error message recieved, if any, will be stored. You can view he last error by viewing the Job details in the \nJobs\n section of the Webmin.\n\n\nHelpers\n\n\nYou can use the following helpers to conditionally run your job code under specific circumstances.\n\n\njob.minute\n\n\nThe minute based on UTC time, pass \ntrue\n for local time. Should be used with the \njob.OK\n return type.\n\n\njob\n.\nminute\n(\nlocalTime\n)\n\n\n\n\n\n\nReturns\n\n\nA minute \nnumber\n between 00-59.\n\n\njob.hour\n\n\nThe numerical hour in 24 hour format in UTC, pass \ntrue\n for local time. Should be used with the \njob.OK\n return type.\n\n\njob\n.\nhour\n(\nlocalTime\n)\n\n\n\n\n\n\nReturns\n\n\nA hour \nnumber\n between 00-23.\n\n\njob.day\n\n\nThe abbreviated day name based on UTC, pass \ntrue\n for local time.\n\n\njob\n.\nday\n(\nlocalTime\n)\n\n\n\n\n\n\nReturns\n\n\nOne of \nMon\n, \nTue\n, \nWed\n, \nThur\n, \nFri\n, \nSat\n, or \nSun\n as a \nstring\n.\n\n\njob.dayNum\n\n\nThe numerical day of the week in UTC, pass \ntrue\n for local time.\n\n\njob\n.\ndayNum\n(\nlocalTime\n)\n\n\n\n\n\n\nReturns\n\n\nThe current day number from 1-7 as a \nnumber\n. Monday is 1.\n\n\njob.dayMonth\n\n\nThe numerical day of the month in UTC, pass \ntrue\n for local time.\n\n\njob\n.\ndayMonth\n(\nlocalTime\n)\n\n\n\n\n\n\nReturns\n\n\nA \nnumber\n value from 1-31.\n\n\njob.weekNum\n\n\nThe numerical week of the year in UTC, pass \ntrue\n for local time.\n\n\njob\n.\nweekNum\n(\nlocalTime\n)\n\n\n\n\n\n\nReturns\n\n\nA \nnumber\n value from 00-53, with the first Monday as the first day of week one.\n\n\njob.month\n\n\nThe abbreviated month name based on UTC, pass \ntrue\n for local time.\n\n\njob\n.\nmonth\n(\nlocalTime\n)\n\n\n\n\n\n\nReturns\n\n\nOne of \nJan\n, \nFeb\n, \nMar\n, \nApr\n, \nMay\n, \nJun\n, \nJul\n, \nAug\n, \nSep\n, \nNov\n, \nDec\n as a \nstring\n.\n\n\njob.monthNum\n\n\nThe numerical month number in UTC, pass \ntrue\n for local time.\n\n\njob\n.\nmonthNum\n(\nlocalTime\n)\n\n\n\n\n\n\nReturns\n\n\nThe month between 1-12 as a \nnumber\n.",
            "title": "Jobs API"
        },
        {
            "location": "/server/modules/jobs/api/#job-objects",
            "text": "",
            "title": "Job Objects"
        },
        {
            "location": "/server/modules/jobs/api/#corejob",
            "text": "Get a new reference to a Job object.  local   job   =   core . job ()   Returns  A new Job object to add your job code to.  Example  See the  Jobs Guide  section for examples.",
            "title": "core.job"
        },
        {
            "location": "/server/modules/jobs/api/#jobrun",
            "text": "The function that is used to run your job code.  function   job . run () \n   ...  end   Example  See the  Jobs Guide  section for examples.",
            "title": "job.run"
        },
        {
            "location": "/server/modules/jobs/api/#return",
            "text": "When your work is done in your Job file, you  must  return a response to the  Job Service . It can be one of the following:",
            "title": "Return"
        },
        {
            "location": "/server/modules/jobs/api/#jobok",
            "text": "Lets the  Job Service  know that this job has completed successfully, and should continue to run on the next service interval.  Example  return   job . OK",
            "title": "job.OK"
        },
        {
            "location": "/server/modules/jobs/api/#jobsleep",
            "text": "Lets the  Job Service  know that this job has completed successfully, and should not run again for another 24 hours from its last run. This return is helpful for Jobs that use  Helpers  Example  return   job . SLEEP",
            "title": "job.SLEEP"
        },
        {
            "location": "/server/modules/jobs/api/#jobstop",
            "text": "Lets the  Job Service  know that the Job should no longer run until the Job Service is restarted or reloaded. Can be useful for error, or other stop conditions. This does  not  mark the Job  deactivated  (see  job.EXIT ).  Example  return   job . STOP",
            "title": "job.STOP"
        },
        {
            "location": "/server/modules/jobs/api/#jobexit",
            "text": "Lets the  Job Service  know that this job should be marked as  deactivated , and no longer run on service intervals. You must reactivate this Job through the Webmin to have it be included in the Job Service on future restarts or reloads.  Example  return   job . EXIT",
            "title": "job.EXIT"
        },
        {
            "location": "/server/modules/jobs/api/#errors",
            "text": "If a Job causes a critical error or the job file cannot be found, it will be removed from the current service intervals, and the Job will be marked as  deactivated . The last error message recieved, if any, will be stored. You can view he last error by viewing the Job details in the  Jobs  section of the Webmin.",
            "title": "Errors"
        },
        {
            "location": "/server/modules/jobs/api/#helpers",
            "text": "You can use the following helpers to conditionally run your job code under specific circumstances.",
            "title": "Helpers"
        },
        {
            "location": "/server/modules/jobs/api/#jobminute",
            "text": "The minute based on UTC time, pass  true  for local time. Should be used with the  job.OK  return type.  job . minute ( localTime )   Returns  A minute  number  between 00-59.",
            "title": "job.minute"
        },
        {
            "location": "/server/modules/jobs/api/#jobhour",
            "text": "The numerical hour in 24 hour format in UTC, pass  true  for local time. Should be used with the  job.OK  return type.  job . hour ( localTime )   Returns  A hour  number  between 00-23.",
            "title": "job.hour"
        },
        {
            "location": "/server/modules/jobs/api/#jobday",
            "text": "The abbreviated day name based on UTC, pass  true  for local time.  job . day ( localTime )   Returns  One of  Mon ,  Tue ,  Wed ,  Thur ,  Fri ,  Sat , or  Sun  as a  string .",
            "title": "job.day"
        },
        {
            "location": "/server/modules/jobs/api/#jobdaynum",
            "text": "The numerical day of the week in UTC, pass  true  for local time.  job . dayNum ( localTime )   Returns  The current day number from 1-7 as a  number . Monday is 1.",
            "title": "job.dayNum"
        },
        {
            "location": "/server/modules/jobs/api/#jobdaymonth",
            "text": "The numerical day of the month in UTC, pass  true  for local time.  job . dayMonth ( localTime )   Returns  A  number  value from 1-31.",
            "title": "job.dayMonth"
        },
        {
            "location": "/server/modules/jobs/api/#jobweeknum",
            "text": "The numerical week of the year in UTC, pass  true  for local time.  job . weekNum ( localTime )   Returns  A  number  value from 00-53, with the first Monday as the first day of week one.",
            "title": "job.weekNum"
        },
        {
            "location": "/server/modules/jobs/api/#jobmonth",
            "text": "The abbreviated month name based on UTC, pass  true  for local time.  job . month ( localTime )   Returns  One of  Jan ,  Feb ,  Mar ,  Apr ,  May ,  Jun ,  Jul ,  Aug ,  Sep ,  Nov ,  Dec  as a  string .",
            "title": "job.month"
        },
        {
            "location": "/server/modules/jobs/api/#jobmonthnum",
            "text": "The numerical month number in UTC, pass  true  for local time.  job . monthNum ( localTime )   Returns  The month between 1-12 as a  number .",
            "title": "job.monthNum"
        },
        {
            "location": "/server/modules/jobs/guide/",
            "text": "The server-side \nJobs API\n and service allows you to run code periodically in the background for a variety of use cases. A number of different Job types can be scheduled.\n\n\nBy their nature, Jobs are imperfect due to the fact that the can only run when there are free cycles during the execution tasks the server is currently handling, like client requests.\n\n\nFor the most part Jobs run as close to their intervals as possible, with a variance of about 10 seconds in the worst case scenarios.\n\n\nManagement\n\n\nAll Job management is done using the Coronium Core \nWebmin\n in the \nJobs Service\n section.\n\n\nViewing Jobs\n\n\nTo view all current Jobs, navigate to the \nJobs Service\n section. You will be presented with a list of Jobs, including information such as the current status, last run time, and other information.\n\n\nCreating Jobs\n\n\nTo create a new Job, navigate to the \nJobs Service\n section and click the \nNew Job\n button. Enter the requested information in the Job creation form. There is ample help and validation feedback directly on the form.\n\n\nWhen you are done inputing your Job information, click the \nCreate\n button. You will then be redirected to the Job code editor to create your Job code. See \nWriting Jobs\n.\n\n\nRun Once\n\n\nWhen creating a Job, you have the option of setting it to \nRun Once\n. This marks the Job so that it will only run one time on the booting of the Coronium Core server (after its initial interval). These can be useful for Jobs that only need to run once during the lifetime of the Coronium Core service. They will not run again on a service \nreload\n.\n\n\nEditing Jobs\n\n\nTo edit an existing Job, navigate to the \nJobs Service\n section. On the Job listing, click any Job name to edit the Job using the form presented.\n\n\nWhen you are done editing your Job, click the \nUpdate\n button. See also \nReloading Jobs\n.\n\n\nTo edit your Job code see \nEditing Job Code\n.\n\n\nRemoving Jobs\n\n\nTo remove a Job from the service, enter the Job editing mode (see \nEditing Jobs\n above). Click the \nDelete\n button, and then confirm the Job removal. \n\n\n This is a destructive action, and cannot be undone.\n\n\n\nReloading Jobs\n\n\nAfter adding or editing Job details, you will need to reload the Job service. In the \nJobs Service\n section, click the \nReload\n button to start the reload process.\n\n\nYou may need to wait for up to 60 seconds for the Job service to reload. While you're waiting, the service status will change to \"Reloading\". Once the reload process is complete, the status will return to \"Running\".\n\n\nJobs that have aleady been running will not have their interval reset. For example, let's assume a Job is set to run every 120 seconds, and a reload is issued at 60 seconds in. On reload, that Job will retain its remaining run time, in this case 60 seconds.\n\n\nJob Status\n\n\nIn the \nJobs Service\n section, you will see various status icons in the Job listing depending on how the Job was returned (see \nJob Returns\n below).\n\n\nThe following table describes the various status icons, and the return that initiates them. In the Jobs listing, you can hover your mouse over any icon to see more information.\n\n\n\n\n\n\n\n\nStatus Icon\n\n\nStatus Description\n\n\nReturn Type\n\n\n\n\n\n\n\n\n\n\n\n\nIs active and recurring or active and waiting to run.\n\n\njob.OK\n\n\n\n\n\n\n\n\nIs active and will run again 24 hours after its last run.\n\n\njob.SLEEP\n\n\n\n\n\n\n\n\nIs active but will \nnot\n run again until a reload event is issued.\n\n\njob.STOP\n\n\n\n\n\n\n\n\nIs \nnot\n active, and will \nnot\n run until reactivated manually.\n\n\njob.EXIT\n\n\n\n\n\n\n\n\nThis Job has been marked as \nRun Once\n but has \nnot\n run yet.\n\n\nSee \nRun Once\n\n\n\n\n\n\n\n\nThis Job has \nRun Once\n and will not run until a service reboot.\n\n\nSee \nRun Once\n\n\n\n\n\n\n\n\nJob Errors\n\n\nIf any critical errors occur, or the Job file cannot be found when a Job is run, it will automatically be set to a deactivated state and will not run again until manually reactivated and a \nreload\n is issued.\n\n\nWriting Jobs\n\n\nOnce you've created a Job (see \nCreating Jobs\n) you will be taken to the Job code editor to add your Job code.\n\n\nAll core modules are available for use in Job files.\n It is not possible to return responses to clients from Jobs (see \nLifecycle/Context\n).\n\n\nCreating Job Code\n\n\nOnce you have created your Job, you will be taken to the code editor and presented with a Job template.\n\n\nJob Template\n\n\nlocal\n \njob\n \n=\n \ncore\n.\njob\n()\n\n\n\nfunction\n \njob\n.\nrun\n()\n\n  \n--== Place your job code here\n\n\n  \nreturn\n \njob\n.\nOK\n\n\nend\n\n\n\nreturn\n \njob\n\n\n\n\n\n\nAll of your Job code must be placed in the \njob.run()\n method to be run. When your Job work code is finished you must then \nreturn\n a valid Job status type (see below). \n\n\n Failure to return a valid Job status will deactivate the Job when run.\n\n\n\nJob Returns\n\n\nJob returns determine how your Job will operate on its next run. The most common return is \njob.OK\n which keeps a job running in a recurring fashion.\n\n\nTo understand what each return type does, see the \nReturn\n section of the \nJobs API\n.\n\n\nJob Helpers\n\n\nHelpers are a group of methods that return the current minute, hour, day, etc. to help fine tune when your Job runs. To learn more about each helper see the \nHelpers\n section of the \nJobs API\n.\n\n\nHelper Example\n\n\nlocal\n \njob\n \n=\n \ncore\n.\njob\n()\n\n\n\nfunction\n \njob\n.\nrun\n()\n\n\n  \nif\n \njob\n.\nday\n()\n \n==\n \n\"Fri\"\n \nthen\n\n    \ncore\n.\nlog\n(\n\"Do some Friday work\"\n)\n\n  \nend\n\n\n  \nreturn\n \njob\n.\nSLEEP\n\n\n\nend\n\n\n\nreturn\n \njob\n\n\n\n\n\n\nIn the example above we use the \njob.SLEEP\n return since we only need to check for a day on a daily basis.\n\n\nBecause Job intervals are imperfect, some helper types work better with certain return types. For instance, you may have unpredictable results when using the \njob.minute\n or \njob.hour\n helper with the \njob.SLEEP\n return.\n\n\nInstead create a recurring Job that runs at least every 30 seconds to check for \nminute\n resolutions, or a Job every 30 minutes to check an \nhour\n resolution. You would want to use the \njob.OK\n return in these situations.\n\n\nEditing Job Code\n\n\nTo edit existing Job code, navigate to the \nJobs Service\n section, and click any of the links in the \nFile Path\n column. This will take you to the Job code editor with the requested Job code loaded into the editor.\n\n\nOnce you've edited your code be sure to save it. While not required, you should issue a \nreload\n when finished.\n\n\nExample Code\n\n\nAfter creating your Job (see \nCreating Jobs\n) you can regulate them by the return status in your code.\n\n\nRecurring\n\n\nThis Job will keep running at its set interval by returning \njob.OK\n\n\nlocal\n \njob\n \n=\n \ncore\n.\njob\n()\n\n\n\nfunction\n \njob\n.\nrun\n()\n\n\n  \n--check stock\n\n  \nlocal\n \nbikes\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nmysql\n.\nselectOne\n(\n\"products\"\n,\n \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \ncolumns\n \n=\n \n{\n \n\"stock\"\n \n},\n\n    \nwhere\n \n=\n \n{\n \ntype\n \n=\n \n\"Red Bikes\"\n \n}\n\n  \n})\n\n\n  \n--update status\n\n  \nif\n \nbikes\n.\nstock\n \n==\n \n0\n \nthen\n\n    \nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nmysql\n.\nupdate\n(\n\"products\"\n,\n \n{\n\n      \ntbl\n \n=\n \n\"toys\"\n,\n\n      \nvalues\n \n=\n \n{\n \nout_of_stock\n \n=\n \ntrue\n \n},\n\n      \nwhere\n \n=\n \n{\n \nid\n \n=\n \nbikes\n.\nid\n \n}\n\n    \n})\n\n  \nend\n\n\n  \nreturn\n \njob\n.\nOK\n\n\nend\n\n\n\nreturn\n \njob\n\n\n\n\n\n\nSleep Job\n\n\nThis Job will stop special sales on Sundays. Checks the day every 24 hours using \njob.SLEEP\n.\n\n\nlocal\n \njob\n \n=\n \ncore\n.\njob\n()\n\n\n\nfunction\n \njob\n.\nrun\n()\n\n\n  \nif\n \njob\n.\nday\n()\n \n==\n \n\"Sun\"\n \nthen\n\n    \nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nmysql\n.\nupdate\n(\n\"shop\"\n,\n \n{\n\n      \ntbl\n \n=\n \n\"status\"\n,\n\n      \nvalues\n \n=\n \n{\n \nno_specials\n \n=\n \ntrue\n \n},\n\n      \nwhere\n \n=\n \n{\n \nno_specials\n \n=\n \nfalse\n \n}\n\n    \n})\n\n  \nend\n\n\n  \nreturn\n \njob\n.\nSLEEP\n\n\nend\n\n\n\nreturn\n \njob\n\n\n\n\n\n\nStop Job\n\n\nThis Job will send daily sales reports during January. And return \njob.STOP\n otherwise.\n\n\nlocal\n \njob\n \n=\n \ncore\n.\njob\n()\n\n\n\nfunction\n \njob\n.\nrun\n()\n\n\n  \nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nmysql\n.\nselectOne\n(\n\"shop\"\n,\n \n{\n\n    \ntbl\n \n=\n \n\"status\"\n,\n\n    \ncolumns\n \n=\n \n{\n \nsales_total\n \n},\n\n    \nwhere\n \n=\n \n{\n \nmonth\n \n=\n \n\"Jan\"\n \n}\n\n  \n})\n\n\n  \nif\n \njob\n.\nmonth\n()\n \n==\n \n\"Jan\"\n \nthen\n\n    \nlocal\n \nmsg\n \n=\n \ncore\n.\nemail\n.\nnew\n()\n\n    \nmsg\n:\nto\n(\n\"boss@work.com\"\n)\n\n    \nmsg\n:\nfrom\n(\n\"job@work.com\"\n)\n\n    \nmsg\n:\nsubject\n(\n\"January Daily\"\n)\n\n    \nmsg\n:\nbody\n(\n\"Sales today were: $\"\n..\nres\n.\nsales_total\n)\n\n    \nmsg\n:\nsend\n()\n\n\n    \nreturn\n \njob\n.\nSLEEP\n\n  \nelse\n\n    \nreturn\n \njob\n.\nSTOP\n\n  \nend\n\n\nend\n\n\n\nreturn\n \njob\n\n\n\n\n\n\nExit Job\n\n\nThis Job will deactivate returning \njob.EXIT\n if an error occurs with the query.\n\n\nlocal\n \njob\n \n=\n \ncore\n.\njob\n()\n\n\n\nfunction\n \njob\n.\nrun\n()\n\n\n  \nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nmysql\n.\nselectOne\n(\n\"products\"\n,\n \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nwhere\n \n=\n \n{\n \ntype\n \n=\n \n\"blender\"\n \n}\n\n  \n})\n\n\n  \nif\n \nnot\n \nres\n \nthen\n\n    \ncore\n.\nlog\n(\nerr\n)\n\n    \nreturn\n \njob\n.\nEXIT\n\n  \nelse\n\n    \nreturn\n \njob\n.\nOK\n\n  \nend\n\n\n\nend\n\n\n\nreturn\n \njob\n\n\n\n\n\n\nRun Once Job\n\n\nThis Job will run once. The proper return type is \njob.OK\n for \nRun Once\n jobs.\n\n\nlocal\n \njob\n \n=\n \ncore\n.\njob\n()\n\n\n\nfunction\n \njob\n.\nrun\n()\n\n\n  \nlocal\n \nconfig_tbl\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\ngetJson\n(\n\"https://some.json-config.com\"\n)\n\n\n  \nlocal\n \nconfig\n,\n \nerr\n \n=\n \ncore\n.\ndata\n(\n'config'\n)\n\n\n  \nlocal\n \nid\n,\n \nerr\n \n=\n \nconfig\n:\nsave\n(\nconfig_tbl\n)\n\n\n  \nreturn\n \njob\n.\nOK\n\n\nend\n\n\n\nreturn\n \njob",
            "title": "Jobs Guide"
        },
        {
            "location": "/server/modules/jobs/guide/#management",
            "text": "All Job management is done using the Coronium Core  Webmin  in the  Jobs Service  section.",
            "title": "Management"
        },
        {
            "location": "/server/modules/jobs/guide/#viewing-jobs",
            "text": "To view all current Jobs, navigate to the  Jobs Service  section. You will be presented with a list of Jobs, including information such as the current status, last run time, and other information.",
            "title": "Viewing Jobs"
        },
        {
            "location": "/server/modules/jobs/guide/#creating-jobs",
            "text": "To create a new Job, navigate to the  Jobs Service  section and click the  New Job  button. Enter the requested information in the Job creation form. There is ample help and validation feedback directly on the form.  When you are done inputing your Job information, click the  Create  button. You will then be redirected to the Job code editor to create your Job code. See  Writing Jobs .",
            "title": "Creating Jobs"
        },
        {
            "location": "/server/modules/jobs/guide/#run-once",
            "text": "When creating a Job, you have the option of setting it to  Run Once . This marks the Job so that it will only run one time on the booting of the Coronium Core server (after its initial interval). These can be useful for Jobs that only need to run once during the lifetime of the Coronium Core service. They will not run again on a service  reload .",
            "title": "Run Once"
        },
        {
            "location": "/server/modules/jobs/guide/#editing-jobs",
            "text": "To edit an existing Job, navigate to the  Jobs Service  section. On the Job listing, click any Job name to edit the Job using the form presented.  When you are done editing your Job, click the  Update  button. See also  Reloading Jobs .  To edit your Job code see  Editing Job Code .",
            "title": "Editing Jobs"
        },
        {
            "location": "/server/modules/jobs/guide/#removing-jobs",
            "text": "To remove a Job from the service, enter the Job editing mode (see  Editing Jobs  above). Click the  Delete  button, and then confirm the Job removal.    This is a destructive action, and cannot be undone.",
            "title": "Removing Jobs"
        },
        {
            "location": "/server/modules/jobs/guide/#reloading-jobs",
            "text": "After adding or editing Job details, you will need to reload the Job service. In the  Jobs Service  section, click the  Reload  button to start the reload process.  You may need to wait for up to 60 seconds for the Job service to reload. While you're waiting, the service status will change to \"Reloading\". Once the reload process is complete, the status will return to \"Running\".  Jobs that have aleady been running will not have their interval reset. For example, let's assume a Job is set to run every 120 seconds, and a reload is issued at 60 seconds in. On reload, that Job will retain its remaining run time, in this case 60 seconds.",
            "title": "Reloading Jobs"
        },
        {
            "location": "/server/modules/jobs/guide/#job-status",
            "text": "In the  Jobs Service  section, you will see various status icons in the Job listing depending on how the Job was returned (see  Job Returns  below).  The following table describes the various status icons, and the return that initiates them. In the Jobs listing, you can hover your mouse over any icon to see more information.     Status Icon  Status Description  Return Type       Is active and recurring or active and waiting to run.  job.OK     Is active and will run again 24 hours after its last run.  job.SLEEP     Is active but will  not  run again until a reload event is issued.  job.STOP     Is  not  active, and will  not  run until reactivated manually.  job.EXIT     This Job has been marked as  Run Once  but has  not  run yet.  See  Run Once     This Job has  Run Once  and will not run until a service reboot.  See  Run Once",
            "title": "Job Status"
        },
        {
            "location": "/server/modules/jobs/guide/#job-errors",
            "text": "If any critical errors occur, or the Job file cannot be found when a Job is run, it will automatically be set to a deactivated state and will not run again until manually reactivated and a  reload  is issued.",
            "title": "Job Errors"
        },
        {
            "location": "/server/modules/jobs/guide/#writing-jobs",
            "text": "Once you've created a Job (see  Creating Jobs ) you will be taken to the Job code editor to add your Job code.  All core modules are available for use in Job files.  It is not possible to return responses to clients from Jobs (see  Lifecycle/Context ).",
            "title": "Writing Jobs"
        },
        {
            "location": "/server/modules/jobs/guide/#creating-job-code",
            "text": "Once you have created your Job, you will be taken to the code editor and presented with a Job template.",
            "title": "Creating Job Code"
        },
        {
            "location": "/server/modules/jobs/guide/#job-template",
            "text": "local   job   =   core . job ()  function   job . run () \n   --== Place your job code here \n\n   return   job . OK  end  return   job   All of your Job code must be placed in the  job.run()  method to be run. When your Job work code is finished you must then  return  a valid Job status type (see below).    Failure to return a valid Job status will deactivate the Job when run.",
            "title": "Job Template"
        },
        {
            "location": "/server/modules/jobs/guide/#job-returns",
            "text": "Job returns determine how your Job will operate on its next run. The most common return is  job.OK  which keeps a job running in a recurring fashion.  To understand what each return type does, see the  Return  section of the  Jobs API .",
            "title": "Job Returns"
        },
        {
            "location": "/server/modules/jobs/guide/#job-helpers",
            "text": "Helpers are a group of methods that return the current minute, hour, day, etc. to help fine tune when your Job runs. To learn more about each helper see the  Helpers  section of the  Jobs API .  Helper Example  local   job   =   core . job ()  function   job . run () \n\n   if   job . day ()   ==   \"Fri\"   then \n     core . log ( \"Do some Friday work\" ) \n   end \n\n   return   job . SLEEP  end  return   job   In the example above we use the  job.SLEEP  return since we only need to check for a day on a daily basis.  Because Job intervals are imperfect, some helper types work better with certain return types. For instance, you may have unpredictable results when using the  job.minute  or  job.hour  helper with the  job.SLEEP  return.  Instead create a recurring Job that runs at least every 30 seconds to check for  minute  resolutions, or a Job every 30 minutes to check an  hour  resolution. You would want to use the  job.OK  return in these situations.",
            "title": "Job Helpers"
        },
        {
            "location": "/server/modules/jobs/guide/#editing-job-code",
            "text": "To edit existing Job code, navigate to the  Jobs Service  section, and click any of the links in the  File Path  column. This will take you to the Job code editor with the requested Job code loaded into the editor.  Once you've edited your code be sure to save it. While not required, you should issue a  reload  when finished.",
            "title": "Editing Job Code"
        },
        {
            "location": "/server/modules/jobs/guide/#example-code",
            "text": "After creating your Job (see  Creating Jobs ) you can regulate them by the return status in your code.",
            "title": "Example Code"
        },
        {
            "location": "/server/modules/jobs/guide/#recurring",
            "text": "This Job will keep running at its set interval by returning  job.OK  local   job   =   core . job ()  function   job . run () \n\n   --check stock \n   local   bikes ,   err ,   code   =   core . mysql . selectOne ( \"products\" ,   { \n     tbl   =   \"toys\" , \n     columns   =   {   \"stock\"   }, \n     where   =   {   type   =   \"Red Bikes\"   } \n   }) \n\n   --update status \n   if   bikes . stock   ==   0   then \n     local   res ,   err ,   code   =   core . mysql . update ( \"products\" ,   { \n       tbl   =   \"toys\" , \n       values   =   {   out_of_stock   =   true   }, \n       where   =   {   id   =   bikes . id   } \n     }) \n   end \n\n   return   job . OK  end  return   job",
            "title": "Recurring"
        },
        {
            "location": "/server/modules/jobs/guide/#sleep-job",
            "text": "This Job will stop special sales on Sundays. Checks the day every 24 hours using  job.SLEEP .  local   job   =   core . job ()  function   job . run () \n\n   if   job . day ()   ==   \"Sun\"   then \n     local   res ,   err ,   code   =   core . mysql . update ( \"shop\" ,   { \n       tbl   =   \"status\" , \n       values   =   {   no_specials   =   true   }, \n       where   =   {   no_specials   =   false   } \n     }) \n   end \n\n   return   job . SLEEP  end  return   job",
            "title": "Sleep Job"
        },
        {
            "location": "/server/modules/jobs/guide/#stop-job",
            "text": "This Job will send daily sales reports during January. And return  job.STOP  otherwise.  local   job   =   core . job ()  function   job . run () \n\n   local   res ,   err ,   code   =   core . mysql . selectOne ( \"shop\" ,   { \n     tbl   =   \"status\" , \n     columns   =   {   sales_total   }, \n     where   =   {   month   =   \"Jan\"   } \n   }) \n\n   if   job . month ()   ==   \"Jan\"   then \n     local   msg   =   core . email . new () \n     msg : to ( \"boss@work.com\" ) \n     msg : from ( \"job@work.com\" ) \n     msg : subject ( \"January Daily\" ) \n     msg : body ( \"Sales today were: $\" .. res . sales_total ) \n     msg : send () \n\n     return   job . SLEEP \n   else \n     return   job . STOP \n   end  end  return   job",
            "title": "Stop Job"
        },
        {
            "location": "/server/modules/jobs/guide/#exit-job",
            "text": "This Job will deactivate returning  job.EXIT  if an error occurs with the query.  local   job   =   core . job ()  function   job . run () \n\n   local   res ,   err ,   code   =   core . mysql . selectOne ( \"products\" ,   { \n     tbl   =   \"toys\" , \n     where   =   {   type   =   \"blender\"   } \n   }) \n\n   if   not   res   then \n     core . log ( err ) \n     return   job . EXIT \n   else \n     return   job . OK \n   end  end  return   job",
            "title": "Exit Job"
        },
        {
            "location": "/server/modules/jobs/guide/#run-once-job",
            "text": "This Job will run once. The proper return type is  job.OK  for  Run Once  jobs.  local   job   =   core . job ()  function   job . run () \n\n   local   config_tbl ,   err   =   core . network . getJson ( \"https://some.json-config.com\" ) \n\n   local   config ,   err   =   core . data ( 'config' ) \n\n   local   id ,   err   =   config : save ( config_tbl ) \n\n   return   job . OK  end  return   job",
            "title": "Run Once Job"
        },
        {
            "location": "/server/modules/mongo/",
            "text": "Important Note\n\n\nThe Mongo module has most, but not all, functionality of the full client. It is recommended that you manage your databases using an external tool. See \nAdministration\n below.\n\n\n\n\n\n\nClient-Side Data\n\n\nFor simple data manipulation using Mongo, take a look at the \nData\n module.\n\n\n\n\ncore.mongo\n\n\nConnect to a database and return a database object. If the database does not exist, it will be created.\n\n\ncore\n.\nmongo\n(\n \ndb_name\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to connect to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ndb\n,\n \nerr\n \n=\n \ncore\n.\nmongo\n(\n \n\"app\"\n \n)\n \n\n\n\n\n\nuse\n\n\nChange the current working database. If the database does not exist, it will be created.\n\n\ndb\n:\nuse\n(\n \ndb_name\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to connect to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ndb\n \n=\n \ndb\n:\nuse\n(\n \n\"app2\"\n \n)\n\n\n\n\n\n\nclose\n\n\nClose the database connection.\n\n\ndb\n:\nclose\n()\n\n\n\n\n\n\n\n\nClose Connections\n\n\nTo keep memory usage down, you should always close the database connection when finished.\n\n\n\n\ncollection\n\n\nSelect and return a collection to operate on. If the collection does not exist, it will be created.\n\n\ndb\n:\ncollection\n(\n \nname\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe collection name to use.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ncoll\n \n=\n \ndb\n:\ncollection\n(\n \n\"users\"\n \n)\n\n\n\n\n\n\nlistCollections\n\n\nRetreive a list of collections. Returns a \ntable\n array, or \nnil\n and an error.\n\n\ndb\n:\nlistCollections\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \nlist\n,\n \nerr\n \n=\n \ndb\n:\nlistCollections\n()\n\n\n\nfor\n \ni\n=\n1\n,\n \n#\nlist\n \ndo\n\n  \nprint\n(\nlist\n[\ni\n])\n \n-- collection name\n\n\nend\n\n\n\n\n\n\nCollections\n\n\nThe following methods operate on collections. See \ndb:collection\n above to gain access to a collection object.\n\n\nsave\n\n\nInserts or updates a single document. If no id field is present, creates a new document, otherwise updates the document. Returns the document id, or \nnil\n and an error. \n\n\ncollection\n:\nsave\n(\ndoc\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndoc\n\n\nA data table with the document data.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nInsert a new document\n\n\nlocal\n \ndoc\n \n=\n \n{\n\n  \nname\n \n=\n \n\"Jimmy\"\n,\n\n  \nage\n \n=\n \n20\n,\n\n  \nactive\n \n=\n \ntrue\n,\n\n  \ncolors\n \n=\n \n{\n\n    \n\"red\"\n,\n\n    \n\"green\"\n,\n\n    \n\"blue\"\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nid\n,\n \nerr\n \n=\n \ncoll\n:\nsave\n(\ndoc\n)\n\n\n\n\n\n\nUpdate an existing document\n\n\nlocal\n \ndoc\n \n=\n \ncoll\n:\nfindOne\n(\n<\nqueryOrId\n>\n)\n\n\n\ndoc\n.\nname\n \n=\n \n\"Nancy\"\n\n\n\nlocal\n \nid\n,\n \nerr\n \n=\n \ncoll\n:\nsave\n(\ndoc\n)\n\n\n\n\n\n\n\n\nNote\n\n\nThis method is the same as setting \nupsert=true\n when using the \nupdate\n method.\n\n\n\n\ninsert\n\n\nInsert multiple documents into a collection. Returns array of \nids\n and \nnumber\n inserted, or \nnil\n and an error.\n\n\ncollection\n:\ninsert\n(\n \ndocs\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndocs\n\n\nA table array of data tables with the document data.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ndocs\n \n=\n \n{\n\n  \n{\n\n    \nname\n \n=\n \n\"Tina\"\n,\n\n    \nage\n \n=\n \n24\n\n  \n},\n\n  \n{\n\n    \nname\n \n=\n \n\"Jeff\"\n,\n\n    \nage\n \n=\n \n36\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nids\n,\n \nerrOrNum\n \n=\n \ncoll\n:\ninsert\n(\n \ndocs\n \n)\n\n\n\n\n\n\nfindOne\n\n\nFind and return the first document that matches the query or id. Returns the \ndoc\n, or \nnil\n and an error.\n\n\ncollection\n:\nfindOne\n(\nqueryOrId\n,\n \nfields\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\nfields\n\n\nLimit the fields returned from the document. Returns all fields by default.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nBy query\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncoll\n:\nfindOne\n(\n \n{\nname\n=\n\"Jeff\"\n,\n \nage\n=\n36\n}\n \n)\n\n\n\n\n\n\nBy id\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncoll\n:\nfindOne\n(\n \n\"59a583516362392a28000001\"\n \n)\n\n\n\n\n\n\nLimit fields\n\n\n-- return only the 'name' field\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncoll\n:\nfindOne\n(\n \n{\nname\n=\n\"Jeff\"\n,\n \nage\n=\n36\n},\n \n{\nname\n=\ntrue\n}\n \n)\n\n\n\n-- return all except the 'name' field\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncoll\n:\nfindOne\n(\n \n{\nname\n=\n\"Jeff\"\n,\n \nage\n=\n36\n},\n \n{\nname\n=\nfalse\n}\n \n)\n\n\n\n\n\n\nSee also\n\n\n\n\nMongoDB to Lua\n\n\n\n\nfind\n\n\nFind multiple documents based on query. Returns a new \ncursor\n object.\n\n\ncollection\n:\nfind\n(\nquery\n,\n \nfields\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\nfields\n\n\nLimit the fields returned from the document. Returns all fields by default.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\n-- find documents where name equals \"Jimmy\"\n\n\nlocal\n \ncursor\n \n=\n \ncoll\n:\nfind\n({\n \nname\n \n=\n \n\"Jimmy\"\n \n})\n\n\n\n-- find documents where age greater than 20\n\n\nlocal\n \ncursor\n \n=\n \ncoll\n:\nfind\n({\n \nage\n \n=\n \n{[\n\"$gt\"\n]\n \n=\n \n20\n}\n \n})\n\n\n\n-- find documents where age greater than 20, and name is \"Tina\"\n\n\nlocal\n \ncursor\n \n=\n \ncoll\n:\nfind\n({\n \nage\n \n=\n \n{[\n\"$gt\"\n]\n \n=\n \n20\n},\n \nname\n \n=\n \n\"Tina\"\n \n})\n\n\n\n\n\n\n\n\nChainable Cursors\n\n\nThis method returns a \ncursor\n object which is chainable. For example, to return all documents found by the query in one call: \nlocal docs = coll:find( query ):all()\n\n\n\n\nSee also\n\n\n\n\nCursor\n\n\nMongoDB to Lua\n\n\nResources\n\n\n\n\nfindAndModify\n\n\nFinds the first document that matches the query and updates it in place based on the \noptions\n. Returns old doc (unless \nnew\n option is set), or \nnil\n, and an error.\n\n\ncollection\n:\nfindAndModify\n(\nqueryOrId\n,\n \noptions\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\noptions\n\n\nOptions for the modification (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nOptions Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nupdate\n\n\nDescription\n\n\nTable\n\n\nY\n\n\n\n\n\n\nnew\n\n\nDescription\n\n\nBool\n\n\nN\n\n\n\n\n\n\nsort\n\n\nDescription\n\n\nTable\n\n\nN\n\n\n\n\n\n\nfields\n\n\nDescription\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncol\n:\nfindAndModify\n(\nquery_or_id\n,\n \nopts\n)\n\n\n\n\n\n\nupdate\n\n\nUpdate a record. Returns \nnumber\n updated, or \nnil\n and an error.\n\n\ncollection\n:\nupdate\n(\nqueryOrId\n,\n \nupdateDoc\n,\n \nflags\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\nupdateDoc\n\n\nOptions for the modification (see examples).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nflags\n\n\nFlags for the update (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nFlags Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nupsert\n\n\nDescription\n\n\nBool\n\n\nRequired\n\n\n\n\n\n\nmulti\n\n\nDescription\n\n\nBool\n\n\nRequired\n\n\n\n\n\n\n\n\nExample\n\n\nReplace entire document\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n({\nname\n=\n\"Jim\"\n},\n \n{\n\n  \nname\n=\n\"John\"\n,\n \n  \nage\n=\n45\n\n\n})\n\n\n\n\n\n\nUpdate and add fields\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n({\nname\n=\n\"John\"\n,\n \nage\n=\n45\n},\n \n{\n\n  \n[\n\"$set\"\n]\n \n=\n \n{\n \nage\n \n=\n \n43\n,\n \nactive\n \n=\n \ntrue\n \n}\n\n\n})\n\n\n\n\n\n\nUsing id\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n(\n\"59a583516362392a28000001\"\n,\n \n{\n\n  \n[\n\"$set\"\n]\n \n=\n \n{\n \nactive\n \n=\n \nfalse\n \n}\n\n\n})\n\n\n\n\n\n\nUpdate multiple\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n({\nactive\n \n=\n \nfalse\n},\n \n  \n{\n \n[\n\"$set\"\n]\n \n=\n \n{\n \nactive\n \n=\n \ntrue\n \n}\n \n},\n \n  \n{\n \nmulti\n \n=\n \ntrue\n \n}\n\n\n)\n\n\n\n\n\n\nAdd field to documents if missing\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n({\n \nactive\n \n=\n \n{[\n\"$exists\"\n]\n \n=\n \nfalse\n \n}},\n \n  \n{\n \n[\n\"$set\"\n]\n \n=\n \n{\n \nactive\n \n=\n \ntrue\n \n}\n \n},\n \n  \n{\n \nmulti\n \n=\n \ntrue\n \n}\n\n\n)\n\n\n\n\n\n\nSee also\n\n\n\n\nMongoDB to Lua\n\n\nResources\n\n\n\n\nremove\n\n\nRemove a document or documents based on the query. Returns \nnumber\n of records removed, or \nnil\n and an error.\n\n\ncollection\n:\nremove\n(\nqueryOrId\n,\n \nisSingle\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\nisSingle\n\n\nRemove only the first returned document when the query matches multiple documents.\n\n\nBool\n\n\nN\n\n\n\n\n\n\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncoll\n:\nremove\n(\nquery_id\n,\n \nis_single\n)\n\n\n\n\n\n\ndrop\n\n\nRemove a collection and all the containing documents. Returns \ntrue\n, or \nnil\n and an error.\n\n\ncollection\n:\ndrop\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ndrop\n()\n\n\n\n\n\n\nrename\n\n\nRename a collection. Returns newly named collection, or \nnil\n and an error.\n\n\ncollection\n:\nrename\n(\nnew_name\n,\n \ndrop\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nnew_name\n\n\nThe preferred name for the collection.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndrop\n\n\nClear all documents before renaming. Default: false\n\n\nBool\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nnew_col\n,\n \nerr\n \n=\n \ncol\n:\nrename\n(\nnew_name\n,\n \ndrop\n)\n\n\n\n\n\n\nMoving to another database\n\n\nTo rename and move the collection to another database, pass the full namespace to the \nnew_name\n parameter:\n\n\n-- namespace <db>.<collection>\n\n\ncol\n:\nrename\n(\n\"otherdb.newname\"\n)\n\n\n\n\n\n\ngetIndexes\n\n\nThe current collection indexes. Returns a \ntable\n array with index objects, or \nnil\n and an error.\n\n\ncollection\n:\ngetIndexes\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nIndex Object Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nThe index key info.\n\n\nTable\n\n\n\n\n\n\nname\n\n\nThe index name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nindexes\n,\n \nerr\n \n=\n \ncoll\n:\ngetIndexes\n()\n\n\n\nfor\n \ni\n=\n1\n,\n \n#\nindexes\n \ndo\n\n  \nlocal\n \nindex\n \n=\n \nindexes\n[\ni\n]\n\n  \n--index key info\n\n  \nfor\n \nfield\n,\n \nopt\n \nin\n \npairs\n(\nindex\n.\nkey\n)\n \ndo\n\n    \nprint\n(\nfield\n,\n \nopt\n)\n\n  \nend\n\n  \n--index name\n\n  \nprint\n(\nindex\n.\nname\n)\n\n\nend\n\n\n\n\n\n\ncreateIndex\n\n\nCreate index(es) for a collection. Returns \ntrue\n, or \nnil\n and an error.\n\n\ncollection\n:\ncreateIndex\n(\nindex_arr\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nindex_arr\n\n\nA table array of index objects.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nSimple index\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ncreateIndex\n({\n\n  \n{\n \nkey\n \n=\n \n{\n \nage\n \n=\n \n1\n \n}\n \n}\n\n\n})\n\n\n\n\n\n\nCompound index\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ncreateIndex\n({\n\n  \n{\n \nkey\n \n=\n \n{\n \nage\n \n=\n \n1\n,\n \nname\n \n=\n \n-\n1\n \n}\n \n}\n\n\n})\n\n\n\n\n\n\nCreate multiple indexes\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ncreateIndex\n({\n\n  \n{\n \nkey\n \n=\n \n{\n \nname\n \n=\n \n1\n \n}\n \n},\n\n  \n{\n \nkey\n \n=\n \n{\n \nage\n \n=\n \n-\n1\n,\n \nscore\n \n=\n \n1\n \n}\n \n}\n\n\n})\n\n\n\n\n\n\nIndex names\n\n\nBy default Mongo will generate the index name based on the fields passed. To set an index name manually, pass a \nname\n key in the object.\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ncreateIndex\n({\n\n  \n{\n \nkey\n \n=\n \n{\n \nage\n \n=\n \n1\n \n},\n \nname\n \n=\n \n\"age_asc\"\n \n}\n\n\n})\n\n\n\n\n\n\ndropIndex\n\n\nDrop indexes for a collection. Returns \ntrue\n, or \nnil\n and an error.\n\n\ncollection\n:\ndropIndex\n(\n \nname\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nindex_name\n\n\nThe index name to drop.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ndropIndex\n(\n \n\"age_asc\"\n \n)\n\n\n\n\n\n\nSee also\n\n\n\n\ngetIndexes\n\n\n\n\naggregate\n\n\nPerforms aggregation operation based on the pipeline commands. By default returns a cursor, or \nnil\n and an error.\n\n\ncollection\n:\naggregate\n(\npipeline\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npipeline\n\n\nThe aggregation pipeline commands.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ncur\n,\n \nerr\n \n=\n \nusers\n:\naggregate\n({\n\n  \n{\n \n[\n\"$project\"\n]\n \n=\n \n{\n \nname\n \n=\n \n{\n \n[\n\"$toUpper\"\n]\n \n=\n \n\"$name\"\n \n},\n \n_id\n \n=\n \n0\n \n}\n \n},\n\n  \n{\n \n[\n\"$sort\"\n]\n \n=\n \n{\n \nname\n \n=\n \n1\n \n}\n \n}\n\n\n})\n\n\n\n\n\n\nOutput aggregation results to a collection instead of a cursor\n\n\n\n\nImportant\n\n\nThe \n$out\n key must be the last step in the pipeline. Creates and returns a new collection.\n\n\n\n\nlocal\n \ncoll\n,\n \nerr\n \n=\n \nusers\n:\naggregate\n({\n\n  \n{\n \n[\n\"$project\"\n]\n \n=\n \n{\n \nname\n \n=\n \n{\n \n[\n\"$toUpper\"\n]\n \n=\n \n\"$name\"\n \n},\n \n_id\n \n=\n \n0\n \n}\n \n},\n\n  \n{\n \n[\n\"$sort\"\n]\n \n=\n \n{\n \nname\n \n=\n \n1\n \n}\n \n},\n\n  \n{\n \n[\n\"$out\"\n]\n \n=\n \n\"uppernames\"\n \n}\n\n\n})\n\n\n\n\n\n\nSee also\n\n\n\n\nResources\n\n\n\n\nCursor\n\n\nA cursor object contains a group of documents returned from the \nfind\n method. After setting the needed cursor methods, use the \nall\n or \nnext\n cursor method to retrieve the documents. For example, using \nall\n:\n\n\n-- return first 10 docs from the find request\n\n\nlocal\n \ndocs\n \n=\n \ncursor\n:\nlimit\n(\n10\n):\nall\n()\n\n\n\n\n\n\n\n\nTip\n\n\nCursor object methods are chainable.\n\n\n\n\nall\n\n\nReturn document(s) based on the previous cursor options. Returns a \ntable\n array of documents, or \nnil\n and an error.\n\n\ncursor\n:\nall\n()\n\n\n\n\n\n\n\n\nImportant\n\n\nAlways call this method last (or in a chain), to retrieve the documents from the cursor.\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \ndocs\n,\n \nerr\n \n=\n \ncur\n:\nall\n()\n\n\n\n\n\n\nsort\n\n\nSort the documents currently held in the cursor based on the sorting table. Returns the cursor.\n\n\ncursor\n:\nsort\n(\n \nsort_tbl\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsort_tbl\n\n\nA table with field based sorting options.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\n--sort by age, ascending\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nsort\n({\n \nage\n \n=\n \ncore\n.\nASC\n \n})\n\n\n\n--sort by age descending and name ascending\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nsort\n({\nage\n \n=\n \ncore\n.\nDESC\n,\n \nname\n \n=\n \ncore\n.\nASC\n \n})\n\n\n\n\n\n\nskip\n\n\nSkip a specific amount of documents in the cursor results. Returns the cursor.\n\n\ncursor\n:\nskip\n(\nnum\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nnum\n\n\nThe amount of records to skip.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\n--skip the first 20 documents\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nskip\n(\n \n20\n \n)\n\n\n\n\n\n\nlimit\n\n\nLimit the amount of documents returned based on the current cursor options. Returns the cursor.\n\n\ncursor\n:\nlimit\n(\nnum\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nnum\n\n\nThe records limit amount.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\n--return the first 10 documents\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nlimit\n(\n \n10\n \n)\n\n\n\n\n\n\ncount\n\n\nReturn the current document amount based on the current cursor options. Returns a \nnumber\n.\n\n\ncursor\n:\ncount\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \ncnt\n \n=\n \ncur\n:\ncount\n()\n\n\n\n\n\n\nrewind\n\n\nSet the cursor pointer back to the begining of the document results. Returns the cursor.\n\n\ncursor\n:\nrewind\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nrewind\n()\n\n\n\n\n\n\nnext\n\n\nInterate over the cursor results. On each call, returns a document, or \nnil\n and an error.\n\n\ncursor\n:\nnext\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nwhile\n \ntrue\n \ndo\n\n  \nlocal\n \ndoc\n \n=\n \ncur\n:\nnext\n()\n\n  \nif\n \ndoc\n \n==\n \nnil\n \nthen\n \nbreak\n \nend\n\n\nend\n\n\n\n\n\n\nSee also\n\n\n\n\nall\n\n\nrewind\n\n\n\n\ndistinct\n\n\nPull distinct key values from the cursor results. Returns a \ntable\n array, or \nnil\n and an error.\n\n\ncursor\n:\ndistinct\n(\nkey\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nThe field key to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncur\n:\ndistinct\n(\n \n\"age\"\n \n)\n\n\n-- 'res' is a table array\n\n\n\n\n\n\nMongoDB to Lua\n\n\nMongoDB used JSON objects. When viewing the documentation on the MongoDB website, you must convert the JSON information to Lua. What follows are some tips to do that.\n\n\nOperators\n\n\nMongoDB uses special operators that are prefixed with a dollar sign ( $ ). These operators keys must be set using an array style syntax when providing them using Lua.\n\n\n\n\n\n\n\n\nMongoDB Key\n\n\nLua Key\n\n\n\n\n\n\n\n\n\n\n$inc\n\n\n[\"$inc\"]\n\n\n\n\n\n\n$set\n\n\n[\"$set\"]\n\n\n\n\n\n\n\n\nExample\n\n\ncoll\n:\nupdate\n({\nname\n=\n\"Jimmy\"\n},\n \n{\n\n  \n[\n\"$set\"\n]\n \n=\n \n{\n\n    \nage\n \n=\n \n23\n\n  \n}\n\n\n})\n\n\n\n\n\n\nArrays\n\n\nArrays are rendered as indexed tables.\n\n\n\n\n\n\n\n\nMongoDB Array\n\n\nLua Array\n\n\n\n\n\n\n\n\n\n\n[\"red\", 23, true]\n\n\n{\"red\", 23, true}\n\n\n\n\n\n\n\n\nExample\n\n\ncoll\n:\ninsert\n({\n\n  \nname\n \n=\n \n\"Tina\"\n,\n\n  \ncolors\n \n=\n \n{\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n}\n\n\n})\n\n\n\n\n\n\nAppend values\n\n\nAppend a single value\n\n\ncoll\n:\nupdate\n(\n<\nqueryOrId\n>\n,\n \n{\n\n  \n[\n\"$push\"\n]\n \n=\n \n{\n\n    \ncolors\n \n=\n \n\"yellow\"\n\n  \n}\n\n\n})\n\n\n\n\n\n\nAppend multiple values\n\n\ncoll\n:\nupdate\n(\n<\nqueryOrId\n>\n,\n \n{\n\n  \n[\n\"$push\"\n]\n \n=\n \n{\n\n    \ncolors\n \n=\n \n{\n \n[\n\"$each\"\n]\n \n=\n \n{\n \n\"brown\"\n,\n \n\"purple\"\n \n}\n \n}\n\n  \n}\n\n\n})\n\n\n\n\n\n\nRemove values\n\n\nRemove first element\n\n\ncoll\n:\nupdate\n(\n<\nqueryOrId\n>\n,\n \n{\n\n  \n[\n\"$pop\"\n]\n \n=\n \n{\n\n    \ncolors\n \n=\n \n-\n1\n\n  \n}\n\n\n})\n\n\n\n\n\n\nRemove last element\n\n\ncoll\n:\nupdate\n(\n<\nqueryOrId\n>\n,\n \n{\n\n  \n[\n\"$pop\"\n]\n \n=\n \n{\n\n    \ncolors\n \n=\n \n1\n\n  \n}\n\n\n})\n\n\n\n\n\n\nResources\n\n\n\n\nFind Examples\n\n\nQuery Operators\n\n\nUpdate Operators\n\n\nArray Update Operators\n\n\nAggregation Operators\n\n\nSQL to MongoDB Mapping Chart\n\n\n\n\nAdministration\n\n\nYou can and should manage your Mongo databases using a standalone tool. Below are some free resources for managing Mongo databases.\n\n\n\n\nScreencast Available\n\n\nLearn more about database administration in a screencast format by \nClicking here\n.\n\n\n\n\n\n\nMongoBooster\n\n\nStudio 3T\n\n\n\n\nTo connect to the Mongo database, use the host address of the server, and the password that was set when installing Coronium Core.\n\n\nRemote Access\n\n\nBy default, a fresh Coronium Core installation allows remote access to the Mongo database with a password so that you can use client side tools to edit your databases.\n\n\nWhile this is convenient to the developer, it is not particularly the \nmost\n secure way to run the database. Instead you should only activate remote access while you work on the database, and then deactivate it when you are done. \n\n\n DigitalOcean\n\n\nTo activate/deactivate remote MongoDB access use the \nmongo-remote\n tool by logging in with the \ncoronium\n user and entering one of the following on the command line:\n\n\nActivate remote access\n\n\nsudo mongo-remote on\n\n\n\n\n\nDeactivate remote access\n\n\nsudo mongo-remote off\n\n\n\n\n\nIf you are having issues connecting with your MongoDB client, make sure that you have remote access in an active state.\n\n\n Amazon EC2\n\n\nDisable/enable port \n27017\n as needed in your instance security group. For more information on editing your security group \nclick here\n.\n\n\nPassword Update\n\n\nTo change your Mongo password log in your Coronium Core server and run:\n\n\nsudo mongo-updatepw\n\n\n\n\n\nDisabling MongoDB\n\n\nIf you don't plan on using any of the Mongo based modules, like \ncore.data\n or \ncore.mongo\n you can reclaim some memory and resources for your system.\n\n\nTo disable MongoDB, you will need to log in as the \nroot\n user (\nubuntu\n on EC2) and run the following on the command line:\n\n\nsudo mongo-enabled \nfalse\n\n\n\n\n\n\nThis will stop the MongoDB service from running. \nThe server will automatically reboot after issuing this command\n.\n\n\nIn the future, if you decide you need MongoDB, log in as the \nroot\n user (\nubuntu\n on EC2), and run:\n\n\nsudo mongo-enabled \ntrue",
            "title": "Mongo"
        },
        {
            "location": "/server/modules/mongo/#coremongo",
            "text": "Connect to a database and return a database object. If the database does not exist, it will be created.  core . mongo (   db_name   )   Parameters     Name  Description  Type  Required      db_name  The database to connect to.  String  Y     Example  local   db ,   err   =   core . mongo (   \"app\"   )",
            "title": "core.mongo"
        },
        {
            "location": "/server/modules/mongo/#use",
            "text": "Change the current working database. If the database does not exist, it will be created.  db : use (   db_name   )   Parameters     Name  Description  Type  Required      db_name  The database to connect to.  String  Y     Example  local   db   =   db : use (   \"app2\"   )",
            "title": "use"
        },
        {
            "location": "/server/modules/mongo/#close",
            "text": "Close the database connection.  db : close ()    Close Connections  To keep memory usage down, you should always close the database connection when finished.",
            "title": "close"
        },
        {
            "location": "/server/modules/mongo/#collection",
            "text": "Select and return a collection to operate on. If the collection does not exist, it will be created.  db : collection (   name   )   Parameters     Name  Description  Type  Required      name  The collection name to use.  String  Y     Example  local   coll   =   db : collection (   \"users\"   )",
            "title": "collection"
        },
        {
            "location": "/server/modules/mongo/#listcollections",
            "text": "Retreive a list of collections. Returns a  table  array, or  nil  and an error.  db : listCollections ()   Parameters  This method has no parameters.  Example  local   list ,   err   =   db : listCollections ()  for   i = 1 ,   # list   do \n   print ( list [ i ])   -- collection name  end",
            "title": "listCollections"
        },
        {
            "location": "/server/modules/mongo/#collections",
            "text": "The following methods operate on collections. See  db:collection  above to gain access to a collection object.",
            "title": "Collections"
        },
        {
            "location": "/server/modules/mongo/#save",
            "text": "Inserts or updates a single document. If no id field is present, creates a new document, otherwise updates the document. Returns the document id, or  nil  and an error.   collection : save ( doc )   Parameters     Name  Description  Type  Required      doc  A data table with the document data.  Table  Y     Example  Insert a new document  local   doc   =   { \n   name   =   \"Jimmy\" , \n   age   =   20 , \n   active   =   true , \n   colors   =   { \n     \"red\" , \n     \"green\" , \n     \"blue\" \n   }  }  local   id ,   err   =   coll : save ( doc )   Update an existing document  local   doc   =   coll : findOne ( < queryOrId > )  doc . name   =   \"Nancy\"  local   id ,   err   =   coll : save ( doc )    Note  This method is the same as setting  upsert=true  when using the  update  method.",
            "title": "save"
        },
        {
            "location": "/server/modules/mongo/#insert",
            "text": "Insert multiple documents into a collection. Returns array of  ids  and  number  inserted, or  nil  and an error.  collection : insert (   docs   )   Parameters     Name  Description  Type  Required      docs  A table array of data tables with the document data.  Table  Y     Example  local   docs   =   { \n   { \n     name   =   \"Tina\" , \n     age   =   24 \n   }, \n   { \n     name   =   \"Jeff\" , \n     age   =   36 \n   }  }  local   ids ,   errOrNum   =   coll : insert (   docs   )",
            "title": "insert"
        },
        {
            "location": "/server/modules/mongo/#findone",
            "text": "Find and return the first document that matches the query or id. Returns the  doc , or  nil  and an error.  collection : findOne ( queryOrId ,   fields )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    fields  Limit the fields returned from the document. Returns all fields by default.  Table  N     Example  By query  local   doc ,   err   =   coll : findOne (   { name = \"Jeff\" ,   age = 36 }   )   By id  local   doc ,   err   =   coll : findOne (   \"59a583516362392a28000001\"   )   Limit fields  -- return only the 'name' field  local   doc ,   err   =   coll : findOne (   { name = \"Jeff\" ,   age = 36 },   { name = true }   )  -- return all except the 'name' field  local   doc ,   err   =   coll : findOne (   { name = \"Jeff\" ,   age = 36 },   { name = false }   )   See also   MongoDB to Lua",
            "title": "findOne"
        },
        {
            "location": "/server/modules/mongo/#find",
            "text": "Find multiple documents based on query. Returns a new  cursor  object.  collection : find ( query ,   fields )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    fields  Limit the fields returned from the document. Returns all fields by default.  Table  N     Example  -- find documents where name equals \"Jimmy\"  local   cursor   =   coll : find ({   name   =   \"Jimmy\"   })  -- find documents where age greater than 20  local   cursor   =   coll : find ({   age   =   {[ \"$gt\" ]   =   20 }   })  -- find documents where age greater than 20, and name is \"Tina\"  local   cursor   =   coll : find ({   age   =   {[ \"$gt\" ]   =   20 },   name   =   \"Tina\"   })    Chainable Cursors  This method returns a  cursor  object which is chainable. For example, to return all documents found by the query in one call:  local docs = coll:find( query ):all()   See also   Cursor  MongoDB to Lua  Resources",
            "title": "find"
        },
        {
            "location": "/server/modules/mongo/#findandmodify",
            "text": "Finds the first document that matches the query and updates it in place based on the  options . Returns old doc (unless  new  option is set), or  nil , and an error.  collection : findAndModify ( queryOrId ,   options )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    options  Options for the modification (see below).  Table  Y     Options Keys     Name  Description  Type  Required      update  Description  Table  Y    new  Description  Bool  N    sort  Description  Table  N    fields  Description  Table  N     local   doc ,   err   =   col : findAndModify ( query_or_id ,   opts )",
            "title": "findAndModify"
        },
        {
            "location": "/server/modules/mongo/#update",
            "text": "Update a record. Returns  number  updated, or  nil  and an error.  collection : update ( queryOrId ,   updateDoc ,   flags )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    updateDoc  Options for the modification (see examples).  Table  Y    flags  Flags for the update (see below).  Table  Y     Flags Keys     Name  Description  Type  Required      upsert  Description  Bool  Required    multi  Description  Bool  Required     Example  Replace entire document  local   num ,   err   =   collection : update ({ name = \"Jim\" },   { \n   name = \"John\" ,  \n   age = 45  })   Update and add fields  local   num ,   err   =   collection : update ({ name = \"John\" ,   age = 45 },   { \n   [ \"$set\" ]   =   {   age   =   43 ,   active   =   true   }  })   Using id  local   num ,   err   =   collection : update ( \"59a583516362392a28000001\" ,   { \n   [ \"$set\" ]   =   {   active   =   false   }  })   Update multiple  local   num ,   err   =   collection : update ({ active   =   false },  \n   {   [ \"$set\" ]   =   {   active   =   true   }   },  \n   {   multi   =   true   }  )   Add field to documents if missing  local   num ,   err   =   collection : update ({   active   =   {[ \"$exists\" ]   =   false   }},  \n   {   [ \"$set\" ]   =   {   active   =   true   }   },  \n   {   multi   =   true   }  )   See also   MongoDB to Lua  Resources",
            "title": "update"
        },
        {
            "location": "/server/modules/mongo/#remove",
            "text": "Remove a document or documents based on the query. Returns  number  of records removed, or  nil  and an error.  collection : remove ( queryOrId ,   isSingle )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    isSingle  Remove only the first returned document when the query matches multiple documents.  Bool  N     local   num ,   err   =   coll : remove ( query_id ,   is_single )",
            "title": "remove"
        },
        {
            "location": "/server/modules/mongo/#drop",
            "text": "Remove a collection and all the containing documents. Returns  true , or  nil  and an error.  collection : drop ()   Parameters  This method has no parameters.  Example  local   res ,   err   =   coll : drop ()",
            "title": "drop"
        },
        {
            "location": "/server/modules/mongo/#rename",
            "text": "Rename a collection. Returns newly named collection, or  nil  and an error.  collection : rename ( new_name ,   drop )   Parameters     Name  Description  Type  Required      new_name  The preferred name for the collection.  String  Y    drop  Clear all documents before renaming. Default: false  Bool  N     Example  local   new_col ,   err   =   col : rename ( new_name ,   drop )   Moving to another database  To rename and move the collection to another database, pass the full namespace to the  new_name  parameter:  -- namespace <db>.<collection>  col : rename ( \"otherdb.newname\" )",
            "title": "rename"
        },
        {
            "location": "/server/modules/mongo/#getindexes",
            "text": "The current collection indexes. Returns a  table  array with index objects, or  nil  and an error.  collection : getIndexes ()   Parameters  This method has no parameters.  Index Object Keys     Name  Description  Type      key  The index key info.  Table    name  The index name.  String     Example  local   indexes ,   err   =   coll : getIndexes ()  for   i = 1 ,   # indexes   do \n   local   index   =   indexes [ i ] \n   --index key info \n   for   field ,   opt   in   pairs ( index . key )   do \n     print ( field ,   opt ) \n   end \n   --index name \n   print ( index . name )  end",
            "title": "getIndexes"
        },
        {
            "location": "/server/modules/mongo/#createindex",
            "text": "Create index(es) for a collection. Returns  true , or  nil  and an error.  collection : createIndex ( index_arr )   Parameters     Name  Description  Type  Required      index_arr  A table array of index objects.  Table  Y     Example  Simple index  local   res ,   err   =   coll : createIndex ({ \n   {   key   =   {   age   =   1   }   }  })   Compound index  local   res ,   err   =   coll : createIndex ({ \n   {   key   =   {   age   =   1 ,   name   =   - 1   }   }  })   Create multiple indexes  local   res ,   err   =   coll : createIndex ({ \n   {   key   =   {   name   =   1   }   }, \n   {   key   =   {   age   =   - 1 ,   score   =   1   }   }  })   Index names  By default Mongo will generate the index name based on the fields passed. To set an index name manually, pass a  name  key in the object.  local   res ,   err   =   coll : createIndex ({ \n   {   key   =   {   age   =   1   },   name   =   \"age_asc\"   }  })",
            "title": "createIndex"
        },
        {
            "location": "/server/modules/mongo/#dropindex",
            "text": "Drop indexes for a collection. Returns  true , or  nil  and an error.  collection : dropIndex (   name   )   Parameters     Name  Description  Type  Required      index_name  The index name to drop.  String  Y     Example  local   res ,   err   =   coll : dropIndex (   \"age_asc\"   )   See also   getIndexes",
            "title": "dropIndex"
        },
        {
            "location": "/server/modules/mongo/#aggregate",
            "text": "Performs aggregation operation based on the pipeline commands. By default returns a cursor, or  nil  and an error.  collection : aggregate ( pipeline )   Parameters     Name  Description  Type  Required      pipeline  The aggregation pipeline commands.  Table  Y     Example  local   cur ,   err   =   users : aggregate ({ \n   {   [ \"$project\" ]   =   {   name   =   {   [ \"$toUpper\" ]   =   \"$name\"   },   _id   =   0   }   }, \n   {   [ \"$sort\" ]   =   {   name   =   1   }   }  })   Output aggregation results to a collection instead of a cursor   Important  The  $out  key must be the last step in the pipeline. Creates and returns a new collection.   local   coll ,   err   =   users : aggregate ({ \n   {   [ \"$project\" ]   =   {   name   =   {   [ \"$toUpper\" ]   =   \"$name\"   },   _id   =   0   }   }, \n   {   [ \"$sort\" ]   =   {   name   =   1   }   }, \n   {   [ \"$out\" ]   =   \"uppernames\"   }  })   See also   Resources",
            "title": "aggregate"
        },
        {
            "location": "/server/modules/mongo/#cursor",
            "text": "A cursor object contains a group of documents returned from the  find  method. After setting the needed cursor methods, use the  all  or  next  cursor method to retrieve the documents. For example, using  all :  -- return first 10 docs from the find request  local   docs   =   cursor : limit ( 10 ): all ()    Tip  Cursor object methods are chainable.",
            "title": "Cursor"
        },
        {
            "location": "/server/modules/mongo/#all",
            "text": "Return document(s) based on the previous cursor options. Returns a  table  array of documents, or  nil  and an error.  cursor : all ()    Important  Always call this method last (or in a chain), to retrieve the documents from the cursor.   Parameters  This method has no parameters.  Example  local   docs ,   err   =   cur : all ()",
            "title": "all"
        },
        {
            "location": "/server/modules/mongo/#sort",
            "text": "Sort the documents currently held in the cursor based on the sorting table. Returns the cursor.  cursor : sort (   sort_tbl   )   Parameters     Name  Description  Type  Required      sort_tbl  A table with field based sorting options.  Table  Y     Example  --sort by age, ascending  local   cur   =   cur : sort ({   age   =   core . ASC   })  --sort by age descending and name ascending  local   cur   =   cur : sort ({ age   =   core . DESC ,   name   =   core . ASC   })",
            "title": "sort"
        },
        {
            "location": "/server/modules/mongo/#skip",
            "text": "Skip a specific amount of documents in the cursor results. Returns the cursor.  cursor : skip ( num )   Parameters     Name  Description  Type  Required      num  The amount of records to skip.  Number  Y     Example  --skip the first 20 documents  local   cur   =   cur : skip (   20   )",
            "title": "skip"
        },
        {
            "location": "/server/modules/mongo/#limit",
            "text": "Limit the amount of documents returned based on the current cursor options. Returns the cursor.  cursor : limit ( num )   Parameters     Name  Description  Type  Required      num  The records limit amount.  Number  Y     Example  --return the first 10 documents  local   cur   =   cur : limit (   10   )",
            "title": "limit"
        },
        {
            "location": "/server/modules/mongo/#count",
            "text": "Return the current document amount based on the current cursor options. Returns a  number .  cursor : count ()   Parameters  This method has no parameters.  Example  local   cnt   =   cur : count ()",
            "title": "count"
        },
        {
            "location": "/server/modules/mongo/#rewind",
            "text": "Set the cursor pointer back to the begining of the document results. Returns the cursor.  cursor : rewind ()   Parameters  This method has no parameters.  Example  local   cur   =   cur : rewind ()",
            "title": "rewind"
        },
        {
            "location": "/server/modules/mongo/#next",
            "text": "Interate over the cursor results. On each call, returns a document, or  nil  and an error.  cursor : next ()   Parameters  This method has no parameters.  Example  while   true   do \n   local   doc   =   cur : next () \n   if   doc   ==   nil   then   break   end  end   See also   all  rewind",
            "title": "next"
        },
        {
            "location": "/server/modules/mongo/#distinct",
            "text": "Pull distinct key values from the cursor results. Returns a  table  array, or  nil  and an error.  cursor : distinct ( key )   Parameters     Name  Description  Type  Required      key  The field key to operate on.  String  Y     Example  local   res ,   err   =   cur : distinct (   \"age\"   )  -- 'res' is a table array",
            "title": "distinct"
        },
        {
            "location": "/server/modules/mongo/#mongodb-to-lua",
            "text": "MongoDB used JSON objects. When viewing the documentation on the MongoDB website, you must convert the JSON information to Lua. What follows are some tips to do that.",
            "title": "MongoDB to Lua"
        },
        {
            "location": "/server/modules/mongo/#operators",
            "text": "MongoDB uses special operators that are prefixed with a dollar sign ( $ ). These operators keys must be set using an array style syntax when providing them using Lua.     MongoDB Key  Lua Key      $inc  [\"$inc\"]    $set  [\"$set\"]     Example  coll : update ({ name = \"Jimmy\" },   { \n   [ \"$set\" ]   =   { \n     age   =   23 \n   }  })",
            "title": "Operators"
        },
        {
            "location": "/server/modules/mongo/#arrays",
            "text": "Arrays are rendered as indexed tables.     MongoDB Array  Lua Array      [\"red\", 23, true]  {\"red\", 23, true}     Example  coll : insert ({ \n   name   =   \"Tina\" , \n   colors   =   { \"red\" , \"green\" , \"blue\" }  })",
            "title": "Arrays"
        },
        {
            "location": "/server/modules/mongo/#append-values",
            "text": "Append a single value  coll : update ( < queryOrId > ,   { \n   [ \"$push\" ]   =   { \n     colors   =   \"yellow\" \n   }  })   Append multiple values  coll : update ( < queryOrId > ,   { \n   [ \"$push\" ]   =   { \n     colors   =   {   [ \"$each\" ]   =   {   \"brown\" ,   \"purple\"   }   } \n   }  })",
            "title": "Append values"
        },
        {
            "location": "/server/modules/mongo/#remove-values",
            "text": "Remove first element  coll : update ( < queryOrId > ,   { \n   [ \"$pop\" ]   =   { \n     colors   =   - 1 \n   }  })   Remove last element  coll : update ( < queryOrId > ,   { \n   [ \"$pop\" ]   =   { \n     colors   =   1 \n   }  })",
            "title": "Remove values"
        },
        {
            "location": "/server/modules/mongo/#resources",
            "text": "Find Examples  Query Operators  Update Operators  Array Update Operators  Aggregation Operators  SQL to MongoDB Mapping Chart",
            "title": "Resources"
        },
        {
            "location": "/server/modules/mongo/#administration",
            "text": "You can and should manage your Mongo databases using a standalone tool. Below are some free resources for managing Mongo databases.   Screencast Available  Learn more about database administration in a screencast format by  Clicking here .    MongoBooster  Studio 3T   To connect to the Mongo database, use the host address of the server, and the password that was set when installing Coronium Core.",
            "title": "Administration"
        },
        {
            "location": "/server/modules/mongo/#remote-access",
            "text": "By default, a fresh Coronium Core installation allows remote access to the Mongo database with a password so that you can use client side tools to edit your databases.  While this is convenient to the developer, it is not particularly the  most  secure way to run the database. Instead you should only activate remote access while you work on the database, and then deactivate it when you are done.",
            "title": "Remote Access"
        },
        {
            "location": "/server/modules/mongo/#digitalocean",
            "text": "To activate/deactivate remote MongoDB access use the  mongo-remote  tool by logging in with the  coronium  user and entering one of the following on the command line:  Activate remote access  sudo mongo-remote on  Deactivate remote access  sudo mongo-remote off  If you are having issues connecting with your MongoDB client, make sure that you have remote access in an active state.",
            "title": " DigitalOcean"
        },
        {
            "location": "/server/modules/mongo/#amazon-ec2",
            "text": "Disable/enable port  27017  as needed in your instance security group. For more information on editing your security group  click here .",
            "title": " Amazon EC2"
        },
        {
            "location": "/server/modules/mongo/#password-update",
            "text": "To change your Mongo password log in your Coronium Core server and run:  sudo mongo-updatepw",
            "title": "Password Update"
        },
        {
            "location": "/server/modules/mongo/#disabling-mongodb",
            "text": "If you don't plan on using any of the Mongo based modules, like  core.data  or  core.mongo  you can reclaim some memory and resources for your system.  To disable MongoDB, you will need to log in as the  root  user ( ubuntu  on EC2) and run the following on the command line:  sudo mongo-enabled  false   This will stop the MongoDB service from running.  The server will automatically reboot after issuing this command .  In the future, if you decide you need MongoDB, log in as the  root  user ( ubuntu  on EC2), and run:  sudo mongo-enabled  true",
            "title": "Disabling MongoDB"
        },
        {
            "location": "/server/modules/mysql/",
            "text": "The \nmysql\n module allows you to run queries against the local MySQL server instance. You can also connect to remote databases.\n\n\n\n\nDatabase Required\n\n\nBefore you can use the MySQL module, you will need to create a MySQL database. See the \nAdministration\n section for more information on connecting to your database.\n\n\n\n\n\n\nClient-Side MySQL\n\n\nMost data handling can be handled directly on the client-side, without the need to create a server-side api. See the client-side \nMySQL\n module.\n\n\n\n\nQuery String\n\n\nquery\n\n\ncore\n.\nmysql\n.\nquery\n(\n \ndb_name\n,\n \nquery_str\n \n)\n\n\n--OR\n\n\ncore\n.\nmysql\n.\nq\n(\n \ndb_name\n,\n \nquery_str\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database name to issue commands against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nquery_str\n\n\nThe MySQL query to send to the database.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\n\n\nRemote Databases\n\n\nTo connect to remote databases see \nRemote Databases\n.\n\n\n\n\nResult Values\n\n\nThe following outlines the \nresult\n values returned with each query type.\n\n\nSELECT\n\n\nA \ntable\n array of records. If no records are found, returns an empty table.\n\n\nINSERT\n\n\nA \nnumber\n representing the insertion id.\n\n\nUPDATE\n\n\nA \nnumber\n indicating the amount of updated rows.\n\n\nDELETE\n\n\nA \nnumber\n indicating the amount of deleted rows.\n\n\n\n\nOther Commands\n\n\nAny other commands will be returned as \ntable\n. It is recommended that you manage your databases using an external tool. See \nAdministration\n below.\n\n\n\n\n\n\nTip\n\n\nUse the \ncore.sf\n (string format) utility method to make queries easier to build, and type safe.\n\n\n\n\nSelect Example\n\n\nlocal\n \nquery\n \n=\n \ncore\n.\nsf\n(\n\"SELECT * FROM orders LIMIT %d\"\n,\n \n100\n)\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nquery\n(\n\"clients\"\n,\n \nquery\n)\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\nlocal\n \nrecord\n\n\nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n  \nrecord\n \n=\n \nresult\n[\ni\n]\n \n--a record as a table\n\n  \ncore\n.\nlog\n(\nrecord\n.\nid\n)\n\n\nend\n\n\n\n\n\n\nInsert Example\n\n\nlocal\n \ncolumns\n \n=\n \n\"name, age, email\"\n\n\nlocal\n \nvalues\n \n=\n \n{\n\"Jimmy\"\n,\n \n22\n,\n \n\"me@somemail.com\"\n}\n\n\n\n--escape string values\n\n\nvalues\n \n=\n \ncore\n.\nmysql\n.\nescapeAll\n(\nvalues\n)\n\n\n\nlocal\n \nquery\n \n=\n \ncore\n.\nsf\n(\n\"INSERT INTO users (%s) VALUES (%s, %d, %s);\"\n,\n \n  \ncolumns\n,\n \n  \nunpack\n(\nvalues\n)\n\n\n)\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nquery\n(\n\"clients\"\n,\n \nquery\n)\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\ncore\n.\nlog\n(\n\"inserted id is: \"\n,\n \nresult\n)\n\n\n\n\n\n\nEZ Query Methods\n\n\nEZ query methods provide an alternative way to construct common query types. For more complex queries, use the \ncore.mysql.query\n method above.\n\n\n\n\nClient-Side API\n\n\nYou can access the EZ query methods directly using the client-side \nMySQL\n module.\n\n\n\n\nselect\n\n\nSelect multiple records from a database table.\n\n\ncore\n.\nmysql\n.\nselect\n(\ndb_name\n,\n \nselect_tbl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nselect_tbl\n\n\nThe select table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nSelect Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\ncolumns\n\n\nArray of columns to select as strings.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nwhere\n\n\nAny additional WHERE clause to apply.\n\n\nString\n or \nTable\n\n\nN\n\n\n\n\n\n\norderby\n\n\nThe sorting attributes. See \nOrderby\n below.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlimit\n\n\nLimit the records returned. See \nLimit\n below.\n\n\nNumber\n or \nTable\n\n\nN\n\n\n\n\n\n\ndistinct\n\n\nFilter out duplicate column values. Default: false\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nOrderby\n\n\nThe \norderby\n key should be a table filled with \ncolumn = direction\n pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order. See example 2 below.\n\n\nLimit\n\n\nTo limit the rows returned, supply a \nnumber\n value to the \nlimit\n key. To \noffset\n the limit, supply a \ntable\n array of \nnumber\n values. For example, to return rows 6-15: \nlimit = {5, 10}\n.\n\n\nReturns\n\n\nA \ntable\n array of records, or \nnil\n and an error.\n\n\nExample 1\n\n\n-- Select all records from the 'scores' table\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nselect\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains a table array of records\n\n  \nlocal\n \nrecord\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nrecord\n \n=\n \nresult\n[\ni\n]\n\n    \ncore\n.\nlog\n(\nrecord\n.\nplayer\n..\n' scored '\n..\nrecord\n.\nscore\n)\n\n  \nend\n\n\nend\n\n\n\n\n\n\nExample 2\n\n\n-- Select 10 scores greater than 10, in descending order\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nselect\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \ncolumns\n \n=\n \n{\n \n\"score\"\n \n},\n\n  \nwhere\n \n=\n \n\"`score` > 10\"\n,\n\n  \nlimit\n \n=\n \n10\n,\n\n  \norderby\n \n=\n \n{\n\n    \nscore\n \n=\n \n\"DESC\"\n\n  \n}\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains a table array of records\n\n  \nlocal\n \nrecord\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nrecord\n \n=\n \nresult\n[\ni\n]\n\n    \ncore\n.\nlog\n(\nrecord\n.\nplayer\n..\n' scored '\n..\nrecord\n.\nscore\n)\n\n  \nend\n\n\nend\n\n\n\n\n\n\nselectOne\n\n\nSelect and return a single record from a database table.\n\n\ncore\n.\nmysql\n.\nselectOne\n(\ndb_name\n,\n \nselect_tbl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nselect_tbl\n\n\nThe select table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nSelect Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nThe WHERE clause to apply.\n\n\nString\n or \nTable\n\n\nY\n\n\n\n\n\n\ncolumns\n\n\nArray of columns to select as strings.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nA single record as a \ntable\n, or \nnil\n and an error.\n\n\n\n\nSpecial Response\n\n\nUnlike the \nselect\n method, the result is returned as a single record as opposed to an array of records.\n\n\n\n\nExample\n\n\nlocal\n \nrecord\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nselectOne\n(\n\"app\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"users\"\n,\n\n  \nwhere\n \n=\n \n{\n \nuser_id\n \n=\n \nuser_id\n \n},\n\n  \ncolumns\n \n=\n \n{\n \n\"name\"\n \n}\n\n\n})\n\n\n\n\n\n\nselectBatch\n\n\nQuery multiple tables of a database and return the individual results in a keyed response.\n\n\ncore\n.\nmysql\n.\nselectBatch\n(\ndb_name\n,\n \nbatch_tbl\n)\n\n\n\n\n\n\n\n\nTip\n\n\nThis method offers optimization when used on the client-side. See the \nselectBatch\n client-side method.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbatch_tbl\n\n\nA table array of EZ Query select tables, \nexcluding the db key\n. (see \nselect\n). Each select table must also include a \nkey\n property for the result table (see example below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nSpecial Response\n\n\nIf a \nlimit\n key is set to 1, the results will be a single table record, and not a table array. See \nselectOne\n.\n\n\n\n\nReturns\n\n\nA keyed \ntable\n with the results of each select query as a table array of records. If \nlimit\n in any of the query entries is set to 1, then a single table with the record data is returned (not an array).\n\n\nExample\n\n\nlocal\n \nbatch_select\n \n=\n \n{\n\n  \n{\n\n    \ntbl\n \n=\n \n\"products\"\n,\n\n    \nwhere\n \n=\n \n{\n \ntype\n \n=\n \n'Bike'\n \n},\n\n    \nkey\n \n=\n \n\"bikes\"\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"products\"\n,\n\n    \nwhere\n \n=\n \n{\n \ntype\n \n=\n \n'Shoes'\n \n},\n\n    \nkey\n \n=\n \n\"shoes\"\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"locations\"\n,\n\n    \nwhere\n \n=\n \n{\n \nname\n \n=\n \n\"Happy Toys\"\n \n},\n\n    \nlimit\n \n=\n \n1\n,\n \n--Return as non-array record\n\n    \nkey\n \n=\n \n\"store\"\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nselectBatch\n(\n\"store\"\n,\n \nbatch_select\n)\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \ncore\n.\nlog\n(\nresult\n.\nbikes\n)\n \n--Array of \"Bike\" records\n\n  \ncore\n.\nlog\n(\nresult\n.\nshoes\n)\n \n--Array of \"Shoe\" records\n\n  \ncore\n.\nlog\n(\nresult\n.\nstore\n)\n \n--Table \"Store\" record\n\n\nend\n\n\n\n\n\n\nQuery Errors\n\n\nIf any of the queries in the batch result in an error, the results key for that particular query will contain an \nerror\n key. Best practice is to check for this key before accessing the results.\n\n\n-- Assuming batch call as shown in the example above\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \nif\n \nresult\n.\nbikes\n.\nerror\n \nthen\n\n    \n--an error occurred on this particular query\n\n    \ncore\n.\nlog\n(\nresult\n.\nbikes\n.\nerror\n)\n\n  \nelse\n\n    \n--loop over the records\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nresult\n.\nbikes\n \ndo\n\n      \ncore\n.\nlog\n(\nresult\n.\nbikes\n[\ni\n].\nname\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nselectMerge\n\n\nSelect from multiple databases and tables and return the results in a keyed table.\n\n\ncore\n.\nmysql\n.\nselectMerge\n(\nmerge_tbl\n)\n\n\n\n\n\n\n\n\nTip\n\n\nThis method offers optimization when used on the client-side. See the \nselectMerge\n client-side method.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmerge_tbl\n\n\nA table array of EZ Query select tables, with an additonal \ndb\n key. (see \nselect\n). Each select table should also include a \nkey\n property for the result table (see example below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nA key/value based table containing the \nkey\n names assigned in the query tables. Each key section will contain a table array of returned records. If \nlimit\n in any of the query entries is set to 1, then a single table with the record data is returned (not an array). See also \nErrors\n below.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nmysql\n.\nselectMerge\n({\n\n  \n{\n\n    \ndb\n \n=\n \n\"locations\"\n,\n\n    \ntbl\n \n=\n \n\"spots\"\n,\n\n    \nkey\n \n=\n \n\"locs\"\n\n  \n},\n\n  \n{\n\n    \ndb\n \n=\n \n\"products\"\n,\n\n    \ntbl\n \n=\n \n\"parts\"\n,\n\n    \nwhere\n \n=\n \n{\n \npart_id\n \n=\n \n20\n \n},\n\n    \nkey\n \n=\n \n\"part\"\n\n  \n},\n\n  \n{\n\n    \ndb\n \n=\n \n\"stores\"\n,\n\n    \ntbl\n \n=\n \n\"toy\"\n,\n\n    \nlimit\n \n=\n \n1\n,\n \n--Return as non-array record\n\n    \nwhere\n \n=\n \n{\n \nname\n \n=\n \n\"Happy Toys\"\n \n},\n\n    \nkey\n \n=\n \n\"store\"\n\n  \n}\n\n\n})\n\n\n\n\n\n\nErrors\n\n\nIf any of the database queries fail, the successful queries will still be returned in their respective key names. On failed queries, the result will also contain an \nerrors\n key, containing a table array describing any errors.\n\n\nExample Response\n\n\n{\n  errors = {\n    {\n      db = products\n      error = Table 'products.parts' doesn't exist\n      index = 2\n      status = 1146\n    }\n  },\n  locs = {\n    {\n      id = 1\n      latitude = 80\n      longitude = 200\n      user_id = \"d23b8738-4d28-41ed-a967-98e83e855a38\"\n    },\n    {\n      id = 3\n      latitude = -64\n      longitude = 200\n      user_id = \"d23b8738-4d28-41ed-a967-98e83e855a39\"\n    }\n  },\n  store = {\n    name = \"Happy Toys\",\n    city = \"San Diego\"\n  }\n}\n\n\n\n\n\nselectCount\n\n\nGet a record count based on passed in query.\n\n\ncore\n.\nmysql\n.\nselectCount\n(\ndb_name\n,\n \ncount_tbl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the count query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ncount_tbl\n\n\nThe count table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nCount Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nThe WHERE clause to apply.\n\n\nString\n or \nTable\n\n\nN\n\n\n\n\n\n\ncolumn\n\n\nThe column to use as the counting key. Defaults to \"id\".\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nIf the \nwhere\n key is not included, the result is the total records in the provided table.\n\n\nReturns\n\n\nThe amount of records counted as a \nnumber\n, or \nnil\n, error, and error code.\n\n\nExample\n\n\nlocal\n \ncount\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nselectCount\n(\n\"products\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"toys\"\n,\n\n  \nwhere\n \n=\n \n{\n \ncolor\n \n=\n \n\"Red\"\n \n}\n\n\n})\n\n\n\ncore\n.\nlog\n(\n\"Total red toys \"\n..\ncount\n)\n\n\n\n\n\n\ninsert\n\n\nInsert a single record into a database table.\n\n\ncore\n.\nmysql\n.\ninsert\n(\ndb_name\n,\n \ninsert_tbl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ninsert_tbl\n\n\nThe insert table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nInsert Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA table of \ncolumn = value\n pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nReturns\n\n\nThe record id as a \nnumber\n, or \nnil\n and an error.\n\n\nExample\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ninsert\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \nvalues\n \n=\n \n{\n\n    \nscore\n \n=\n \n200\n,\n \n    \nplayer\n \n=\n \n\"Sandy\"\n\n  \n}\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains the id for the inserted record\n\n  \ncore\n.\nlog\n(\nresult\n)\n\n\nend\n\n\n\n\n\n\ninsertMany\n\n\nInsert records into a single table of a database.\n\n\ncore\n.\nmysql\n.\ninsertMany\n(\ndb_name\n,\n \ninsert_tbl\n)\n\n\n\n\n\n\n\n\nTip\n\n\nThis method offers optimization when used on the client-side. See the \ninsertMany\n client-side method.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ninsert_tbl\n\n\nThe insert table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nInsert Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nrecords\n\n\nA table array of \nvalues\n tables. See the \ninsert\n method above.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nReturns\n\n\nAn indexed table array of tables containing either an \nid\n key; with the id of the newly created record, or an \nerror\n key; containing the error string, or \nnil\n and an error.\n\n\nThe result table is indexed the same order as the records table that was supplied to the call.\n\n\nExample\n\n\nlocal\n \nrecords_arr\n \n=\n \n{\n\n  \n{\n\n    \nname\n \n=\n \n\"Car\"\n,\n\n    \ncolor\n \n=\n \n\"red\"\n\n  \n},\n\n  \n{\n\n    \nname\n \n=\n \n\"Teddy Bear\"\n,\n\n    \ncolor\n \n=\n \n\"brown\"\n\n  \n}\n\n\n}\n\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ninsertMany\n(\n\"products\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"toys\"\n,\n\n  \nrecords\n \n=\n \nrecords_arr\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nlocal\n \nentry\n \n=\n \nresult\n[\ni\n]\n\n\n    \nif\n \nentry\n.\nerror\n \nthen\n\n      \ncore\n.\nlog\n(\n\"error in insert entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n    \nelse\n\n      \ncore\n.\nlog\n(\n\"inserted record with id: \"\n..\nentry\n.\nid\n..\n\" for entry #\"\n..\ni\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\ninsertBatch\n\n\nInsert records into multiple tables of a database.\n\n\ncore\n.\nmysql\n.\ninsertBatch\n(\ndb_name\n,\n \nbatch_tbl\n)\n\n\n\n\n\n\n\n\nTip\n\n\nThis method offers optimization when used on the client-side. See the \ninsertBatch\n client-side method.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbatch_tbl\n\n\nA table array of tables with the \ntbl\n and \nvalues\n keys from the \ninsert\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nReturns\n\n\nAn indexed table array of tables containing either an \nid\n key; with the id of the newly created record, or an \nerror\n key; containing the error string, or \nnil\n and an error.\n\n\nThe result table is indexed the same order as the batch table that was supplied to the call.\n\n\nExample\n\n\nlocal\n \nbatch_insert\n \n=\n \n{\n\n  \n{\n\n    \ntbl\n \n=\n \n\"shoes\"\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Adidas\"\n,\n\n      \nsize\n \n=\n \n12\n\n    \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Car\"\n,\n\n      \nage_group\n \n=\n \n10\n\n    \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Bear\"\n,\n\n      \nage_group\n \n=\n \n5\n,\n\n      \ncolor\n \n=\n \n\"Brown\"\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ninsertBatch\n(\n\"products\"\n,\n \nbatch_insert\n)\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nlocal\n \nentry\n \n=\n \nresult\n[\ni\n]\n\n\n    \nif\n \nentry\n.\nerror\n \nthen\n\n      \ncore\n.\nlog\n(\n\"error in insert entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n    \nelse\n\n      \ncore\n.\nlog\n(\n\"inserted record with id: \"\n..\nentry\n.\nid\n..\n\" for entry #\"\n..\ni\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nupdate\n\n\nUpdate record(s) in a database table.\n\n\ncore\n.\nmysql\n.\nupdate\n(\ndb_name\n,\n \nupdate_tbl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nupdate_tbl\n\n\nThe update table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nUpdate Table Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA table of \ncolumn = value\n pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nWhere the columns should be updated.\n\n\nString\n or \nTable\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nReturns\n\n\nThe \nnumber\n of records updated, or \nnil\n and an error.\n\n\nExample\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nupdate\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \nvalues\n \n=\n \n{\n\n    \nscore\n \n=\n \n230\n\n  \n},\n\n  \nwhere\n \n=\n \n{\n \nid\n \n=\n \n20\n \n}\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains the number of records updated\n\n  \ncore\n.\nlog\n(\nresult\n)\n\n\nend\n\n\n\n\n\n\nupdateMany\n\n\nUpdate records in a single table of a database.\n\n\ncore\n.\nmysql\n.\nupdateMany\n(\ndb_name\n,\n \nupdate_tbl\n)\n\n\n\n\n\n\n\n\nTip\n\n\nThis method offers optimization when used on the client-side. See the \nupdateMany\n client-side method.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nupdate_tbl\n\n\nThe update table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nUpdate Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nupdate\n\n\nA table array of tables with the \nvalues\n and \nwhere\n keys from the \nupdate\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nReturns\n\n\nAn indexed table array of tables containing either an \nupdated\n key; with the number of records updated, or an \nerror\n key; containing the error string, or \nnil\n and an error.\n\n\nThe result table is indexed the same order as the update table that was supplied to the call.\n\n\nExample\n\n\nlocal\n \nupdate_arr\n \n=\n \n{\n\n  \n{\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Nike\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nname\n=\n\"Adidas\"\n \n}\n\n  \n},\n\n  \n{\n\n    \nvalues\n \n=\n \n{\n\n      \ncost\n \n=\n \n\"1.99\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n3\n \n}\n\n  \n}\n\n\n}\n\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nupdateMany\n(\n\"products\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"shoes\"\n,\n\n  \nupdate\n \n=\n \nupdate_arr\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nlocal\n \nentry\n \n=\n \nresult\n[\ni\n]\n\n\n    \nif\n \nentry\n.\nerror\n \nthen\n\n      \ncore\n.\nlog\n(\n\"error in update entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n    \nelse\n\n      \ncore\n.\nlog\n(\n\"updated \"\n..\nentry\n.\nupdated\n..\n\" records for entry #\"\n..\ni\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nupdateBatch\n\n\nUpdate records in multiple tables of a database.\n\n\ncore\n.\nmysql\n.\nupdateBatch\n(\ndb_name\n,\n \nbatch_tbl\n)\n\n\n\n\n\n\n\n\nTip\n\n\nThis method offers optimization when used on the client-side. See the \nupdateBatch\n client-side method.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbatch_tbl\n\n\nA table array of tables with the \ntbl\n, \nvalues\n and \nwhere\n keys from the \nupdate\n method\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nReturns\n\n\nAn indexed table array of tables containing either an \nupdated\n key; with the number of records updated, or an \nerror\n key; containing the error string, or \nnil\n and an error.\n\n\nThe result table is indexed the same order as the batch table that was supplied to the call.\n\n\nExample\n\n\nlocal\n \nbatch_update\n \n=\n \n{\n\n  \n{\n\n    \ntbl\n \n=\n \n\"shoes\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Adidas\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n3\n \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Raggedy Ann\"\n,\n\n      \ngender\n \n=\n \n\"female\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nname\n \n=\n \n\"Raggedy Andy\"\n \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \ncompany\n \n=\n \n\"Tonka\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n4\n \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nupdateBatch\n(\n\"products\"\n,\n \nbatch_update\n)\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nlocal\n \nentry\n \n=\n \nresult\n[\ni\n]\n\n\n    \nif\n \nentry\n.\nerror\n \nthen\n\n      \ncore\n.\nlog\n(\n\"error in update entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n    \nelse\n\n      \ncore\n.\nlog\n(\n\"updated \"\n..\nentry\n.\nupdated\n..\n\" records for entry #\"\n..\ni\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\ndelete\n\n\nDelete record(s) from a database table.\n\n\ncore\n.\nmysql\n.\ndelete\n(\ndb_name\n,\n \ndelete_tbl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndelete_tbl\n\n\nThe delete table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nDelete Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nA WHERE clause to limit deletions to.\n\n\nString\n or \nTable\n\n\nN\n\n\n\n\n\n\nforce\n\n\nDisables safety check for missing \nwhere\n key.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\n\n\nForce Delete\n\n\nTo run the delete command without a \nwhere\n clause, you must set \nforce\n to true.\n\n\n\n\nReturns\n\n\nThe \nnumber\n of records deleted, or \nnil\n and an error.\n\n\nExample\n\n\nDelete using a \nwhere\n clause\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ndelete\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \nwhere\n \n=\n \n\"`score` < 10\"\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains the number of records deleted\n\n  \ncore\n.\nlog\n(\nresult\n)\n\n\nend\n\n\n\n\n\n\nDelete \nall\n records from the table\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ndelete\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \nforce\n \n=\n \ntrue\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains the number of records deleted\n\n  \ncore\n.\nlog\n(\nresult\n)\n\n\nend\n\n\n\n\n\n\ndeleteMany\n\n\nDelete records from a single table of a database.\n\n\ncore\n.\nmysql\n.\ndeleteMany\n(\ndb_name\n,\n \ndelete_tbl\n)\n\n\n\n\n\n\n\n\nTip\n\n\nThis method offers optimization when used on the client-side. See the \ndeleteMany\n client-side method.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndelete_tbl\n\n\nThe delete table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nDelete Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndelete\n\n\nA table array of tables with the \nwhere\n key from the \ndelete\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nAn indexed table array of tables containing either a \ndeleted\n key; with the number of records deleted, or an \nerror\n key; containing the error string, or \nnil\n and an error.\n\n\nThe result table is indexed the same order as the update table that was supplied to the call.\n\n\nExample\n\n\nlocal\n \ndelete_arr\n \n=\n \n{\n\n  \n{\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n34\n \n}\n\n  \n},\n\n  \n{\n\n    \nwhere\n \n=\n \n{\n \ncolor\n=\n \n\"Red\"\n \n}\n\n  \n}\n\n\n}\n\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ndeleteMany\n(\n\"products\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"shoes\"\n,\n\n  \ndelete\n \n=\n \ndelete_arr\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nlocal\n \nentry\n \n=\n \nresult\n[\ni\n]\n\n\n    \nif\n \nentry\n.\nerror\n \nthen\n\n      \ncore\n.\nlog\n(\n\"error in delete entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n    \nelse\n\n      \ncore\n.\nlog\n(\n\"deleted \"\n..\nentry\n.\ndeleted\n..\n\" records for entry #\"\n..\ni\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\ndeleteBatch\n\n\nDelete records from multiple tables of a database.\n\n\ncore\n.\nmysql\n.\ndeleteBatch\n(\ndb_name\n,\n \nbatch_tbl\n)\n\n\n\n\n\n\n\n\nTip\n\n\nThis method offers optimization when used on the client-side. See the \ndeleteBatch\n client-side method.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbatch_tbl\n\n\nA table array of tables with the \ntbl\n and \nwhere\n keys from the \ndelete\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nAn indexed table array of tables containing either a \ndeleted\n key; with the number of records deleted, or an \nerror\n key; containing the error string, or \nnil\n and an error.\n\n\nThe result table is indexed the same order as the batch table that was supplied to the call.\n\n\nExample\n\n\nlocal\n \nbatch_delete\n \n=\n \n{\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n2\n \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"shoes\"\n,\n\n    \nwhere\n \n=\n \n{\n \nkind\n \n=\n \n\"running\"\n \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ndeleteBatch\n(\n\"products\"\n,\n \nbatch_delete\n)\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nlocal\n \nentry\n \n=\n \nresult\n[\ni\n]\n\n\n    \nif\n \nentry\n.\nerror\n \nthen\n\n      \ncore\n.\nlog\n(\n\"error in delete entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n    \nelse\n\n      \ncore\n.\nlog\n(\n\"deleted \"\n..\nentry\n.\ndeleted\n..\n\" records for entry #\"\n..\ni\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nUtilities\n\n\nescape\n\n\nEscape a string value to be sql safe.\n\n\ncore\n.\nmysql\n.\nescape\n(\nunescaped_str\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nunescaped_str\n\n\nThe \nstring\n value to escape.\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nA sql safe escaped \nstring\n.\n\n\nExample\n\n\nlocal\n \nstr\n \n=\n \ncore\n.\nmysql\n.\nescape\n(\n\"Eat at Joe's\"\n)\n\n\n\n\n\n\n\n\nEscaping Values\n\n\nThe returned value is enclosed in single quotes. Do not wrap the value with additional quotes or it may cause problems with your query. \nMany EZ Query methods automatically use mysql.escape on values, be sure to check the documentation for each method.\n\n\n\n\nescapeAll\n\n\nEscape all string values in a table array to be sql safe.\n\n\ncore\n.\nmysql\n.\nescapeAll\n(\ntbl_values\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\ntbl_values\n\n\nA \ntable\n array of mixed value types. String values will be escaped.\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nReturns a \ntable\n array of the escaped string values.\n\n\nExample\n\n\nlocal\n \nvalues\n \n=\n \n{\n\n  \n'A special \"thing\" here.'\n,\n\n  \n24\n,\n\n  \n\"Joe's Place\"\n\n\n}\n\n\n\nvalues\n \n=\n \ncore\n.\nmysql\n.\nescapeAll\n(\n \nvalues\n \n)\n\n\n\n\n\n\ntimestamp\n\n\nMySQL compatible UTC based timestamp.\n\n\ncore\n.\nmysql\n.\ntimestamp\n([\nseconds\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nUNIX timestamp.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nUTC timestamp based on provided UNIX time. Otherwise, returns current UTC timestamp.\n\n\nlocalTimestamp\n\n\nMySQL compatible timestamp based on the local server time.\n\n\ncore\n.\nmysql\n.\nlocalTimestamp\n([\nseconds\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nUNIX timestamp.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nLocal timestamp based on provided UNIX time. Otherwise, returns current local timestamp.\n\n\nparseTimestamp\n\n\nA utility method to convert a MySQL timestamp to Unix time.\n\n\ncore\n.\nmysql\n.\nparseTimestamp\n(\n \nmysql_ts\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmysql_ts\n\n\nA MySQL timestamp in the form of \nXXXX-XX-XX XX:XX:XX\n.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nUnix timestamp based on provided MySQL timestamp.\n\n\ndate\n\n\nMySQL compatible UTC based date.\n\n\ncore\n.\nmysql\n.\ndate\n([\nseconds\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nUNIX timestamp.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nUTC date based on provided UNIX time. Otherwise, returns current UTC date.\n\n\nlocalDate\n\n\nMySQL compatible date based on the local server date.\n\n\ncore\n.\nmysql\n.\nlocalDate\n([\nseconds\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nUNIX timestamp.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nLocal date based on provided UNIX time. Otherwise, returns current local date.\n\n\nlogQueries\n\n\nA special method that will enable the logging of the query strings output by MySQL methods (or other methods that use a database) until it is toggled off.\n\n\ncore\n.\nmysql\n.\nlogQueries\n(\nstate\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nstate\n\n\nSet the query logging on or off. Default is \ntrue\n.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThis should only be used for debugging purposes or you'll end up with a lot of log entries.\n\n\n\n\nExample\n\n\ncore\n.\nmysql\n.\nlogQueries\n()\n \n--start logging queries\n\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nmysql\n.\nselect\n(\n\"products\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"toys\"\n,\n\n  \nwhere\n \n{\n \nid\n \n=\n \n20\n \n}\n\n\n})\n\n\n\n-- The following output will be added to the Coronium log file\n\n\n-- SELECT * FROM `toys` WHERE `id`=20;\n\n\n\ncore\n.\nmysql\n.\nlogQueries\n(\nfalse\n)\n \n--stop logging queries\n\n\n--Any MySQL methods run after will not be written to the log.\n\n\n\n\n\n\nMySQL NULL Type\n\n\nWhen using the EZ Query methods, you can set a column value to a valid MySQL \nNULL\n type by passing a string value set to 'NULL'. This only works if the column allows \nNULL\n values.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nmysql\n.\nupdate\n(\n\"products\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"toys\"\n,\n\n  \nvalues\n \n=\n \n{\n\n    \ncolor\n \n=\n \n'NULL'\n\n  \n},\n\n  \nwhere\n \n=\n \n{\n \ncolor\n \n=\n \n\"red\"\n \n}\n\n\n})\n\n\n\n\n\n\nThe WHERE Key\n\n\nMany of the MySQL (and other) modules use a \nwhere\n key to specify the \"WHERE\" clause for a database query. Depending on what data type and structure you provide this key, a couple different things can happen automagically.\n\n\nString Based\n\n\nWhen passing a string to the \nwhere\n key, you are on your own to create a valid MySQL query string. The query string is interpreted as-is. \n\n\nYou never include the literal \"WHERE\" in the \nwhere\n key value.\n\n\nExamples\n\n\nwhere = \"`color`='Red'\"\n\n\n\n\n\nwhere = \"`kind`='Truck' AND `color`='Red'\"\n\n\n\n\n\nwhere = \"`kind`='Truck' OR `kind`='Car'\"\n\n\n\n\n\nTable Based\n\n\nThe advantage of using a table based \nwhere\n key is that all of the values are properly formatted to make a valid and type-safe MySQL query.\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nTo reproduce the three string based examples above as table based:\n\n\nwhere\n \n=\n \n{\n \ncolor\n \n=\n \n\"Red\"\n \n}\n\n\n\n\n\n\nwhere\n \n=\n \n{\n \nkind\n \n=\n \n\"Truck\"\n,\n \ncolor\n \n=\n \n\"Red\"\n \n}\n \n--AND\n\n\n\n\n\n\nwhere\n \n=\n \n{\n \nkind\n \n=\n \n{\n \n\"Truck\"\n,\n \n\"Car\"\n \n}\n \n}\n \n--OR\n\n\n\n\n\n\nOrdered Table Queries\n\n\nWith \"ordered\" query tables you can replicate some more complex queries:\n\n\nwhere = \"`color='Red' AND `model`='Ford' AND kind='Truck' OR kind='Car'\"\n\n\n\n\n\nTo reproduce the query above, put the entries in a table array (order matters):\n\n\nwhere\n \n=\n \n{\n\n  \n{\n \ncolor\n \n=\n \n\"Red\"\n,\n \nmodel\n \n=\n \n\"Ford\"\n \n},\n\n  \n{\n \nkind\n \n=\n \n{\n \n\"Truck\"\n,\n \n\"Car\"\n \n}\n \n}\n\n\n}\n\n\n\n\n\n\nFor an all OR query like:\n\n\nwhere = \"`color='Red' OR `model`='Ford' OR kind='Truck' OR kind='Car'\"\n\n\n\n\n\nYou can use an ordered table with a single entry:\n\n\nwhere\n \n=\n \n{\n\n  \n{\n \ncolor\n \n=\n \n{\n \n\"Red\"\n \n},\n \nmodel\n \n=\n \n{\n \n\"Ford\"\n \n},\n \nkind\n \n=\n \n{\n \n\"Truck\"\n,\n \n\"Car\"\n \n}\n \n}\n\n\n}\n\n\n\n\n\n\nAt this time multiple entries in an \"ordered\" \nwhere\n table are combined using 'AND', which may cause problems with more complicated queries, so you'll need to fall back to the string method.\n\n\nTable type queries also do not support conditionals, so the following cannot be replicated with a table based query:\n\n\nwhere = \"`score` > 100\"\n\n\n\n\n\nAdvanced Methods\n\n\nWhile the MySQL module methods above are fairly performant, they do automatically manage the database connections, and create the raw query strings, which creates a slight hit on speed.\n\n\nBy managing the database connection directly you can get the best performance from your queries, especially if you are performing multiple queries in your API methods.\n\n\n\n\nClosing Connections\n\n\nAlways use \ndbClose\n at the end of your session, or you'll leave a connection open, using up resources.\n\n\n\n\ndbConnect\n\n\nCreate a new connection to a database.\n\n\ncore\n.\nmysql\n.\ndbConnect\n(\n \ndb_name\n \n)\n\n\n\n\n\n\nReturns\n\n\nA new database connection object, or \nnil\n, and an error.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to connect to. You can also use a connection table. See the \nConnection Table\n section in \nRemote Databases\n.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ndb_conn\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ndbConnect\n(\n\"products\"\n)\n\n\n\n\n\n\ndbQuery\n\n\nPerform a query using the database connection (see \ndbConnect\n). You can, and should, run multiple query calls using the same database connection.\n\n\ncore\n.\nmysql\n.\ndbQuery\n(\n \ndb_connection\n,\n \nquery_str\n \n)\n\n\n\n\n\n\nReturns\n\n\nThe query result, or \nnil\n, and an error. See the \nResult Values\n section of the \nquery\n method.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_connection\n\n\nThe database connection returned from \ndbConnect\n.\n\n\nObject\n\n\nY\n\n\n\n\n\n\nquery_str\n\n\nThe MySQL query to send to the database.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ndbQuery\n(\ndb_conn\n,\n \n\"SELECT * FROM `products`;\"\n)\n\n\n\n\n\n\ndbClose\n\n\nClose a previous database connection opened with \ndbConnect\n.\n\n\ncore\n.\nmysql\n.\ndbClose\n(\n \ndb_connection\n \n)\n\n\n\n\n\n\nReturns\n\n\nA truthy value on success, or \nnil\n, and an error.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_connection\n\n\nThe database connection returned from \ndbConnect\n.\n\n\nObject\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nok\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ndbClose\n(\ndb_conn\n)\n\n\n\n\n\n\nMySQL Timeout\n\n\nFor large queries you may need to adjust the timeout for the call. You can do this by passing a connection table in place of the database name and include the \ntimeout\n parameter in milliseconds. The default is 2000 (2 seconds).\n\n\nExample\n\n\nlocal\n \nquery\n \n=\n \ncore\n.\nsf\n(\n\"SELECT * FROM `orders` LIMIT %d\"\n,\n \n100\n)\n\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n\n  \ndatabase\n \n=\n \n\"clients\"\n,\n\n  \ntimeout\n \n=\n \n10000\n \n--10 secs\n\n\n}\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nquery\n(\nconn_tbl\n,\n \nquery\n)\n\n\n\n\n\n\n\n\nEZ Query Methods\n\n\nYou can do the same for the \nEZ Query\n methods. Replace the database name with a connection table as shown above.\n\n\n\n\nRemote Databases\n\n\nYou can connect to remote MySQL databases by using a connection table in place of the database name in the \ncore.mysql.query\n and EZ Query methods.\n\n\nConnection Table\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndatabase\n\n\nThe remote database name.\n\n\nString\n\n\nY\n\n\n\n\n\n\nuser\n\n\nThe remote database user.\n\n\nString\n\n\nY\n\n\n\n\n\n\npassword\n\n\nThe remote database password\n\n\nString\n\n\nY\n\n\n\n\n\n\nhost\n\n\nThe remote database host address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nport\n\n\nThe remote database port. Default: 3306\n\n\nNumber\n\n\nN\n\n\n\n\n\n\ntimeout\n\n\nThe timeout in milliseconds for the query. Default: 2000\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n\n  \ndatabase\n \n=\n \n\"clients\"\n,\n\n  \nuser\n \n=\n \n\"dbuser\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n,\n\n  \nhost\n \n=\n \n\"my.sql.host\"\n\n\n}\n\n\n\nlocal\n \nresults\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nquery\n(\nconn_tbl\n,\n \nquery_str\n)\n\n\n\n\n\n\nAdministration\n\n\nYou can and should manage your MySQL databases using a standalone tool. Below are some free resources for managing MySQL databases.\n\n\n\n\nScreencast Available\n\n\nLearn more about database administration in a screencast format by \nClicking here\n.\n\n\n\n\n\n\nSequelPro\n (OSX)\n\n\nHeidiSQL\n (Windows)\n\n\n\n\nTo connect to the MySQL database, use the host address of the server, and the password that was set when installing Coronium Core.\n\n\nRemote Access\n\n\nBy default, a fresh Coronium Core installation allows remote access to the MySQL database with a password so that you can use client side tools to edit your databases.\n\n\nWhile this is convenient to the developer, it is not particularly the \nmost\n secure way to run the database. Instead you should only activate remote access while you work on the database, and then deactivate it when you are done. \n\n\n DigitalOcean\n\n\nTo activate/deactivate remote MySQL access use the \nmysql-remote\n tool by logging in with the \ncoronium\n user and entering one of the following on the command line:\n\n\nActivate remote access\n\n\nsudo mysql-remote on\n\n\n\n\n\nDeactivate remote access\n\n\nsudo mysql-remote off\n\n\n\n\n\nIf you are having issues connecting with your MySQL client, make sure that you have remote access in an active state.\n\n\n Amazon EC2\n\n\nDisable/enable port \n3306\n as needed in your instance security group. For more information on editing your security group \nclick here\n.\n\n\nConfiguration File\n\n\nYou can adjust the various MySQL server configuration settings in the \ncoronium_mysql.cnf\n file. The file is located at:\n\n\n/etc/mysql/coronium.conf.d/coronium_mysql.cnf\n\n\n\n\n\n\n\nConfiguration Changes\n\n\nChanges to the configuration file can have adverse effects, do so at your own risk. See \nMySQL Server System Variables\n for the available configuration options.\n\n\n\n\nThis file can be edited by using the \nnano\n utility on the server:\n\n\nsudo nano /etc/mysql/coronium.conf.d/coronium_mysql.cnf\n\n\n\n\n\nUse the arrow keys on your keyboard to move the cursor. When your updates are complete, use \nctrl-x\n and then press \ny\n to save the file.\n\n\nYou will need to restart the MySQL server daemon for the changes to take effect:\n\n\nsudo monit restart mysqld\n\n\n\n\n\nCheck the Coronium server status to make sure that MySQL is running:\n\n\ncoronium\n \nstatus\n\n\n\n\n\n\nViewing Error Log\n\n\nThe MySQL server error log can be viewed using:\n\n\nsudo tail -f /var/log/mysql/error.log\n\n\n\n\n\nUse \nctrl-c\n to exit.\n\n\nPassword Update\n\n\nTo change your MySQL password log in your Coronium Core server as and run:\n\n\nsudo mysql-updatepw",
            "title": "MySQL"
        },
        {
            "location": "/server/modules/mysql/#query-string",
            "text": "",
            "title": "Query String"
        },
        {
            "location": "/server/modules/mysql/#query",
            "text": "core . mysql . query (   db_name ,   query_str   )  --OR  core . mysql . q (   db_name ,   query_str   )   Parameters     Name  Description  Type  Required      db_name  The database name to issue commands against.  String  Y    query_str  The MySQL query to send to the database.  String  Y      Remote Databases  To connect to remote databases see  Remote Databases .   Result Values  The following outlines the  result  values returned with each query type.  SELECT  A  table  array of records. If no records are found, returns an empty table.  INSERT  A  number  representing the insertion id.  UPDATE  A  number  indicating the amount of updated rows.  DELETE  A  number  indicating the amount of deleted rows.   Other Commands  Any other commands will be returned as  table . It is recommended that you manage your databases using an external tool. See  Administration  below.    Tip  Use the  core.sf  (string format) utility method to make queries easier to build, and type safe.   Select Example  local   query   =   core . sf ( \"SELECT * FROM orders LIMIT %d\" ,   100 )  local   result ,   err   =   core . mysql . query ( \"clients\" ,   query )  if   not   result   then \n   core . log ( err )  end  local   record  for   i = 1 ,   # result   do \n   record   =   result [ i ]   --a record as a table \n   core . log ( record . id )  end   Insert Example  local   columns   =   \"name, age, email\"  local   values   =   { \"Jimmy\" ,   22 ,   \"me@somemail.com\" }  --escape string values  values   =   core . mysql . escapeAll ( values )  local   query   =   core . sf ( \"INSERT INTO users (%s) VALUES (%s, %d, %s);\" ,  \n   columns ,  \n   unpack ( values )  )  local   result ,   err   =   core . mysql . query ( \"clients\" ,   query )  if   not   result   then \n   core . log ( err )  end  core . log ( \"inserted id is: \" ,   result )",
            "title": "query"
        },
        {
            "location": "/server/modules/mysql/#ez-query-methods",
            "text": "EZ query methods provide an alternative way to construct common query types. For more complex queries, use the  core.mysql.query  method above.   Client-Side API  You can access the EZ query methods directly using the client-side  MySQL  module.",
            "title": "EZ Query Methods"
        },
        {
            "location": "/server/modules/mysql/#select",
            "text": "Select multiple records from a database table.  core . mysql . select ( db_name ,   select_tbl )   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    select_tbl  The select table options (see below).  Table  Y     Select Table Keys     Name  Description  Type  Required      tbl  Name of the table to operate on.  String  Y    columns  Array of columns to select as strings.  Table  N    where  Any additional WHERE clause to apply.  String  or  Table  N    orderby  The sorting attributes. See  Orderby  below.  Table  N    limit  Limit the records returned. See  Limit  below.  Number  or  Table  N    distinct  Filter out duplicate column values. Default: false  Boolean  N     Orderby  The  orderby  key should be a table filled with  column = direction  pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order. See example 2 below.  Limit  To limit the rows returned, supply a  number  value to the  limit  key. To  offset  the limit, supply a  table  array of  number  values. For example, to return rows 6-15:  limit = {5, 10} .  Returns  A  table  array of records, or  nil  and an error.  Example 1  -- Select all records from the 'scores' table  local   result ,   err   =   core . mysql . select ( \"leaderboard\" ,   { \n   tbl   =   \"scores\"  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains a table array of records \n   local   record \n   for   i = 1 ,   # result   do \n     record   =   result [ i ] \n     core . log ( record . player .. ' scored ' .. record . score ) \n   end  end   Example 2  -- Select 10 scores greater than 10, in descending order  local   result ,   err   =   core . mysql . select ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   columns   =   {   \"score\"   }, \n   where   =   \"`score` > 10\" , \n   limit   =   10 , \n   orderby   =   { \n     score   =   \"DESC\" \n   }  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains a table array of records \n   local   record \n   for   i = 1 ,   # result   do \n     record   =   result [ i ] \n     core . log ( record . player .. ' scored ' .. record . score ) \n   end  end",
            "title": "select"
        },
        {
            "location": "/server/modules/mysql/#selectone",
            "text": "Select and return a single record from a database table.  core . mysql . selectOne ( db_name ,   select_tbl )   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    select_tbl  The select table options (see below).  Table  Y     Select Table Keys     Name  Description  Type  Required      tbl  Name of the table to operate on.  String  Y    where  The WHERE clause to apply.  String  or  Table  Y    columns  Array of columns to select as strings.  Table  N     Returns  A single record as a  table , or  nil  and an error.   Special Response  Unlike the  select  method, the result is returned as a single record as opposed to an array of records.   Example  local   record ,   err   =   core . mysql . selectOne ( \"app\" ,   { \n   tbl   =   \"users\" , \n   where   =   {   user_id   =   user_id   }, \n   columns   =   {   \"name\"   }  })",
            "title": "selectOne"
        },
        {
            "location": "/server/modules/mysql/#selectbatch",
            "text": "Query multiple tables of a database and return the individual results in a keyed response.  core . mysql . selectBatch ( db_name ,   batch_tbl )    Tip  This method offers optimization when used on the client-side. See the  selectBatch  client-side method.   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    batch_tbl  A table array of EZ Query select tables,  excluding the db key . (see  select ). Each select table must also include a  key  property for the result table (see example below).  Table  Y      Special Response  If a  limit  key is set to 1, the results will be a single table record, and not a table array. See  selectOne .   Returns  A keyed  table  with the results of each select query as a table array of records. If  limit  in any of the query entries is set to 1, then a single table with the record data is returned (not an array).  Example  local   batch_select   =   { \n   { \n     tbl   =   \"products\" , \n     where   =   {   type   =   'Bike'   }, \n     key   =   \"bikes\" \n   }, \n   { \n     tbl   =   \"products\" , \n     where   =   {   type   =   'Shoes'   }, \n     key   =   \"shoes\" \n   }, \n   { \n     tbl   =   \"locations\" , \n     where   =   {   name   =   \"Happy Toys\"   }, \n     limit   =   1 ,   --Return as non-array record \n     key   =   \"store\" \n   }  }  local   result ,   err   =   core . mysql . selectBatch ( \"store\" ,   batch_select )  if   not   result   then \n   core . log ( err )  else \n   core . log ( result . bikes )   --Array of \"Bike\" records \n   core . log ( result . shoes )   --Array of \"Shoe\" records \n   core . log ( result . store )   --Table \"Store\" record  end   Query Errors  If any of the queries in the batch result in an error, the results key for that particular query will contain an  error  key. Best practice is to check for this key before accessing the results.  -- Assuming batch call as shown in the example above  if   not   result   then \n   core . log ( err )  else \n   if   result . bikes . error   then \n     --an error occurred on this particular query \n     core . log ( result . bikes . error ) \n   else \n     --loop over the records \n     for   i = 1 ,   # result . bikes   do \n       core . log ( result . bikes [ i ]. name ) \n     end \n   end  end",
            "title": "selectBatch"
        },
        {
            "location": "/server/modules/mysql/#selectmerge",
            "text": "Select from multiple databases and tables and return the results in a keyed table.  core . mysql . selectMerge ( merge_tbl )    Tip  This method offers optimization when used on the client-side. See the  selectMerge  client-side method.   Parameters     Name  Description  Type  Required      merge_tbl  A table array of EZ Query select tables, with an additonal  db  key. (see  select ). Each select table should also include a  key  property for the result table (see example below).  Table  Y     Returns  A key/value based table containing the  key  names assigned in the query tables. Each key section will contain a table array of returned records. If  limit  in any of the query entries is set to 1, then a single table with the record data is returned (not an array). See also  Errors  below.  Example  local   res ,   err ,   code   =   core . mysql . selectMerge ({ \n   { \n     db   =   \"locations\" , \n     tbl   =   \"spots\" , \n     key   =   \"locs\" \n   }, \n   { \n     db   =   \"products\" , \n     tbl   =   \"parts\" , \n     where   =   {   part_id   =   20   }, \n     key   =   \"part\" \n   }, \n   { \n     db   =   \"stores\" , \n     tbl   =   \"toy\" , \n     limit   =   1 ,   --Return as non-array record \n     where   =   {   name   =   \"Happy Toys\"   }, \n     key   =   \"store\" \n   }  })   Errors  If any of the database queries fail, the successful queries will still be returned in their respective key names. On failed queries, the result will also contain an  errors  key, containing a table array describing any errors.  Example Response  {\n  errors = {\n    {\n      db = products\n      error = Table 'products.parts' doesn't exist\n      index = 2\n      status = 1146\n    }\n  },\n  locs = {\n    {\n      id = 1\n      latitude = 80\n      longitude = 200\n      user_id = \"d23b8738-4d28-41ed-a967-98e83e855a38\"\n    },\n    {\n      id = 3\n      latitude = -64\n      longitude = 200\n      user_id = \"d23b8738-4d28-41ed-a967-98e83e855a39\"\n    }\n  },\n  store = {\n    name = \"Happy Toys\",\n    city = \"San Diego\"\n  }\n}",
            "title": "selectMerge"
        },
        {
            "location": "/server/modules/mysql/#selectcount",
            "text": "Get a record count based on passed in query.  core . mysql . selectCount ( db_name ,   count_tbl )   Parameters     Name  Description  Type  Required      db_name  The database to run the count query against.  String  Y    count_tbl  The count table options (see below).  Table  Y     Count Table Keys     Name  Description  Type  Required      tbl  Name of the table to operate on.  String  Y    where  The WHERE clause to apply.  String  or  Table  N    column  The column to use as the counting key. Defaults to \"id\".  String  N     If the  where  key is not included, the result is the total records in the provided table.  Returns  The amount of records counted as a  number , or  nil , error, and error code.  Example  local   count ,   err   =   core . mysql . selectCount ( \"products\" ,   { \n   tbl   =   \"toys\" , \n   where   =   {   color   =   \"Red\"   }  })  core . log ( \"Total red toys \" .. count )",
            "title": "selectCount"
        },
        {
            "location": "/server/modules/mysql/#insert",
            "text": "Insert a single record into a database table.  core . mysql . insert ( db_name ,   insert_tbl )   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    insert_tbl  The insert table options (see below).  Table  Y     Insert Table Keys     Name  Description  Type  Required      tbl  Name of the table to operate on.  String  Y    values  A table of  column = value  pairs.  Table  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Returns  The record id as a  number , or  nil  and an error.  Example  local   result ,   err   =   core . mysql . insert ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   values   =   { \n     score   =   200 ,  \n     player   =   \"Sandy\" \n   }  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains the id for the inserted record \n   core . log ( result )  end",
            "title": "insert"
        },
        {
            "location": "/server/modules/mysql/#insertmany",
            "text": "Insert records into a single table of a database.  core . mysql . insertMany ( db_name ,   insert_tbl )    Tip  This method offers optimization when used on the client-side. See the  insertMany  client-side method.   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    insert_tbl  The insert table options (see below).  Table  Y     Insert Table Keys     Name  Description  Type  Required      tbl  Name of the table to operate on.  String  Y    records  A table array of  values  tables. See the  insert  method above.  Table  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Returns  An indexed table array of tables containing either an  id  key; with the id of the newly created record, or an  error  key; containing the error string, or  nil  and an error.  The result table is indexed the same order as the records table that was supplied to the call.  Example  local   records_arr   =   { \n   { \n     name   =   \"Car\" , \n     color   =   \"red\" \n   }, \n   { \n     name   =   \"Teddy Bear\" , \n     color   =   \"brown\" \n   }  }  local   result ,   err   =   core . mysql . insertMany ( \"products\" ,   { \n   tbl   =   \"toys\" , \n   records   =   records_arr  })  if   not   result   then \n   core . log ( err )  else \n   for   i = 1 ,   # result   do \n     local   entry   =   result [ i ] \n\n     if   entry . error   then \n       core . log ( \"error in insert entry #\" .. i .. \": \" .. entry . error ) \n     else \n       core . log ( \"inserted record with id: \" .. entry . id .. \" for entry #\" .. i ) \n     end \n   end  end",
            "title": "insertMany"
        },
        {
            "location": "/server/modules/mysql/#insertbatch",
            "text": "Insert records into multiple tables of a database.  core . mysql . insertBatch ( db_name ,   batch_tbl )    Tip  This method offers optimization when used on the client-side. See the  insertBatch  client-side method.   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    batch_tbl  A table array of tables with the  tbl  and  values  keys from the  insert  method.  Table  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Returns  An indexed table array of tables containing either an  id  key; with the id of the newly created record, or an  error  key; containing the error string, or  nil  and an error.  The result table is indexed the same order as the batch table that was supplied to the call.  Example  local   batch_insert   =   { \n   { \n     tbl   =   \"shoes\" \n     values   =   { \n       name   =   \"Adidas\" , \n       size   =   12 \n     } \n   }, \n   { \n     tbl   =   \"toys\" , \n     values   =   { \n       name   =   \"Car\" , \n       age_group   =   10 \n     } \n   }, \n   { \n     tbl   =   \"toys\" , \n     values   =   { \n       name   =   \"Bear\" , \n       age_group   =   5 , \n       color   =   \"Brown\" \n     } \n   }  }  local   result ,   err   =   core . mysql . insertBatch ( \"products\" ,   batch_insert )  if   not   result   then \n   core . log ( err )  else \n   for   i = 1 ,   # result   do \n     local   entry   =   result [ i ] \n\n     if   entry . error   then \n       core . log ( \"error in insert entry #\" .. i .. \": \" .. entry . error ) \n     else \n       core . log ( \"inserted record with id: \" .. entry . id .. \" for entry #\" .. i ) \n     end \n   end  end",
            "title": "insertBatch"
        },
        {
            "location": "/server/modules/mysql/#update",
            "text": "Update record(s) in a database table.  core . mysql . update ( db_name ,   update_tbl )   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    update_tbl  The update table options (see below).  Table  Y     Update Table Parameters     Name  Description  Type  Required      tbl  The name of the table to operate on.  String  Y    values  A table of  column = value  pairs.  Table  Y    where  Where the columns should be updated.  String  or  Table  N      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Returns  The  number  of records updated, or  nil  and an error.  Example  local   result ,   err   =   core . mysql . update ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   values   =   { \n     score   =   230 \n   }, \n   where   =   {   id   =   20   }  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains the number of records updated \n   core . log ( result )  end",
            "title": "update"
        },
        {
            "location": "/server/modules/mysql/#updatemany",
            "text": "Update records in a single table of a database.  core . mysql . updateMany ( db_name ,   update_tbl )    Tip  This method offers optimization when used on the client-side. See the  updateMany  client-side method.   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    update_tbl  The update table options (see below).  Table  Y     Update Table Keys     Name  Description  Type  Required      tbl  Name of the table to operate on.  String  Y    update  A table array of tables with the  values  and  where  keys from the  update  method.  Table  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Returns  An indexed table array of tables containing either an  updated  key; with the number of records updated, or an  error  key; containing the error string, or  nil  and an error.  The result table is indexed the same order as the update table that was supplied to the call.  Example  local   update_arr   =   { \n   { \n     values   =   { \n       name   =   \"Nike\" \n     }, \n     where   =   {   name = \"Adidas\"   } \n   }, \n   { \n     values   =   { \n       cost   =   \"1.99\" \n     }, \n     where   =   {   id   =   3   } \n   }  }  local   result ,   err   =   core . mysql . updateMany ( \"products\" ,   { \n   tbl   =   \"shoes\" , \n   update   =   update_arr  })  if   not   result   then \n   core . log ( err )  else \n   for   i = 1 ,   # result   do \n     local   entry   =   result [ i ] \n\n     if   entry . error   then \n       core . log ( \"error in update entry #\" .. i .. \": \" .. entry . error ) \n     else \n       core . log ( \"updated \" .. entry . updated .. \" records for entry #\" .. i ) \n     end \n   end  end",
            "title": "updateMany"
        },
        {
            "location": "/server/modules/mysql/#updatebatch",
            "text": "Update records in multiple tables of a database.  core . mysql . updateBatch ( db_name ,   batch_tbl )    Tip  This method offers optimization when used on the client-side. See the  updateBatch  client-side method.   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    batch_tbl  A table array of tables with the  tbl ,  values  and  where  keys from the  update  method  Table  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Returns  An indexed table array of tables containing either an  updated  key; with the number of records updated, or an  error  key; containing the error string, or  nil  and an error.  The result table is indexed the same order as the batch table that was supplied to the call.  Example  local   batch_update   =   { \n   { \n     tbl   =   \"shoes\" , \n     values   =   { \n       name   =   \"Adidas\" \n     }, \n     where   =   {   id   =   3   } \n   }, \n   { \n     tbl   =   \"toys\" , \n     values   =   { \n       name   =   \"Raggedy Ann\" , \n       gender   =   \"female\" \n     }, \n     where   =   {   name   =   \"Raggedy Andy\"   } \n   }, \n   { \n     tbl   =   \"toys\" , \n     values   =   { \n       company   =   \"Tonka\" \n     }, \n     where   =   {   id   =   4   } \n   }  }  local   result ,   err   =   core . mysql . updateBatch ( \"products\" ,   batch_update )  if   not   result   then \n   core . log ( err )  else \n   for   i = 1 ,   # result   do \n     local   entry   =   result [ i ] \n\n     if   entry . error   then \n       core . log ( \"error in update entry #\" .. i .. \": \" .. entry . error ) \n     else \n       core . log ( \"updated \" .. entry . updated .. \" records for entry #\" .. i ) \n     end \n   end  end",
            "title": "updateBatch"
        },
        {
            "location": "/server/modules/mysql/#delete",
            "text": "Delete record(s) from a database table.  core . mysql . delete ( db_name ,   delete_tbl )   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    delete_tbl  The delete table options (see below).  Table  Y     Delete Table Keys     Name  Description  Type  Required      tbl  The name of the table to operate on.  String  Y    where  A WHERE clause to limit deletions to.  String  or  Table  N    force  Disables safety check for missing  where  key.  Boolean  N      Force Delete  To run the delete command without a  where  clause, you must set  force  to true.   Returns  The  number  of records deleted, or  nil  and an error.  Example  Delete using a  where  clause  local   result ,   err   =   core . mysql . delete ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   where   =   \"`score` < 10\"  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains the number of records deleted \n   core . log ( result )  end   Delete  all  records from the table  local   result ,   err   =   core . mysql . delete ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   force   =   true  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains the number of records deleted \n   core . log ( result )  end",
            "title": "delete"
        },
        {
            "location": "/server/modules/mysql/#deletemany",
            "text": "Delete records from a single table of a database.  core . mysql . deleteMany ( db_name ,   delete_tbl )    Tip  This method offers optimization when used on the client-side. See the  deleteMany  client-side method.   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    delete_tbl  The delete table options (see below).  Table  Y     Delete Table Keys     Name  Description  Type  Required      tbl  Name of the table to operate on.  String  Y    delete  A table array of tables with the  where  key from the  delete  method.  Table  Y     Returns  An indexed table array of tables containing either a  deleted  key; with the number of records deleted, or an  error  key; containing the error string, or  nil  and an error.  The result table is indexed the same order as the update table that was supplied to the call.  Example  local   delete_arr   =   { \n   { \n     where   =   {   id   =   34   } \n   }, \n   { \n     where   =   {   color =   \"Red\"   } \n   }  }  local   result ,   err   =   core . mysql . deleteMany ( \"products\" ,   { \n   tbl   =   \"shoes\" , \n   delete   =   delete_arr  })  if   not   result   then \n   core . log ( err )  else \n   for   i = 1 ,   # result   do \n     local   entry   =   result [ i ] \n\n     if   entry . error   then \n       core . log ( \"error in delete entry #\" .. i .. \": \" .. entry . error ) \n     else \n       core . log ( \"deleted \" .. entry . deleted .. \" records for entry #\" .. i ) \n     end \n   end  end",
            "title": "deleteMany"
        },
        {
            "location": "/server/modules/mysql/#deletebatch",
            "text": "Delete records from multiple tables of a database.  core . mysql . deleteBatch ( db_name ,   batch_tbl )    Tip  This method offers optimization when used on the client-side. See the  deleteBatch  client-side method.   Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    batch_tbl  A table array of tables with the  tbl  and  where  keys from the  delete  method.  Table  Y     Returns  An indexed table array of tables containing either a  deleted  key; with the number of records deleted, or an  error  key; containing the error string, or  nil  and an error.  The result table is indexed the same order as the batch table that was supplied to the call.  Example  local   batch_delete   =   { \n   { \n     tbl   =   \"toys\" , \n     where   =   {   id   =   2   } \n   }, \n   { \n     tbl   =   \"shoes\" , \n     where   =   {   kind   =   \"running\"   } \n   }  }  local   result ,   err   =   core . mysql . deleteBatch ( \"products\" ,   batch_delete )  if   not   result   then \n   core . log ( err )  else \n   for   i = 1 ,   # result   do \n     local   entry   =   result [ i ] \n\n     if   entry . error   then \n       core . log ( \"error in delete entry #\" .. i .. \": \" .. entry . error ) \n     else \n       core . log ( \"deleted \" .. entry . deleted .. \" records for entry #\" .. i ) \n     end \n   end  end",
            "title": "deleteBatch"
        },
        {
            "location": "/server/modules/mysql/#utilities",
            "text": "",
            "title": "Utilities"
        },
        {
            "location": "/server/modules/mysql/#escape",
            "text": "Escape a string value to be sql safe.  core . mysql . escape ( unescaped_str )   Parameters     Name  Description  Requried      unescaped_str  The  string  value to escape.  Y     Returns  A sql safe escaped  string .  Example  local   str   =   core . mysql . escape ( \"Eat at Joe's\" )    Escaping Values  The returned value is enclosed in single quotes. Do not wrap the value with additional quotes or it may cause problems with your query.  Many EZ Query methods automatically use mysql.escape on values, be sure to check the documentation for each method.",
            "title": "escape"
        },
        {
            "location": "/server/modules/mysql/#escapeall",
            "text": "Escape all string values in a table array to be sql safe.  core . mysql . escapeAll ( tbl_values )   Parameters     Name  Description  Requried      tbl_values  A  table  array of mixed value types. String values will be escaped.  Y     Returns  Returns a  table  array of the escaped string values.  Example  local   values   =   { \n   'A special \"thing\" here.' , \n   24 , \n   \"Joe's Place\"  }  values   =   core . mysql . escapeAll (   values   )",
            "title": "escapeAll"
        },
        {
            "location": "/server/modules/mysql/#timestamp",
            "text": "MySQL compatible UTC based timestamp.  core . mysql . timestamp ([ seconds ])   Parameters     Name  Description  Type  Required      seconds  UNIX timestamp.  Number  N     Returns  UTC timestamp based on provided UNIX time. Otherwise, returns current UTC timestamp.",
            "title": "timestamp"
        },
        {
            "location": "/server/modules/mysql/#localtimestamp",
            "text": "MySQL compatible timestamp based on the local server time.  core . mysql . localTimestamp ([ seconds ])   Parameters     Name  Description  Type  Required      seconds  UNIX timestamp.  Number  N     Returns  Local timestamp based on provided UNIX time. Otherwise, returns current local timestamp.",
            "title": "localTimestamp"
        },
        {
            "location": "/server/modules/mysql/#parsetimestamp",
            "text": "A utility method to convert a MySQL timestamp to Unix time.  core . mysql . parseTimestamp (   mysql_ts   )   Parameters     Name  Description  Type  Required      mysql_ts  A MySQL timestamp in the form of  XXXX-XX-XX XX:XX:XX .  String  Y     Returns  Unix timestamp based on provided MySQL timestamp.",
            "title": "parseTimestamp"
        },
        {
            "location": "/server/modules/mysql/#date",
            "text": "MySQL compatible UTC based date.  core . mysql . date ([ seconds ])   Parameters     Name  Description  Type  Required      seconds  UNIX timestamp.  Number  N     Returns  UTC date based on provided UNIX time. Otherwise, returns current UTC date.",
            "title": "date"
        },
        {
            "location": "/server/modules/mysql/#localdate",
            "text": "MySQL compatible date based on the local server date.  core . mysql . localDate ([ seconds ])   Parameters     Name  Description  Type  Required      seconds  UNIX timestamp.  Number  N     Returns  Local date based on provided UNIX time. Otherwise, returns current local date.",
            "title": "localDate"
        },
        {
            "location": "/server/modules/mysql/#logqueries",
            "text": "A special method that will enable the logging of the query strings output by MySQL methods (or other methods that use a database) until it is toggled off.  core . mysql . logQueries ( state )   Parameters     Name  Description  Type  Required      state  Set the query logging on or off. Default is  true .  Boolean  N      Warning  This should only be used for debugging purposes or you'll end up with a lot of log entries.   Example  core . mysql . logQueries ()   --start logging queries  local   res ,   err ,   code   =   core . mysql . select ( \"products\" ,   { \n   tbl   =   \"toys\" , \n   where   {   id   =   20   }  })  -- The following output will be added to the Coronium log file  -- SELECT * FROM `toys` WHERE `id`=20;  core . mysql . logQueries ( false )   --stop logging queries  --Any MySQL methods run after will not be written to the log.",
            "title": "logQueries"
        },
        {
            "location": "/server/modules/mysql/#mysql-null-type",
            "text": "When using the EZ Query methods, you can set a column value to a valid MySQL  NULL  type by passing a string value set to 'NULL'. This only works if the column allows  NULL  values.  Example  local   res ,   err ,   code   =   core . mysql . update ( \"products\" ,   { \n   tbl   =   \"toys\" , \n   values   =   { \n     color   =   'NULL' \n   }, \n   where   =   {   color   =   \"red\"   }  })",
            "title": "MySQL NULL Type"
        },
        {
            "location": "/server/modules/mysql/#the-where-key",
            "text": "Many of the MySQL (and other) modules use a  where  key to specify the \"WHERE\" clause for a database query. Depending on what data type and structure you provide this key, a couple different things can happen automagically.",
            "title": "The WHERE Key"
        },
        {
            "location": "/server/modules/mysql/#string-based",
            "text": "When passing a string to the  where  key, you are on your own to create a valid MySQL query string. The query string is interpreted as-is.   You never include the literal \"WHERE\" in the  where  key value.  Examples  where = \"`color`='Red'\"  where = \"`kind`='Truck' AND `color`='Red'\"  where = \"`kind`='Truck' OR `kind`='Car'\"",
            "title": "String Based"
        },
        {
            "location": "/server/modules/mysql/#table-based",
            "text": "The advantage of using a table based  where  key is that all of the values are properly formatted to make a valid and type-safe MySQL query.   Important  String values are automatically run through  mysql.escape . Do not double-escape values.   To reproduce the three string based examples above as table based:  where   =   {   color   =   \"Red\"   }   where   =   {   kind   =   \"Truck\" ,   color   =   \"Red\"   }   --AND   where   =   {   kind   =   {   \"Truck\" ,   \"Car\"   }   }   --OR   Ordered Table Queries  With \"ordered\" query tables you can replicate some more complex queries:  where = \"`color='Red' AND `model`='Ford' AND kind='Truck' OR kind='Car'\"  To reproduce the query above, put the entries in a table array (order matters):  where   =   { \n   {   color   =   \"Red\" ,   model   =   \"Ford\"   }, \n   {   kind   =   {   \"Truck\" ,   \"Car\"   }   }  }   For an all OR query like:  where = \"`color='Red' OR `model`='Ford' OR kind='Truck' OR kind='Car'\"  You can use an ordered table with a single entry:  where   =   { \n   {   color   =   {   \"Red\"   },   model   =   {   \"Ford\"   },   kind   =   {   \"Truck\" ,   \"Car\"   }   }  }   At this time multiple entries in an \"ordered\"  where  table are combined using 'AND', which may cause problems with more complicated queries, so you'll need to fall back to the string method.  Table type queries also do not support conditionals, so the following cannot be replicated with a table based query:  where = \"`score` > 100\"",
            "title": "Table Based"
        },
        {
            "location": "/server/modules/mysql/#advanced-methods",
            "text": "While the MySQL module methods above are fairly performant, they do automatically manage the database connections, and create the raw query strings, which creates a slight hit on speed.  By managing the database connection directly you can get the best performance from your queries, especially if you are performing multiple queries in your API methods.   Closing Connections  Always use  dbClose  at the end of your session, or you'll leave a connection open, using up resources.",
            "title": "Advanced Methods"
        },
        {
            "location": "/server/modules/mysql/#dbconnect",
            "text": "Create a new connection to a database.  core . mysql . dbConnect (   db_name   )   Returns  A new database connection object, or  nil , and an error.  Parameters     Name  Description  Type  Required      db_name  The database to connect to. You can also use a connection table. See the  Connection Table  section in  Remote Databases .  String  Y     Example  local   db_conn ,   err   =   core . mysql . dbConnect ( \"products\" )",
            "title": "dbConnect"
        },
        {
            "location": "/server/modules/mysql/#dbquery",
            "text": "Perform a query using the database connection (see  dbConnect ). You can, and should, run multiple query calls using the same database connection.  core . mysql . dbQuery (   db_connection ,   query_str   )   Returns  The query result, or  nil , and an error. See the  Result Values  section of the  query  method.  Parameters     Name  Description  Type  Required      db_connection  The database connection returned from  dbConnect .  Object  Y    query_str  The MySQL query to send to the database.  String  Y     Example  local   result ,   err   =   core . mysql . dbQuery ( db_conn ,   \"SELECT * FROM `products`;\" )",
            "title": "dbQuery"
        },
        {
            "location": "/server/modules/mysql/#dbclose",
            "text": "Close a previous database connection opened with  dbConnect .  core . mysql . dbClose (   db_connection   )   Returns  A truthy value on success, or  nil , and an error.  Parameters     Name  Description  Type  Required      db_connection  The database connection returned from  dbConnect .  Object  Y     Example  local   ok ,   err   =   core . mysql . dbClose ( db_conn )",
            "title": "dbClose"
        },
        {
            "location": "/server/modules/mysql/#mysql-timeout",
            "text": "For large queries you may need to adjust the timeout for the call. You can do this by passing a connection table in place of the database name and include the  timeout  parameter in milliseconds. The default is 2000 (2 seconds).",
            "title": "MySQL Timeout"
        },
        {
            "location": "/server/modules/mysql/#example",
            "text": "local   query   =   core . sf ( \"SELECT * FROM `orders` LIMIT %d\" ,   100 )  local   conn_tbl   =   { \n   database   =   \"clients\" , \n   timeout   =   10000   --10 secs  }  local   result ,   err   =   core . mysql . query ( conn_tbl ,   query )    EZ Query Methods  You can do the same for the  EZ Query  methods. Replace the database name with a connection table as shown above.",
            "title": "Example"
        },
        {
            "location": "/server/modules/mysql/#remote-databases",
            "text": "You can connect to remote MySQL databases by using a connection table in place of the database name in the  core.mysql.query  and EZ Query methods.  Connection Table     Key  Description  Type  Required      database  The remote database name.  String  Y    user  The remote database user.  String  Y    password  The remote database password  String  Y    host  The remote database host address.  String  Y    port  The remote database port. Default: 3306  Number  N    timeout  The timeout in milliseconds for the query. Default: 2000  Number  N     Example  local   conn_tbl   =   { \n   database   =   \"clients\" , \n   user   =   \"dbuser\" , \n   password   =   \"1234\" , \n   host   =   \"my.sql.host\"  }  local   results ,   err   =   core . mysql . query ( conn_tbl ,   query_str )",
            "title": "Remote Databases"
        },
        {
            "location": "/server/modules/mysql/#administration",
            "text": "You can and should manage your MySQL databases using a standalone tool. Below are some free resources for managing MySQL databases.   Screencast Available  Learn more about database administration in a screencast format by  Clicking here .    SequelPro  (OSX)  HeidiSQL  (Windows)   To connect to the MySQL database, use the host address of the server, and the password that was set when installing Coronium Core.",
            "title": "Administration"
        },
        {
            "location": "/server/modules/mysql/#remote-access",
            "text": "By default, a fresh Coronium Core installation allows remote access to the MySQL database with a password so that you can use client side tools to edit your databases.  While this is convenient to the developer, it is not particularly the  most  secure way to run the database. Instead you should only activate remote access while you work on the database, and then deactivate it when you are done.",
            "title": "Remote Access"
        },
        {
            "location": "/server/modules/mysql/#digitalocean",
            "text": "To activate/deactivate remote MySQL access use the  mysql-remote  tool by logging in with the  coronium  user and entering one of the following on the command line:  Activate remote access  sudo mysql-remote on  Deactivate remote access  sudo mysql-remote off  If you are having issues connecting with your MySQL client, make sure that you have remote access in an active state.",
            "title": " DigitalOcean"
        },
        {
            "location": "/server/modules/mysql/#amazon-ec2",
            "text": "Disable/enable port  3306  as needed in your instance security group. For more information on editing your security group  click here .",
            "title": " Amazon EC2"
        },
        {
            "location": "/server/modules/mysql/#configuration-file",
            "text": "You can adjust the various MySQL server configuration settings in the  coronium_mysql.cnf  file. The file is located at:  /etc/mysql/coronium.conf.d/coronium_mysql.cnf   Configuration Changes  Changes to the configuration file can have adverse effects, do so at your own risk. See  MySQL Server System Variables  for the available configuration options.   This file can be edited by using the  nano  utility on the server:  sudo nano /etc/mysql/coronium.conf.d/coronium_mysql.cnf  Use the arrow keys on your keyboard to move the cursor. When your updates are complete, use  ctrl-x  and then press  y  to save the file.  You will need to restart the MySQL server daemon for the changes to take effect:  sudo monit restart mysqld  Check the Coronium server status to make sure that MySQL is running:  coronium   status",
            "title": "Configuration File"
        },
        {
            "location": "/server/modules/mysql/#viewing-error-log",
            "text": "The MySQL server error log can be viewed using:  sudo tail -f /var/log/mysql/error.log  Use  ctrl-c  to exit.",
            "title": "Viewing Error Log"
        },
        {
            "location": "/server/modules/mysql/#password-update",
            "text": "To change your MySQL password log in your Coronium Core server as and run:  sudo mysql-updatepw",
            "title": "Password Update"
        },
        {
            "location": "/server/modules/network/",
            "text": "Make external HTTP network requests and retrieve the results.\n\n\nrequest\n\n\nSend a network request to an external host address.\n\n\ncore\n.\nnetwork\n.\nrequest\n(\nurl\n,\n \nparams\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe url endpoint for the network request.\n\n\nString\n\n\nY\n\n\n\n\n\n\nparams\n\n\nA table of options for the request. See \nParams Table Keys\n below.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nParams Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\nThe HTTP method for the request (\"GET\", \"POST\", etc.).\n\n\nString\n\n\nY\n\n\n\n\n\n\nheaders\n\n\nA table of headers to send with the request.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nbody\n\n\nA string body to send with a \"POST\" request.\n\n\nString\n\n\nN\n\n\n\n\n\n\nssl_verify\n\n\nVerify SSL cert matches hostname.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nOn success, returns a \ntable\n with response keys (see below). Otherwise, \nnil\n and an error.\n\n\nResponse Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nThe response body returned by the request, if any.\n\n\nString\n\n\n\n\n\n\nheaders\n\n\nA table of response headers from the request.\n\n\nTable\n\n\n\n\n\n\nstatus\n\n\nThe HTTP response status of the request.\n\n\nNumber\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nresp\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\nrequest\n(\n\"https://google.com\"\n,\n \n{\n\n  \nmethod\n \n=\n \n\"POST\"\n,\n\n  \nbody\n \n=\n \n\"{\n\\\"\nname\n\\\"\n:\n\\\"\nJSON\n\\\"\n}\"\n,\n\n  \nheaders\n \n=\n \n{\n\n    \n[\n\"Content-Type\"\n]\n \n=\n \n\"application/json\"\n\n  \n}\n\n\n})\n\n\n\nif\n \nnot\n \nresp\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\ncore\n.\nlog\n(\n\"body\"\n,\n \nresp\n.\nbody\n)\n\n\ncore\n.\nlog\n(\n\"status\"\n,\n \nresp\n.\nstatus\n)\n\n\n\n\n\n\nget\n\n\nConvenience method for a \"GET\" request.\n\n\ncore\n.\nnetwork\n.\nget\n(\nurl\n[,\n \nheaders\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe url endpoint for the \"GET\" request.\n\n\nString\n\n\nY\n\n\n\n\n\n\nheaders\n\n\nOptional headers to send with the request.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nOn success, returns a response object as a \ntable\n (see \nnetwork.request\n). Otherwise, \nnil\n and an error.\n\n\nExample\n\n\nlocal\n \nresp\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\nget\n(\n\"https://google.com\"\n)\n\n\nif\n \nnot\n \nresp\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\ncore\n.\nlog\n(\nresp\n.\nbody\n)\n\n\n\n\n\n\npost\n\n\nConvenience method for a \"POST\" request. \n\n\ncore\n.\nnetwork\n.\npost\n(\nurl\n,\n \nbody\n[,\n \nheaders\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe url endpoint for the \"POST\" request.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbody\n\n\nA string body to post to the endpoint.\n\n\nString\n\n\nN\n\n\n\n\n\n\nheaders\n\n\nOptional headers to send with the request.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nOn success, returns a response object as a \ntable\n (see \nnetwork.request\n). Otherwise, \nnil\n and an error.\n\n\nExample\n\n\nlocal\n \nbody\n \n=\n \n\"Here is some text I am posting.\"\n\n\n\nlocal\n \nresp\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\npost\n(\n\"https://post.com/submit\"\n,\n \nbody\n)\n\n\nif\n \nnot\n \nresp\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\ncore\n.\nlog\n(\nresp\n.\nbody\n)\n\n\n\n\n\n\nSee also: \nForm Example\n\n\ngetJson\n\n\nSpecialized method that sends a \"GET\" request to an endpoint that responds with JSON. \n\n\ncore\n.\nnetwork\n.\ngetJson\n(\nurl\n[,\n \nheaders\n])\n\n\n\n\n\n\n\n\nSpecial Response\n\n\nThis method returns a Lua table with the decoded JSON response, not the JSON string.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe url endpoint for the network request.\n\n\nString\n\n\nY\n\n\n\n\n\n\nheaders\n\n\nOptional headers to send with the request.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nOn success, returns the decoded JSON result as a \ntable\n. Otherwise, \nnil\n and an error.\n\n\nExample\n\n\nlocal\n \nresp\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\ngetJson\n(\n\"https://getjson.com\"\n)\n\n\n\nif\n \nnot\n \nresp\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\ncore\n.\nlog\n(\nresp\n.\nsome_key\n)\n\n\n\n\n\n\npostJson\n\n\nSpecialized method that sends a \"POST\" request to an endpoint that expects JSON.\n\n\ncore\n.\nnetwork\n.\npostJson\n(\nurl\n,\n \ntbl\n[,\n \nheaders\n])\n\n\n\n\n\n\n\n\nSpecial Response\n\n\nThis method takes a Lua table and JSON-encodes it. Do not pass a raw JSON string.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe url endpoint for to post the JSON data to.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nA Lua table of data to be JSON encoded.\n\n\nString\n\n\nY\n\n\n\n\n\n\nheaders\n\n\nOptional headers to send with the request.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nOn success, returns the result as a \nstring\n. Otherwise, \nnil\n and an error.\n\n\nExample\n\n\nlocal\n \ndata\n \n=\n \n{\n\n  \nname\n \n=\n \n\"Tim\"\n,\n\n  \nage\n \n=\n \n34\n\n\n}\n\n\n\nlocal\n \nresp\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\npostJson\n(\n\"https://postjson.com\"\n,\n \ndata\n)\n\n\n\nif\n \nnot\n \nresp\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\ncore\n.\nlog\n(\nresp\n.\nbody\n)\n\n\n\n\n\n\npipeline\n\n\nRun a sequential set of network requests against a specific host address.\n\n\ncore\n.\nnetwork\n.\npipeline\n(\nrequests\n,\n \nurl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nrequests\n\n\nA table array of request tables. See \nRequest Table Keys\n below.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nurl\n\n\nThe url endpoint for to run the requests against.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nRequest Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe endpoint for the request. This is joined with the \nurl\n provided.\n\n\nString\n\n\nY\n\n\n\n\n\n\nmethod\n\n\nThe HTTP method for the request. Defaults to \"GET\"\n\n\nString\n\n\nN\n\n\n\n\n\n\nheaders\n\n\nA table of headers to send with the request.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nbody\n\n\nA string body to send with a \"POST\" request.\n\n\nString\n\n\nN\n\n\n\n\n\n\nssl_verify\n\n\nVerify SSL cert matches hostname.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nOn success, a \ntable\n array of response tables (see below), or \nnil\n, and an error.\n\n\nResponse Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nThe response body returned by the request, if any.\n\n\nString\n\n\n\n\n\n\nheaders\n\n\nA table of response headers from the request.\n\n\nTable\n\n\n\n\n\n\nstatus\n\n\nThe HTTP response status of the request.\n\n\nNumber\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nreqs\n \n=\n \n{\n\n  \n{\n\n    \n--defaults to \"GET\"\n\n    \npath\n \n=\n \n\"/page1.html\"\n\n  \n},\n\n  \n{\n\n    \npath\n \n=\n \n\"/page2.html\"\n,\n\n    \nmethod\n \n=\n \n\"POST\"\n,\n\n    \nbody\n \n=\n \n\"{\n\\\"\nname\n\\\"\n:\n\\\"\nJSON\n\\\"\n}\"\n,\n\n    \nheaders\n \n=\n \n{\n\n      \n[\n\"Content-Type\"\n]\n \n=\n \n\"application/json\"\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nresponses\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\npipeline\n(\nreqs\n,\n \n\"http://somesite.com\"\n)\n\n\n\nif\n \nnot\n \nresponses\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\nfor\n \nr\n=\n1\n,\n \n#\nresponses\n \ndo\n\n  \nif\n \nresponses\n[\nr\n].\nstatus\n \n==\n \n200\n \nthen\n\n    \ncore\n.\nlog\n(\nresponses\n[\nr\n].\nbody\n)\n\n  \nend\n\n\nend\n\n\n\n\n\n\nencode\n\n\nEncode a table for use as post or query arguments.\n\n\ncore\n.\nnetwork\n.\nencode\n(\ntbl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nA table with key/value pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nForm Example\n\n\nlocal\n \nform\n \n=\n \ncore\n.\nnetwork\n.\nencode\n({\n\n  \nfirstname\n \n=\n \n\"Sally\"\n,\n\n  \nlastname\n \n=\n \n\"Jones\"\n\n\n})\n\n\n\nlocal\n \nresp\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\npost\n(\n\"http://post.com/submit\"\n,\n \nform\n)\n\n\n...\n\n\n\n\n\n\nQuery Example\n\n\nlocal\n \nargs\n \n=\n \ncore\n.\nnetwork\n.\nencode\n({\n\n  \npage\n \n=\n \n1\n,\n\n  \nperpage\n \n=\n \n10\n\n\n})\n\n\n\nlocal\n \nurl\n \n=\n \n\"http://page.com?\"\n..\nargs\n\n\n\nlocal\n \nresp\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\nget\n(\nurl\n)\n\n\n...",
            "title": "Network"
        },
        {
            "location": "/server/modules/network/#request",
            "text": "Send a network request to an external host address.  core . network . request ( url ,   params )   Parameters     Name  Description  Type  Required      url  The url endpoint for the network request.  String  Y    params  A table of options for the request. See  Params Table Keys  below.  Table  Y     Params Table Keys     Name  Description  Type  Required      method  The HTTP method for the request (\"GET\", \"POST\", etc.).  String  Y    headers  A table of headers to send with the request.  Table  N    body  A string body to send with a \"POST\" request.  String  N    ssl_verify  Verify SSL cert matches hostname.  Boolean  N     Returns  On success, returns a  table  with response keys (see below). Otherwise,  nil  and an error.  Response Table Keys     Name  Description  Type      body  The response body returned by the request, if any.  String    headers  A table of response headers from the request.  Table    status  The HTTP response status of the request.  Number     Example  local   resp ,   err   =   core . network . request ( \"https://google.com\" ,   { \n   method   =   \"POST\" , \n   body   =   \"{ \\\" name \\\" : \\\" JSON \\\" }\" , \n   headers   =   { \n     [ \"Content-Type\" ]   =   \"application/json\" \n   }  })  if   not   resp   then \n   core . log ( err )  end  core . log ( \"body\" ,   resp . body )  core . log ( \"status\" ,   resp . status )",
            "title": "request"
        },
        {
            "location": "/server/modules/network/#get",
            "text": "Convenience method for a \"GET\" request.  core . network . get ( url [,   headers ])   Parameters     Name  Description  Type  Required      url  The url endpoint for the \"GET\" request.  String  Y    headers  Optional headers to send with the request.  Table  N     Returns  On success, returns a response object as a  table  (see  network.request ). Otherwise,  nil  and an error.  Example  local   resp ,   err   =   core . network . get ( \"https://google.com\" )  if   not   resp   then \n   core . log ( err )  end  core . log ( resp . body )",
            "title": "get"
        },
        {
            "location": "/server/modules/network/#post",
            "text": "Convenience method for a \"POST\" request.   core . network . post ( url ,   body [,   headers ])   Parameters     Name  Description  Type  Required      url  The url endpoint for the \"POST\" request.  String  Y    body  A string body to post to the endpoint.  String  N    headers  Optional headers to send with the request.  Table  N     Returns  On success, returns a response object as a  table  (see  network.request ). Otherwise,  nil  and an error.  Example  local   body   =   \"Here is some text I am posting.\"  local   resp ,   err   =   core . network . post ( \"https://post.com/submit\" ,   body )  if   not   resp   then \n   core . log ( err )  end  core . log ( resp . body )   See also:  Form Example",
            "title": "post"
        },
        {
            "location": "/server/modules/network/#getjson",
            "text": "Specialized method that sends a \"GET\" request to an endpoint that responds with JSON.   core . network . getJson ( url [,   headers ])    Special Response  This method returns a Lua table with the decoded JSON response, not the JSON string.   Parameters     Name  Description  Type  Required      url  The url endpoint for the network request.  String  Y    headers  Optional headers to send with the request.  Table  N     Returns  On success, returns the decoded JSON result as a  table . Otherwise,  nil  and an error.  Example  local   resp ,   err   =   core . network . getJson ( \"https://getjson.com\" )  if   not   resp   then \n   core . log ( err )  end  core . log ( resp . some_key )",
            "title": "getJson"
        },
        {
            "location": "/server/modules/network/#postjson",
            "text": "Specialized method that sends a \"POST\" request to an endpoint that expects JSON.  core . network . postJson ( url ,   tbl [,   headers ])    Special Response  This method takes a Lua table and JSON-encodes it. Do not pass a raw JSON string.   Parameters     Name  Description  Type  Required      url  The url endpoint for to post the JSON data to.  String  Y    tbl  A Lua table of data to be JSON encoded.  String  Y    headers  Optional headers to send with the request.  Table  N     Returns  On success, returns the result as a  string . Otherwise,  nil  and an error.  Example  local   data   =   { \n   name   =   \"Tim\" , \n   age   =   34  }  local   resp ,   err   =   core . network . postJson ( \"https://postjson.com\" ,   data )  if   not   resp   then \n   core . log ( err )  end  core . log ( resp . body )",
            "title": "postJson"
        },
        {
            "location": "/server/modules/network/#pipeline",
            "text": "Run a sequential set of network requests against a specific host address.  core . network . pipeline ( requests ,   url )   Parameters     Name  Description  Type  Required      requests  A table array of request tables. See  Request Table Keys  below.  Table  Y    url  The url endpoint for to run the requests against.  String  Y     Request Table Keys     Name  Description  Type  Required      path  The endpoint for the request. This is joined with the  url  provided.  String  Y    method  The HTTP method for the request. Defaults to \"GET\"  String  N    headers  A table of headers to send with the request.  Table  N    body  A string body to send with a \"POST\" request.  String  N    ssl_verify  Verify SSL cert matches hostname.  Boolean  N     Returns  On success, a  table  array of response tables (see below), or  nil , and an error.  Response Table Keys     Name  Description  Type      body  The response body returned by the request, if any.  String    headers  A table of response headers from the request.  Table    status  The HTTP response status of the request.  Number     Example  local   reqs   =   { \n   { \n     --defaults to \"GET\" \n     path   =   \"/page1.html\" \n   }, \n   { \n     path   =   \"/page2.html\" , \n     method   =   \"POST\" , \n     body   =   \"{ \\\" name \\\" : \\\" JSON \\\" }\" , \n     headers   =   { \n       [ \"Content-Type\" ]   =   \"application/json\" \n     } \n   }  }  local   responses ,   err   =   core . network . pipeline ( reqs ,   \"http://somesite.com\" )  if   not   responses   then \n   core . log ( err )  end  for   r = 1 ,   # responses   do \n   if   responses [ r ]. status   ==   200   then \n     core . log ( responses [ r ]. body ) \n   end  end",
            "title": "pipeline"
        },
        {
            "location": "/server/modules/network/#encode",
            "text": "Encode a table for use as post or query arguments.  core . network . encode ( tbl )   Parameters     Name  Description  Type  Required      tbl  A table with key/value pairs.  Table  Y",
            "title": "encode"
        },
        {
            "location": "/server/modules/network/#form-example",
            "text": "local   form   =   core . network . encode ({ \n   firstname   =   \"Sally\" , \n   lastname   =   \"Jones\"  })  local   resp ,   err   =   core . network . post ( \"http://post.com/submit\" ,   form )  ...",
            "title": "Form Example"
        },
        {
            "location": "/server/modules/network/#query-example",
            "text": "local   args   =   core . network . encode ({ \n   page   =   1 , \n   perpage   =   10  })  local   url   =   \"http://page.com?\" .. args  local   resp ,   err   =   core . network . get ( url )  ...",
            "title": "Query Example"
        },
        {
            "location": "/server/modules/pages/usage/",
            "text": "Pages allow you to display and collect data using your Coronium Core server. You can display simple static web pages (.html), or serve \ndynamic pages\n using Lua.\n\n\n\n\nSpecial Note\n\n\nWhile the \nPages\n module is capable of serving up complex websites, it is generally meant to supplement the core functionality of the application server.\n\n\n\n\nPages Directory\n\n\nAll pages and assets reside in the \n/home/coronium/pages\n directory, which is the \"root\" directory for all web based requests. Log in via SFTP to manage your page files.\n\n\nDynamic Pages\n\n\nTo create a dynamic web page, name the file with the \n.lua\n extension and use the \nnew\n method to create a pages object instance. The browser path will be the path relative to the pages directory. \n\n\nCall the Page file by addressing it by name, without the .lua extension.\n\n\nExample Paths\n\n\nFile path: \n/home/coronium/pages/users/show.lua\n\n\nBrowser path: \nhttps://my.coronium.com/users/show\n\n\nRequests\n\n\nThe Pages module supports both GET and POST requests. In most cases you should set up your page to handle both types of request. The following example demonstrates a common page request pattern:\n\n\n-- mypage.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\n-- GET handler\n\n\nlocal\n \nfunction\n \nprocessGet\n()\n\n  \n...\n\n\nend\n\n\n\n-- POST handler\n\n\nlocal\n \nfunction\n \nprocessPost\n()\n\n  \n...\n\n\nend\n\n\n\n--# Incoming Request\n\n\nif\n \npage\n.\nisGet\n \nthen\n\n  \n-- GET request\n\n  \nprocessGet\n()\n\n\nelseif\n \npage\n.\nisPost\n \nthen\n\n  \n-- POST request\n\n  \nprocessPost\n()\n\n\nelse\n\n  \n-- Method not supported\n\n  \npage\n.\nstatus\n(\n501\n)\n\n\nend\n\n\n\n\n\n\nResponses\n\n\nOutput responses to the client web browser by using the various \"output\" methods of the pages object instance. The available response types are HTML, JSON, or plain text.\n\n\nHTML\n\n\nTo return content as html (\ntext/html\n), pass a string body to the \nresponse\n method.\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nbody\n \n=\n \n\n[[\n\n\n  <html>\n\n\n    <body>\n\n\n      <h1>Hello Pages!</h1>\n\n\n    </body>\n\n\n  </html>\n\n\n]]\n\n\n\npage\n.\nresponse\n(\nbody\n)\n\n\n\n\n\n\nSee also:\n \nTemplates\n\n\nJSON\n\n\nTo return content as JSON (\napplication/json\n), use the \nrenderJson\n method.\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\n--Uses a table for easy JSON construction\n\n\nlocal\n \ndata\n \n=\n \n{\n\n  \nname\n \n=\n \n\"Dani\"\n,\n\n  \nage\n \n=\n \n23\n\n\n}\n\n\n\npage\n.\nrenderJson\n(\ndata\n)\n\n\n\n\n\n\nSee also:\n \npage.response\n\n\nTEXT\n\n\nTo return content as plain text (\ntext/plain\n), use the \nrenderText\n method.\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \ntext\n \n=\n \n\"This is some plain text\"\n\n\n\npage\n.\nrenderText\n(\ntext\n)\n\n\n\n\n\n\nSee also:\n \npage.response\n\n\nQueries\n\n\nTo access properties of a query string, use the \nquery\n property of the pages object instance. The \nquery\n is a table with name/value pairs.\n\n\nExample Path\n\n\n/mypage?name=Tim&age=42\n\n\nExample Lua\n\n\n--mypage.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nfunction\n \nprocessPage\n()\n\n  \nprint\n(\npage\n.\nquery\n.\nname\n)\n \n--Tim\n\n  \nprint\n(\npage\n.\nquery\n.\nage\n)\n \n--42\n\n\n  \n--Loop over query name/values\n\n  \nfor\n \nname\n,\n \nval\n \nin\n \npairs\n(\npage\n.\nquery\n)\n \ndo\n\n    \nprint\n(\nname\n..\n\"=\"\n..\nval\n)\n\n  \nend\n\n\nend\n\n\n\n--# Incoming\n\n\nif\n \npage\n.\nisGet\n \nthen\n\n  \nprocessPage\n()\n\n\nelse\n\n  \npage\n.\nstatus\n(\n501\n)\n\n\nend\n\n\n\n\n\n\nForms\n\n\nTo access properties of a posted form, use the \nform\n property of the pages object instance. The form is a \ntable\n with name/value pairs.\n\n\nExample Form\n\n\n<\nform\n \naction\n=\n\"\"\n \nmethod\n=\n\"POST\"\n>\n\n  \n<\ninput\n \nname\n=\n\"firstname\"\n \nid\n=\n\"firstname\"\n>\n\n  \n<\ninput\n \nname\n=\n\"lastname\"\n \nid\n=\n\"lastname\"\n>\n\n  \n<\nbutton\n \ntype\n=\n\"submit\"\n>\nSubmit\n</\nbutton\n>\n\n\n</\nform\n>\n\n\n\n\n\n\nExample Lua\n\n\n--myform.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nfunction\n \nprocessForm\n()\n\n  \nlocal\n \nfirst\n \n=\n \npage\n.\nform\n.\nfirstname\n\n  \nlocal\n \nlast\n \n=\n \npage\n.\nform\n.\nlastname\n\n\n  \nprint\n(\nfirst\n..\n\" \"\n..\nlast\n)\n\n\n  \n--Loop over form name/values\n\n  \nfor\n \nname\n,\n \nval\n \nin\n \npairs\n(\npage\n.\nform\n)\n \ndo\n\n    \nprint\n(\nname\n..\n\"=\"\n..\nval\n)\n\n  \nend\n\n\nend\n\n\n\n--# Incoming\n\n\nif\n \npage\n.\nisPost\n \nthen\n\n  \nprocessForm\n()\n\n\nelse\n\n  \npage\n.\nstatus\n(\n501\n)\n\n\nend\n\n\n\n\n\n\nUploads\n\n\nTo access file uploads, use the \nfiles\n property of the pages object instance.\n\n\nExample Upload Form\n\n\n<!-- upload.html -->\n\n\n<\nform\n \naction\n=\n\"\"\n \nmethod\n=\n\"POST\"\n \nenctype\n=\n\"multipart/form-data\"\n>\n\n  \n<\ninput\n \ntype\n=\n\"file\"\n \nname\n=\n\"avatar\"\n \nid\n=\n\"avatar\"\n>\n\n  \n<\nbutton\n \ntype\n=\n\"submit\"\n>\nUpload\n</\nbutton\n>\n\n\n</\nform\n>\n\n\n\n\n\n\nExample Lua\n\n\n-- upload.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nfunction\n \nprocessUpload\n()\n\n  \nlocal\n \navatarObj\n \n=\n \npage\n.\nfiles\n.\navatar\n\n  \npage\n.\nsaveFile\n(\navatarObj\n,\n \n'/avatars'\n)\n\n  \npage\n.\nresponse\n(\n\"Done\"\n)\n\n\nend\n\n\n\n--# Incoming\n\n\nif\n \npage\n.\nisPost\n \nthen\n\n  \nprocessUpload\n()\n\n\nelse\n\n  \npage\n.\nstatus\n(\n501\n)\n\n\nend\n\n\n\n\n\n\nSee the \nFile Uploads\n section.\n\n\nCookies\n\n\nSee \nCookies\n in the Pages API documentation.\n\n\nHeaders\n\n\nTo access the request headers, use the \nheaders\n property of the pages object instance. The headers are in a \ntable\n as name/value pairs.\n\n\nExample\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nheaders\n \n=\n \npage\n.\nheaders\n\n\n\n--print \"Host\" header\n\n\nprint\n(\nheaders\n[\n\"Host\"\n])\n\n\n\n--Loop over headers name/values\n\n\nfor\n \nname\n,\n \nval\n \nin\n \npairs\n(\nheaders\n)\n \ndo\n\n  \nprint\n(\nname\n..\n\"=\"\n..\nval\n)\n\n\nend\n\n\n\n\n\n\nCore Modules\n\n\nYou can use any of the core server modules in dynamic pages.\n\n\nExample Template\n\n\n<!-- user.tpl -->\n\n\n<\nhtml\n>\n\n  \n<\nbody\n>\n\n    \n<\nh1\n>\n{{ name }}\n</\nh1\n>\n\n    \n<\np\n>\n{{ age }}\n</\np\n>\n\n    \n<\np\n>\n{{ _id }}\n</\np\n>\n\n  \n</\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nExample Lua\n\n\n-- user.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nfunction\n \nprocessPage\n()\n\n  \nlocal\n \nusers\n \n=\n \ncore\n.\ndata\n(\n\"users\"\n)\n\n  \nlocal\n \ndoc\n \n=\n \nusers\n:\nget\n(\n\"id1234\"\n)\n\n\n  \npage\n.\nrender\n(\n'/user.tpl'\n,\n \ndoc\n)\n\n\nend\n\n\n\n--# Incoming\n\n\nif\n \npage\n.\nisGet\n \nthen\n\n  \nprocessPage\n()\n\n\nelse\n\n  \npage\n.\nstatus\n(\n501\n)\n\n\nend\n\n\n\n\n\n\nFiles Directory\n\n\nFiles uploaded to the \nfiles/public\n directory using the \nFiles\n module can be displayed using page templates. When referencing a file in a template, the path will be checked in the \npages\n directory first. If no file is found, then the \nfiles/public\n directory path will be checked.",
            "title": "Usage"
        },
        {
            "location": "/server/modules/pages/usage/#pages-directory",
            "text": "All pages and assets reside in the  /home/coronium/pages  directory, which is the \"root\" directory for all web based requests. Log in via SFTP to manage your page files.",
            "title": "Pages Directory"
        },
        {
            "location": "/server/modules/pages/usage/#dynamic-pages",
            "text": "To create a dynamic web page, name the file with the  .lua  extension and use the  new  method to create a pages object instance. The browser path will be the path relative to the pages directory.   Call the Page file by addressing it by name, without the .lua extension.  Example Paths  File path:  /home/coronium/pages/users/show.lua  Browser path:  https://my.coronium.com/users/show",
            "title": "Dynamic Pages"
        },
        {
            "location": "/server/modules/pages/usage/#requests",
            "text": "The Pages module supports both GET and POST requests. In most cases you should set up your page to handle both types of request. The following example demonstrates a common page request pattern:  -- mypage.lua  local   page   =   core . pages . new ()  -- GET handler  local   function   processGet () \n   ...  end  -- POST handler  local   function   processPost () \n   ...  end  --# Incoming Request  if   page . isGet   then \n   -- GET request \n   processGet ()  elseif   page . isPost   then \n   -- POST request \n   processPost ()  else \n   -- Method not supported \n   page . status ( 501 )  end",
            "title": "Requests"
        },
        {
            "location": "/server/modules/pages/usage/#responses",
            "text": "Output responses to the client web browser by using the various \"output\" methods of the pages object instance. The available response types are HTML, JSON, or plain text.",
            "title": "Responses"
        },
        {
            "location": "/server/modules/pages/usage/#html",
            "text": "To return content as html ( text/html ), pass a string body to the  response  method.  local   page   =   core . pages . new ()  local   body   =   [[    <html>      <body>        <h1>Hello Pages!</h1>      </body>    </html>  ]]  page . response ( body )   See also:   Templates",
            "title": "HTML"
        },
        {
            "location": "/server/modules/pages/usage/#json",
            "text": "To return content as JSON ( application/json ), use the  renderJson  method.  local   page   =   core . pages . new ()  --Uses a table for easy JSON construction  local   data   =   { \n   name   =   \"Dani\" , \n   age   =   23  }  page . renderJson ( data )   See also:   page.response",
            "title": "JSON"
        },
        {
            "location": "/server/modules/pages/usage/#text",
            "text": "To return content as plain text ( text/plain ), use the  renderText  method.  local   page   =   core . pages . new ()  local   text   =   \"This is some plain text\"  page . renderText ( text )   See also:   page.response",
            "title": "TEXT"
        },
        {
            "location": "/server/modules/pages/usage/#queries",
            "text": "To access properties of a query string, use the  query  property of the pages object instance. The  query  is a table with name/value pairs.  Example Path  /mypage?name=Tim&age=42  Example Lua  --mypage.lua  local   page   =   core . pages . new ()  local   function   processPage () \n   print ( page . query . name )   --Tim \n   print ( page . query . age )   --42 \n\n   --Loop over query name/values \n   for   name ,   val   in   pairs ( page . query )   do \n     print ( name .. \"=\" .. val ) \n   end  end  --# Incoming  if   page . isGet   then \n   processPage ()  else \n   page . status ( 501 )  end",
            "title": "Queries"
        },
        {
            "location": "/server/modules/pages/usage/#forms",
            "text": "To access properties of a posted form, use the  form  property of the pages object instance. The form is a  table  with name/value pairs.  Example Form  < form   action = \"\"   method = \"POST\" > \n   < input   name = \"firstname\"   id = \"firstname\" > \n   < input   name = \"lastname\"   id = \"lastname\" > \n   < button   type = \"submit\" > Submit </ button >  </ form >   Example Lua  --myform.lua  local   page   =   core . pages . new ()  local   function   processForm () \n   local   first   =   page . form . firstname \n   local   last   =   page . form . lastname \n\n   print ( first .. \" \" .. last ) \n\n   --Loop over form name/values \n   for   name ,   val   in   pairs ( page . form )   do \n     print ( name .. \"=\" .. val ) \n   end  end  --# Incoming  if   page . isPost   then \n   processForm ()  else \n   page . status ( 501 )  end",
            "title": "Forms"
        },
        {
            "location": "/server/modules/pages/usage/#uploads",
            "text": "To access file uploads, use the  files  property of the pages object instance.  Example Upload Form  <!-- upload.html -->  < form   action = \"\"   method = \"POST\"   enctype = \"multipart/form-data\" > \n   < input   type = \"file\"   name = \"avatar\"   id = \"avatar\" > \n   < button   type = \"submit\" > Upload </ button >  </ form >   Example Lua  -- upload.lua  local   page   =   core . pages . new ()  local   function   processUpload () \n   local   avatarObj   =   page . files . avatar \n   page . saveFile ( avatarObj ,   '/avatars' ) \n   page . response ( \"Done\" )  end  --# Incoming  if   page . isPost   then \n   processUpload ()  else \n   page . status ( 501 )  end   See the  File Uploads  section.",
            "title": "Uploads"
        },
        {
            "location": "/server/modules/pages/usage/#cookies",
            "text": "See  Cookies  in the Pages API documentation.",
            "title": "Cookies"
        },
        {
            "location": "/server/modules/pages/usage/#headers",
            "text": "To access the request headers, use the  headers  property of the pages object instance. The headers are in a  table  as name/value pairs.  Example  local   page   =   core . pages . new ()  local   headers   =   page . headers  --print \"Host\" header  print ( headers [ \"Host\" ])  --Loop over headers name/values  for   name ,   val   in   pairs ( headers )   do \n   print ( name .. \"=\" .. val )  end",
            "title": "Headers"
        },
        {
            "location": "/server/modules/pages/usage/#core-modules",
            "text": "You can use any of the core server modules in dynamic pages.  Example Template  <!-- user.tpl -->  < html > \n   < body > \n     < h1 > {{ name }} </ h1 > \n     < p > {{ age }} </ p > \n     < p > {{ _id }} </ p > \n   </ body >  </ html >   Example Lua  -- user.lua  local   page   =   core . pages . new ()  local   function   processPage () \n   local   users   =   core . data ( \"users\" ) \n   local   doc   =   users : get ( \"id1234\" ) \n\n   page . render ( '/user.tpl' ,   doc )  end  --# Incoming  if   page . isGet   then \n   processPage ()  else \n   page . status ( 501 )  end",
            "title": "Core Modules"
        },
        {
            "location": "/server/modules/pages/usage/#files-directory",
            "text": "Files uploaded to the  files/public  directory using the  Files  module can be displayed using page templates. When referencing a file in a template, the path will be checked in the  pages  directory first. If no file is found, then the  files/public  directory path will be checked.",
            "title": "Files Directory"
        },
        {
            "location": "/server/modules/pages/api/",
            "text": "Provides methods to handle web based requests, and issue responses. For full usage instructions see the \nUsage\n section.\n\n\n\n\nScreencasts Available\n\n\nGet a basic overview of using the Pages API in a screencast format. \nClick here for Part I\n. \nClick here for Part II\n.\n\n\n\n\nnew\n\n\nCreates a new \npages\n object instance.\n\n\ncore\n.\npages\n.\nnew\n(\n \n[\nrequest_opts\n]\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nrequest_opts\n\n\nAdditional options for the page request.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nRequest Options\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\nTimeout in milliseconds for the page request.\n\n\nNumber\n\n\n1000\n\n\n\n\n\n\nmax_file_size\n\n\nThe maximum upload file size in bytes.\n\n\nNumber\n\n\n10240\n\n\n\n\n\n\nmax_file_uploads\n\n\nMaximum amount of uploaded files per request.\n\n\nNumber\n\n\n10\n\n\n\n\n\n\n\n\nProperties\n\n\nA \npages\n object instance may contain the following properties.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nhasQuery\n\n\nIf the request contains a query string.\n\n\nBoolean\n\n\n\n\n\n\nhasForm\n\n\nIf the request body is a form.\n\n\nBoolean\n\n\n\n\n\n\nisGet\n\n\nIf the request is of type \"GET\".\n\n\nBoolean\n\n\n\n\n\n\nisPost\n\n\nIf the request is of type \"POST\".\n\n\nBoolean\n\n\n\n\n\n\nisAjax\n\n\nIf the request is an ajax style request.\n\n\nBoolean\n\n\n\n\n\n\nquery\n\n\nThe request query string as key/value pairs.\n\n\nTable\n\n\n\n\n\n\nform\n\n\nContains the form (or JSON) data as key/value pairs.\n\n\nTable\n\n\n\n\n\n\nfiles\n\n\nContains file upload objects (see \nFile Uploads\n).\n\n\nTable\n\n\n\n\n\n\ncookies\n\n\nContains any set cookie data as key/value pairs.\n\n\nTable\n\n\n\n\n\n\nheaders\n\n\nThe request headers as key/value pairs.\n\n\nTable\n\n\n\n\n\n\nmethod\n\n\nThe request method. Will be \"GET\" or \"POST\".\n\n\nString\n\n\n\n\n\n\npath\n\n\nThe uri request path.\n\n\nString\n\n\n\n\n\n\n\n\nConstants\n\n\nThe \npages\n object has the following constants available.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nThe GET HTTP method.\n\n\n\"GET\"\n\n\n\n\n\n\nPOST\n\n\nThe POST HTTP method.\n\n\n\"POST\"\n\n\n\n\n\n\nHTML\n\n\nThe HTML content type.\n\n\n\"text/html\"\n\n\n\n\n\n\nJSON\n\n\nThe JSON content type.\n\n\n\"application/json\"\n\n\n\n\n\n\nTEXT\n\n\nThe plain text content type.\n\n\n\"text/plain\"\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\n\n\n\nOutput\n\n\nresponse\n\n\nSends the configured response back to the client browser. \n\n\n<\npage\n-\nobject\n>\n.\nresponse\n(\nbody\n[,\n \nheaders\n][,\n \ncontent\n][,\n \nstatus\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nThe data to output to the client browser.\n\n\nString\n\n\nY\n\n\n\n\n\n\nheaders\n\n\nAdditional headers to send to the client browser.\n\n\nTable\n\n\nN\n\n\n\n\n\n\ncontent\n\n\nThe content-type to output to the client browser.\n\n\nConst\n\n\nN\n\n\n\n\n\n\nstatus\n\n\nNumerical http status code to output to the client browser.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nOne this method is called, the response phase will end. You cannot issue a \nredirect\n or \nstatus\n after calling this method.\n\n\n\n\n\n\nFor more detailed examples see the \nUsage\n section.\n\n\n\n\nExample\n\n\npage\n.\nresponse\n(\n\"Hello There\"\n)\n\n\n\n\n\n\nrender\n\n\nA helper method that will render a \ntemplate\n and then issue a page \nresponse\n as HTML (\ntext/html\n).\n\n\n<\npage\n-\nobject\n>\n.\nrender\n(\ntpl_path\n,\n \ntpl_values\n[,\n \nheaders\n])\n\n\n\n\n\n\n\n\nImportant\n\n\nIf you use this helper method, DO NOT use the \nresponse\n method.\n\n\n\n\nExample\n\n\npage\n.\nrender\n(\ntpl_path\n,\n \ntpl_values\n[,\n \nheaders\n])\n\n\n\n\n\n\nrenderJson\n\n\nA helper method that will output JSON (\napplication/json\n) as a page response. Used for AJAX style responses.\n\n\n<\npage\n-\nobject\n>\n.\nrenderJson\n(\ndata_tbl\n[,\n \nheaders\n])\n\n\n\n\n\n\n\n\nImportant\n\n\nIf you use this helper method, DO NOT use the \nresponse\n method.\n\n\n\n\nExample\n\n\npage\n.\nrenderJson\n(\ndata_tbl\n[,\n \nheaders\n])\n\n\n\n\n\n\nrenderText\n\n\nA helper method that will output plain text (\ntext/plain\n) as a page response.\n\n\n<\npage\n-\nobject\n>\n.\nrenderText\n(\ntext\n[,\n \nheaders\n])\n\n\n\n\n\n\n\n\nImportant\n\n\nIf you use this helper method, DO NOT use the \nresponse\n method.\n\n\n\n\nExample\n\n\npage\n.\nrenderText\n(\n\"This is plain text output\"\n)\n\n\n\n\n\n\nUtilities\n\n\ntemplate\n\n\nCompiles a template file with the supplied values. Returns \nstring\n body, or nil and error.\n\n\n<\npage\n-\nobject\n>\n.\ntemplate\n(\ntpl_file\n,\n \ntpl_values\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntpl_file\n\n\nThe template file name.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntpl_values\n\n\nValues for the template.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nFor detailed template usage information see the \nTemplates\n section.\n\n\n\n\nExample\n\n\nlocal\n \nbody\n \n=\n \npage\n.\ntemplate\n(\n\"greeting.tpl\"\n,\n \n{\ngreet\n=\n\"Hello!\"\n})\n\n\n\n\n\n\nredirect\n\n\nRedirect the client browser to a different location.\n\n\n<\npage\n-\nobject\n>\n.\nredirect\n(\nuri\n[,\n \nisPerm\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuri\n\n\nThe address to redirect the client browser to.\n\n\nString\n\n\nY\n\n\n\n\n\n\nisPerm\n\n\nWhether this is a premanent redirect. Default: \nfalse\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nOne this method is called, the response phase will end. You cannot issue a \nresponse\n or \nstatus\n after calling this method.\n\n\n\n\n\n\nThe uri can be a remote address, for example: \nhttps://google.com\n\n\n\n\nExample\n\n\npage\n.\nredirect\n(\n\"/anotherpage\"\n)\n\n\n\n\n\n\nstatus\n\n\nEnd the response by sending an HTTP status code to the client browser.\n\n\n<\npage\n-\nobject\n>\n.\nstatus\n(\ncode\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncode\n\n\nHTTP numerical status code (\nreference\n).\n\n\nNumber\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nOne this method is called, the response phase will end. You cannot issue a \nresponse\n or \nredirect\n after calling this method.\n\n\n\n\nExample\n\n\n--send `Unauthorized` status\n\n\npage\n.\nstatus\n(\n401\n)\n\n\n\n\n\n\nUploads\n\n\nsaveFile\n\n\nSave an uploaded file to the \nfiles\n directory. On success, returns file information table, or \nnil\n and an error.\n\n\n<\npage\n-\nobject\n>\n.\nsaveFile\n(\nfileObj\n,\n \ndestPath\n[,\n \nunique\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfileObj\n\n\nA file object reference. See \nFile Uploads\n.\n\n\nObject\n\n\nY\n\n\n\n\n\n\ndestPath\n\n\nPath to store the file relative to the \nfiles\n directory.\n\n\nString\n\n\nY\n\n\n\n\n\n\nunique\n\n\nGenerate a unique file name for the file. Default: \nfalse\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\n\n\nPublic Files\n\n\nIf you plan on displaying uploaded images or allowing downloads of your files from the browser, make sure to save them to the \npublic\n directory.\n\n\n\n\nExample\n\n\nlocal\n \ninfo\n,\n \nerr\n \n=\n \npage\n.\nsaveFile\n(\npage\n.\nfiles\n.\navatar\n,\n \n'/pix'\n)\n\n\n\n\n\n\nFile Info Keys\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nThe base name the file was stored as.\n\n\n\n\n\n\ntype\n\n\nThe file \nMIME\n type. Example: 'image/png'.\n\n\n\n\n\n\nsize\n\n\nThe total file size in bytes.\n\n\n\n\n\n\npath\n\n\nThe absolute file path where the file was stored.\n\n\n\n\n\n\ndirpath\n\n\nThe absolute directory path where the file was stored.\n\n\n\n\n\n\n\n\ndiscardFile\n\n\nClear the uploaded file from the temp directory. Use when you want to abort the actual storage of the file.\n\n\n<\npage\n-\nobject\n>\n.\ndiscardFile\n(\nfileObj\n)\n\n\n\n\n\n\n\n\nUsage Note\n\n\nThe \nsaveFile\n method automatically removes the uploaded file from the temp directory.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfileObj\n\n\nA file object reference. See \nFile Uploads\n.\n\n\nObject\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nsuccess\n,\n \nerr\n \n=\n \npage\n.\ndiscardFile\n(\npage\n.\nfiles\n.\navatar\n)\n\n\n\n\n\n\nCookies\n\n\nRetrieving cookies\n\n\nTo retrieve a set cookie value, use the \ncookies\n property of the \npage\n object.\n\n\nExample\n\n\nlocal\n \nuserName\n \n=\n \npage\n.\ncookies\n.\nuserName\n\n\n\n\n\n\nsetCookie\n\n\nSet a browser cookie key/value.\n\n\n<\npage\n-\nobject\n>\n.\nsetCookie\n(\nkey\n,\n \nvalue\n[,\n \noptions\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nThe cookie key name.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalue\n\n\nThe cookie key value.\n\n\nString\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options for the cookie.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nCookie Options\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe path on which this cookie is active.\n\n\nString\n\n\n/\n\n\n\n\n\n\nsecure\n\n\nOnly serve this cookie when using HTTPS.\n\n\nBoolean\n\n\nfalse\n\n\n\n\n\n\nhttponly\n\n\nDisable cookie from client-side access.\n\n\nBoolean\n\n\nfalse\n\n\n\n\n\n\nexpires\n\n\nHow many days until this cookie expires.\n\n\nNumber\n\n\n0\n\n\n\n\n\n\n\n\n\n\nCookie Expiration\n\n\nBy default, cookies are cleared when the user closes the browser window using the cookie. Set the \nexpires\n key to set a persistent cookie.\n\n\n\n\nExample\n\n\npage\n.\nsetCookie\n(\n\"userName\"\n,\n \n\"Timmy\"\n,\n \n{\n\n  \nexpires\n \n=\n \n2\n \n-- expires in two days\n\n\n})\n\n\n\n\n\n\nclearCookie\n\n\nClear a browser cookie key/value.\n\n\n<\npage\n-\nobject\n>\n.\nclearCookie\n(\nkey\n[,\n \npath\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nThe cookie key name.\n\n\nString\n\n\nY\n\n\n\n\n\n\npath\n\n\nThe path on which this cookie is active.\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\n\n\nCookie Path\n\n\nMost browsers require the cookie path to clear the cookie value if the cookie path has been set to something other than root (\n/\n).\n\n\n\n\nExample\n\n\npage\n.\nclearCookie\n(\n\"userName\"\n)\n\n\n\n\n\n\nProject APIs\n\n\ncallApi\n\n\nCall a method on a project api endpoint that was built using the \ncore.api\n.\n\n\n<\npage\n-\nobject\n>\n.\ncallApi\n(\nproject\n,\n \naction\n,\n \ndata_params\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nproject\n\n\nThe name of the api project.\n\n\nString\n\n\nY\n\n\n\n\n\n\naction\n\n\nThe name of the api method to call.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndata_params\n\n\nValues to pass to the api method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \npage\n.\ncallApi\n(\n\"default\"\n,\n \n\"test\"\n,\n \n{\ngreet\n=\n\"Hello!\"\n})",
            "title": "Pages API"
        },
        {
            "location": "/server/modules/pages/api/#new",
            "text": "Creates a new  pages  object instance.  core . pages . new (   [ request_opts ]   )   Parameters     Name  Description  Type  Required      request_opts  Additional options for the page request.  Table  N     Request Options     Name  Description  Type  Default      timeout  Timeout in milliseconds for the page request.  Number  1000    max_file_size  The maximum upload file size in bytes.  Number  10240    max_file_uploads  Maximum amount of uploaded files per request.  Number  10     Properties  A  pages  object instance may contain the following properties.     Name  Description  Type      hasQuery  If the request contains a query string.  Boolean    hasForm  If the request body is a form.  Boolean    isGet  If the request is of type \"GET\".  Boolean    isPost  If the request is of type \"POST\".  Boolean    isAjax  If the request is an ajax style request.  Boolean    query  The request query string as key/value pairs.  Table    form  Contains the form (or JSON) data as key/value pairs.  Table    files  Contains file upload objects (see  File Uploads ).  Table    cookies  Contains any set cookie data as key/value pairs.  Table    headers  The request headers as key/value pairs.  Table    method  The request method. Will be \"GET\" or \"POST\".  String    path  The uri request path.  String     Constants  The  pages  object has the following constants available.     Name  Description  Value      GET  The GET HTTP method.  \"GET\"    POST  The POST HTTP method.  \"POST\"    HTML  The HTML content type.  \"text/html\"    JSON  The JSON content type.  \"application/json\"    TEXT  The plain text content type.  \"text/plain\"     Example  local   page   =   core . pages . new ()",
            "title": "new"
        },
        {
            "location": "/server/modules/pages/api/#output",
            "text": "",
            "title": "Output"
        },
        {
            "location": "/server/modules/pages/api/#response",
            "text": "Sends the configured response back to the client browser.   < page - object > . response ( body [,   headers ][,   content ][,   status ])   Parameters     Name  Description  Type  Required      body  The data to output to the client browser.  String  Y    headers  Additional headers to send to the client browser.  Table  N    content  The content-type to output to the client browser.  Const  N    status  Numerical http status code to output to the client browser.  Number  N      Important  One this method is called, the response phase will end. You cannot issue a  redirect  or  status  after calling this method.    For more detailed examples see the  Usage  section.   Example  page . response ( \"Hello There\" )",
            "title": "response"
        },
        {
            "location": "/server/modules/pages/api/#render",
            "text": "A helper method that will render a  template  and then issue a page  response  as HTML ( text/html ).  < page - object > . render ( tpl_path ,   tpl_values [,   headers ])    Important  If you use this helper method, DO NOT use the  response  method.   Example  page . render ( tpl_path ,   tpl_values [,   headers ])",
            "title": "render"
        },
        {
            "location": "/server/modules/pages/api/#renderjson",
            "text": "A helper method that will output JSON ( application/json ) as a page response. Used for AJAX style responses.  < page - object > . renderJson ( data_tbl [,   headers ])    Important  If you use this helper method, DO NOT use the  response  method.   Example  page . renderJson ( data_tbl [,   headers ])",
            "title": "renderJson"
        },
        {
            "location": "/server/modules/pages/api/#rendertext",
            "text": "A helper method that will output plain text ( text/plain ) as a page response.  < page - object > . renderText ( text [,   headers ])    Important  If you use this helper method, DO NOT use the  response  method.   Example  page . renderText ( \"This is plain text output\" )",
            "title": "renderText"
        },
        {
            "location": "/server/modules/pages/api/#utilities",
            "text": "",
            "title": "Utilities"
        },
        {
            "location": "/server/modules/pages/api/#template",
            "text": "Compiles a template file with the supplied values. Returns  string  body, or nil and error.  < page - object > . template ( tpl_file ,   tpl_values )   Parameters     Name  Description  Type  Required      tpl_file  The template file name.  String  Y    tpl_values  Values for the template.  Table  Y      For detailed template usage information see the  Templates  section.   Example  local   body   =   page . template ( \"greeting.tpl\" ,   { greet = \"Hello!\" })",
            "title": "template"
        },
        {
            "location": "/server/modules/pages/api/#redirect",
            "text": "Redirect the client browser to a different location.  < page - object > . redirect ( uri [,   isPerm ])   Parameters     Name  Description  Type  Required      uri  The address to redirect the client browser to.  String  Y    isPerm  Whether this is a premanent redirect. Default:  false  Boolean  N      Important  One this method is called, the response phase will end. You cannot issue a  response  or  status  after calling this method.    The uri can be a remote address, for example:  https://google.com   Example  page . redirect ( \"/anotherpage\" )",
            "title": "redirect"
        },
        {
            "location": "/server/modules/pages/api/#status",
            "text": "End the response by sending an HTTP status code to the client browser.  < page - object > . status ( code )   Parameters     Name  Description  Type  Required      code  HTTP numerical status code ( reference ).  Number  Y      Important  One this method is called, the response phase will end. You cannot issue a  response  or  redirect  after calling this method.   Example  --send `Unauthorized` status  page . status ( 401 )",
            "title": "status"
        },
        {
            "location": "/server/modules/pages/api/#uploads",
            "text": "",
            "title": "Uploads"
        },
        {
            "location": "/server/modules/pages/api/#savefile",
            "text": "Save an uploaded file to the  files  directory. On success, returns file information table, or  nil  and an error.  < page - object > . saveFile ( fileObj ,   destPath [,   unique ])   Parameters     Name  Description  Type  Required      fileObj  A file object reference. See  File Uploads .  Object  Y    destPath  Path to store the file relative to the  files  directory.  String  Y    unique  Generate a unique file name for the file. Default:  false  Boolean  N      Public Files  If you plan on displaying uploaded images or allowing downloads of your files from the browser, make sure to save them to the  public  directory.   Example  local   info ,   err   =   page . saveFile ( page . files . avatar ,   '/pix' )   File Info Keys     Key  Description      file  The base name the file was stored as.    type  The file  MIME  type. Example: 'image/png'.    size  The total file size in bytes.    path  The absolute file path where the file was stored.    dirpath  The absolute directory path where the file was stored.",
            "title": "saveFile"
        },
        {
            "location": "/server/modules/pages/api/#discardfile",
            "text": "Clear the uploaded file from the temp directory. Use when you want to abort the actual storage of the file.  < page - object > . discardFile ( fileObj )    Usage Note  The  saveFile  method automatically removes the uploaded file from the temp directory.   Parameters     Name  Description  Type  Required      fileObj  A file object reference. See  File Uploads .  Object  Y     Example  local   success ,   err   =   page . discardFile ( page . files . avatar )",
            "title": "discardFile"
        },
        {
            "location": "/server/modules/pages/api/#cookies",
            "text": "",
            "title": "Cookies"
        },
        {
            "location": "/server/modules/pages/api/#retrieving-cookies",
            "text": "To retrieve a set cookie value, use the  cookies  property of the  page  object.  Example  local   userName   =   page . cookies . userName",
            "title": "Retrieving cookies"
        },
        {
            "location": "/server/modules/pages/api/#setcookie",
            "text": "Set a browser cookie key/value.  < page - object > . setCookie ( key ,   value [,   options ])   Parameters     Name  Description  Type  Required      key  The cookie key name.  String  Y    value  The cookie key value.  String  Y    options  Additional options for the cookie.  Table  N     Cookie Options     Name  Description  Type  Default      path  The path on which this cookie is active.  String  /    secure  Only serve this cookie when using HTTPS.  Boolean  false    httponly  Disable cookie from client-side access.  Boolean  false    expires  How many days until this cookie expires.  Number  0      Cookie Expiration  By default, cookies are cleared when the user closes the browser window using the cookie. Set the  expires  key to set a persistent cookie.   Example  page . setCookie ( \"userName\" ,   \"Timmy\" ,   { \n   expires   =   2   -- expires in two days  })",
            "title": "setCookie"
        },
        {
            "location": "/server/modules/pages/api/#clearcookie",
            "text": "Clear a browser cookie key/value.  < page - object > . clearCookie ( key [,   path ])   Parameters     Name  Description  Type  Required      key  The cookie key name.  String  Y    path  The path on which this cookie is active.  String  N      Cookie Path  Most browsers require the cookie path to clear the cookie value if the cookie path has been set to something other than root ( / ).   Example  page . clearCookie ( \"userName\" )",
            "title": "clearCookie"
        },
        {
            "location": "/server/modules/pages/api/#project-apis",
            "text": "",
            "title": "Project APIs"
        },
        {
            "location": "/server/modules/pages/api/#callapi",
            "text": "Call a method on a project api endpoint that was built using the  core.api .  < page - object > . callApi ( project ,   action ,   data_params )   Parameters     Name  Description  Type  Required      project  The name of the api project.  String  Y    action  The name of the api method to call.  String  Y    data_params  Values to pass to the api method.  Table  Y     Example  local   result ,   err   =   page . callApi ( \"default\" ,   \"test\" ,   { greet = \"Hello!\" })",
            "title": "callApi"
        },
        {
            "location": "/server/modules/pages/templates/",
            "text": "A template is simply an HTML file laced with template tags that will be filled in by values dynamically. \n\n\nTemplate files are stored relative to the file that will be using them. The file referencing the template will be the .lua pages file.\n\n\nExample Template\n\n\nStored in /home/coronium/pages/users/show.tpl\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\n{{ title }}\n</\ntitle\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n>\n\n    \n<\np\n>\n{{ message }}\n</\np\n>\n\n  \n</\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nExample Lua\n\n\nStored in /home/coronium/pages/users/show.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \ndata\n \n=\n \n\n{\n\n  \ntitle\n \n=\n \n\"Welcome!\"\n,\n\n  \nmessage\n \n=\n \n\"You are now using templates.\"\n\n\n}\n\n\n\nlocal\n \nbody\n \n=\n \npage\n.\ntemplate\n(\n\"show.tpl\"\n,\n \ndata\n)\n\n\n\npage\n.\nresponse\n(\nbody\n)\n\n\n\n\n\n\nBrowser Location\n\n\nPath: https://my.coronium.com/users/show\n\n\nSee also:\n \npage.render\n\n\n\n\nTip\n\n\nTo keep your template code from accidentally being viewed raw in the browser, be sure to name all template files with the \n.tpl\n extension.\n\n\n\n\nTemplate Tags\n\n\nEscaped Value\n\n\n{{ expression }}\n\n\n\n\n\nPlain Value\n\n\n{* expression *}\n\n\n\n\n\nLua Code\n\n\n{% code here %}\n\n\n\n\n\nInclude\n\n\n{(other.tpl)}\n\n\n\n\n\nRaw Block\n\n\n{-raw-}non-interpolated text{-raw-}\n\n\n\n\n\nLooping Data\n\n\nTemplate loops allow you to \"loop\" over data and generate the output.\n\n\nA Loop:\n\n\n{% for idx, item in ipairs(items) do %}\n  <div>{{ item }} is item number {{ idx }}</div>\n{% end %}\n\n\n\n\n\nExample Template\n\n\n<!-- users.tpl -->\n<html>\n<head>\n  <title>{{ title }}</title>\n</head>\n<body>\n  <div class=\"container\">\n    <ul class=\"user-list\">\n      {% for _, user in ipairs( users ) do %}\n      <li class=\"user\">{{ user.first }} {{ user.last }}</li>\n      {% end %}\n    </ul>\n  </div>\n</body>\n</html>\n\n\n\n\n\nExample Page Lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \ndata\n \n=\n\n\n{\n\n  \ntitle\n \n=\n \n\"Users\"\n,\n\n  \nusers\n \n=\n\n  \n{\n\n    \n{\n \nfirst\n=\n\"Jim\"\n,\n \nlast\n=\n\"Bell\"\n \n},\n\n    \n{\n \nfirst\n=\n\"Dani\"\n,\n \nlast\n=\n\"Bell\"\n \n}\n\n  \n}\n\n\n}\n\n\n\npage\n.\nrender\n(\n'/users.tpl'\n,\n \ndata\n)\n\n\n\n\n\n\nOutput\n\n\n<html>\n<head>\n  <title>Users</title>\n</head>\n<body>\n  <div class=\"container\">\n    <ul class=\"user-list\">\n      <li class=\"user\">Jim Bell</li>\n      <li class=\"user\">Dani Bell</li>\n    </ul>\n  </div>\n</body>\n</html>\n\n\n\n\n\nAsynchrous Request\n\n\nTo check for an asynchrous request, you can use the \nisAjax\n property of the pages object instance, and output the data in the required format.\n\n\nExample Page Lua\n\n\n--cat.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \ncat\n \n=\n \n{\n\n  \nname\n \n=\n \n'Snookie'\n\n\n}\n\n\n\nlocal\n \nfunction\n \nrenderPage\n()\n\n  \nif\n \npage\n.\nisAjax\n \nthen\n\n    \n--return as JSON\n\n    \npage\n.\nrenderJson\n(\n \ncat\n \n)\n\n  \nelse\n\n    \n--or render template\n\n    \npage\n.\nrender\n(\n \n'/cat.tpl'\n,\n \ncat\n \n)\n\n  \nend\n\n\nend\n\n\n\n--incoming\n\n\nif\n \npage\n.\nisGet\n \nthen\n\n  \nrenderPage\n()\n\n\nelse\n\n  \npage\n.\nstatus\n(\n501\n)\n\n\nend\n\n\n\n\n\n\nExample Template\n\n\nEndpoint: \nhttp(s)://my.coronium.com/cat\n\n\n<!-- cat.tpl -->\n\nCat: {{ name }}\n\n\n\n\n\nExample HTML\n\n\nEndpoint: \nhttp(s)://my.coronium.com/cat.html\n\n\nUsing JQuery\n\n\n<!-- cat.html -->\n\n\n<\nhtml\n>\n\n    \n<\nhead\n>\n\n    \n<\nscript\n \nsrc\n=\n\"https://code.jquery.com/jquery-3.3.1.min.js\"\n \ncrossorigin\n=\n\"anonymous\"\n></\nscript\n>\n\n    \n</\nhead\n>\n\n    \n<\nbody\n>\n\n    \n<\ndiv\n \nid\n=\n\"cat\"\n>\ncat name goes here\n</\ndiv\n>\n\n    \n<\nscript\n>\n\n      \n$\n.\ngetJSON\n(\n\"/cat\"\n,\n \nfunction\n(\ndata\n)\n \n{\n\n        \n$\n(\n'#cat'\n).\ntext\n(\n\"Cat: \"\n+\ndata\n.\nname\n);\n\n      \n});\n\n    \n</\nscript\n>\n\n  \n</\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nOutput\n\n\nCat: Snookie",
            "title": "Templates"
        },
        {
            "location": "/server/modules/pages/templates/#template-tags",
            "text": "Escaped Value  {{ expression }}  Plain Value  {* expression *}  Lua Code  {% code here %}  Include  {(other.tpl)}  Raw Block  {-raw-}non-interpolated text{-raw-}",
            "title": "Template Tags"
        },
        {
            "location": "/server/modules/pages/templates/#looping-data",
            "text": "Template loops allow you to \"loop\" over data and generate the output.  A Loop:  {% for idx, item in ipairs(items) do %}\n  <div>{{ item }} is item number {{ idx }}</div>\n{% end %}  Example Template  <!-- users.tpl -->\n<html>\n<head>\n  <title>{{ title }}</title>\n</head>\n<body>\n  <div class=\"container\">\n    <ul class=\"user-list\">\n      {% for _, user in ipairs( users ) do %}\n      <li class=\"user\">{{ user.first }} {{ user.last }}</li>\n      {% end %}\n    </ul>\n  </div>\n</body>\n</html>  Example Page Lua  local   page   =   core . pages . new ()  local   data   =  { \n   title   =   \"Users\" , \n   users   = \n   { \n     {   first = \"Jim\" ,   last = \"Bell\"   }, \n     {   first = \"Dani\" ,   last = \"Bell\"   } \n   }  }  page . render ( '/users.tpl' ,   data )   Output  <html>\n<head>\n  <title>Users</title>\n</head>\n<body>\n  <div class=\"container\">\n    <ul class=\"user-list\">\n      <li class=\"user\">Jim Bell</li>\n      <li class=\"user\">Dani Bell</li>\n    </ul>\n  </div>\n</body>\n</html>",
            "title": "Looping Data"
        },
        {
            "location": "/server/modules/pages/templates/#asynchrous-request",
            "text": "To check for an asynchrous request, you can use the  isAjax  property of the pages object instance, and output the data in the required format.  Example Page Lua  --cat.lua  local   page   =   core . pages . new ()  local   cat   =   { \n   name   =   'Snookie'  }  local   function   renderPage () \n   if   page . isAjax   then \n     --return as JSON \n     page . renderJson (   cat   ) \n   else \n     --or render template \n     page . render (   '/cat.tpl' ,   cat   ) \n   end  end  --incoming  if   page . isGet   then \n   renderPage ()  else \n   page . status ( 501 )  end   Example Template  Endpoint:  http(s)://my.coronium.com/cat  <!-- cat.tpl --> \nCat: {{ name }}  Example HTML  Endpoint:  http(s)://my.coronium.com/cat.html  Using JQuery  <!-- cat.html -->  < html > \n     < head > \n     < script   src = \"https://code.jquery.com/jquery-3.3.1.min.js\"   crossorigin = \"anonymous\" ></ script > \n     </ head > \n     < body > \n     < div   id = \"cat\" > cat name goes here </ div > \n     < script > \n       $ . getJSON ( \"/cat\" ,   function ( data )   { \n         $ ( '#cat' ). text ( \"Cat: \" + data . name ); \n       }); \n     </ script > \n   </ body >  </ html >   Output  Cat: Snookie",
            "title": "Asynchrous Request"
        },
        {
            "location": "/server/modules/pages/uploads/",
            "text": "The Coronium Pages module supports file uploads using the 'multipart/form-data' form encoding type. These uploaded files can be stored in the Coronium \nfiles\n directory for further usage.\n\n\nAccessing Uploads\n\n\nUploaded files are stored in the \npage.files\n property of the \npage\n object as \nfile objects\n. You can access a file object by its form input name. For sake of an example, let us assume the following form to upload a file:\n\n\n<\nform\n \naction\n=\n\"\"\n \nmethod\n=\n\"POST\"\n \nenctype\n=\n\"multipart/form-data\"\n>\n\n  \n<\ninput\n \ntype\n=\n\"file\"\n \nname\n=\n\"avatar\"\n \nid\n=\n\"avatar\"\n>\n\n  \n<\nbutton\n \ntype\n=\n\"submit\"\n>\nUpload Avatar\n</\nbutton\n>\n\n\n</\nform\n>\n\n\n\n\n\n\nOnce this form is posted to the Coronium Page, you can access the \"avatar\" file object like so:\n\n\nlocal\n \navatarObj\n \n=\n \npage\n.\nfiles\n.\navatar\n\n\n\n\n\n\nFile Upload Objects\n\n\nFile objects have a handful of properties that you can inspect. This can be helpful when looking for a specific file type or size.\n\n\nFile Object Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nThe raw name the uploaded file.\n\n\n\n\n\n\ntype\n\n\nThe file \nMIME\n type. Example: 'image/png'.\n\n\n\n\n\n\nsize\n\n\nThe total file size in bytes.\n\n\n\n\n\n\n\n\nFor example, to verify an upload is a \n.png\n image:\n\n\nlocal\n \navatarObj\n \n=\n \npage\n.\nfiles\n.\navatar\n\n\n\nif\n \navatarObj\n.\ntype\n \n==\n \n'image/png'\n \nthen\n\n  \n--save file upload\n\n\nelse\n\n  \n--wrong file type, discard upload\n\n\nend\n\n\n\n\n\n\nHandling Uploads\n\n\nOnce you have a reference to a file object, you can save it to the \nfiles\n directory on your Coronium server. \n\n\nAll uploads are stored in a temporary directory until saved. If you determine that the file is not needed, or is of the incorrect type or size, you should \"discard\" the uploaded file to keep this temporary directory clean (see \nDiscarding\n below).\n\n\nWhen you successfully save an upload, the uploaded file is automatically removed from the temporary directory.\n\n\nSaving\n\n\nTo save an uploaded file, use the \npage.saveFile\n method with a reference to the file object:\n\n\nlocal\n \navatarObj\n \n=\n \npage\n.\nfiles\n.\navatar\n\n\n\nlocal\n \ninfo\n,\n \nerr\n \n=\n \npage\n.\nsaveFile\n(\navatarObj\n,\n \n'/avatars'\n)\n\n\n\nif\n \nnot\n \ninfo\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n \n-- log error\n\n\nelse\n\n  \ncore\n.\nlog\n(\n\"Saved file at \"\n..\ninfo\n.\npath\n)\n\n\nend\n\n\n\n\n\n\nThe \nsaveFile\n method returns an \ninfo\n object on success. See the \nsaveFile\n method for details on what keys this object exposes.\n\n\nThe \nunique\n Flag\n\n\nBy default, an uploaded file will be saved using its \"raw\" name as submitted by the form. To create a unique name for the file upload -- to prevent overwriting an existing file for example -- you can pass the \nunique\n boolean flag to the \nsaveFile\n method.\n\n\nlocal\n \navatarObj\n \n=\n \npage\n.\nfiles\n.\navatar\n\n\n\n--pass true as the third argument to create a unique name\n\n\nlocal\n \ninfo\n,\n \nerr\n \n=\n \npage\n.\nsaveFile\n(\navatarObj\n,\n \n'/avatars'\n,\n \ntrue\n)\n\n\n\nif\n \nnot\n \ninfo\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n \n-- log error\n\n\nelse\n\n  \ncore\n.\nlog\n(\n\"Saved file as \"\n..\ninfo\n.\nfile\n)\n \n--info.file holds the unique name\n\n\nend\n\n\n\n\n\n\nStorage Paths\n\n\nFiles are stored relative to the \nfiles\n directory on your Coronium server. In the two examples above, we have provided '/avatars' as the relative path to store the image. This would result in the image being stored at \n/home/coronium/files/avatars/<image-name>.png\n.\n\n\nDiscarding\n\n\nAs mentioned above, if for any reason you decide to \nnot\n save the uploaded file, you should \"discard\" it to keep the temporary directory clean.\n\n\nYou can discard a file by using the \ndiscardFile\n method with a reference to the file object you want to discard.\n\n\nExpanding on the first example above:\n\n\nlocal\n \navatarObj\n \n=\n \npage\n.\nfiles\n.\navatar\n\n\n\nif\n \navatarObj\n.\ntype\n \n==\n \n'image/png'\n \nthen\n\n  \n--save file upload\n\n  \nlocal\n \ninfo\n,\n \nerr\n \n=\n \npage\n.\nsaveFile\n(\navatarObj\n,\n \n'/avatars'\n)\n\n  \n...\n\n\nelse\n\n  \n--wrong file type, discard upload\n\n  \nlocal\n \nsuccess\n,\n \nerr\n \n=\n \npage\n.\ndiscardFile\n(\navatarObj\n)\n\n  \n...\n\n\nend\n\n\n\n\n\n\n\n\nJavaScript\n\n\nYou can also check a file type or size on the browser client using JavaScript before uploading.\n\n\n\n\nMultiple Uploads\n\n\nHandling multiple uploads is as simple as accessing the file objects and either saving or discarding them.\n\n\nAn example multiple upload form might look like:\n\n\n<\nform\n \naction\n=\n\"\"\n \nmethod\n=\n\"POST\"\n \nenctype\n=\n\"multipart/form-data\"\n>\n\n  \n<\ninput\n \ntype\n=\n\"file\"\n \nname\n=\n\"avatar\"\n \nid\n=\n\"avatar\"\n>\n\n  \n<\ninput\n \ntype\n=\n\"file\"\n \nname\n=\n\"logo\"\n \nid\n=\n\"logo\"\n>\n\n  \n<\nbutton\n \ntype\n=\n\"submit\"\n>\nUpload\n</\nbutton\n>\n\n\n</\nform\n>\n\n\n\n\n\n\nThe file objects can be accessed and saved like so:\n\n\nlocal\n \navatarObj\n \n=\n \npage\n.\nfiles\n.\navatar\n\n\nlocal\n \nlogoObj\n \n=\n \npage\n.\nfiles\n.\nlogo\n\n\n\n-- Save avatar\n\n\nlocal\n \ninfo\n,\n \nerr\n \n=\n \npage\n.\nsaveFile\n(\navatarObj\n,\n \n'/avatars'\n)\n\n\nif\n \nnot\n \ninfo\n \nthen\n\n  \ncore\n.\nlog\n(\navatarObj\n.\nfile\n..\n' had error: '\n..\nerr\n)\n\n\nend\n\n\n\n-- Save logo\n\n\nlocal\n \ninfo\n,\n \nerr\n \n=\n \npage\n.\nsaveFile\n(\nlogoObj\n,\n \n'/logos'\n)\n\n\nif\n \nnot\n \ninfo\n \nthen\n\n  \ncore\n.\nlog\n(\nlogoObj\n.\nfile\n..\n' had error: '\n..\nerr\n)\n\n\nend\n\n\n\n\n\n\nPage Upload Example\n\n\nA very basic file upload page.\n\n\n--# upload.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\n--# Generate form (GET)\n\n\nlocal\n \nfunction\n \nrenderForm\n()\n\n  \nlocal\n \nformBody\n \n=\n \n[[\n\n\n  <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\">\n\n\n    <input type=\"file\" name=\"avatar\" id=\"avatar\">\n\n\n    <button type=\"submit\">Upload</button>\n\n\n  </form>    \n\n\n  ]]\n\n\n  \npage\n.\nresponse\n(\nformBody\n)\n\n\nend\n\n\n\n--# Process form (POST)\n\n\nlocal\n \nfunction\n \nsubmitForm\n()\n\n  \nlocal\n \navatarObj\n \n=\n \npage\n.\nfiles\n.\navatar\n\n\n  \nlocal\n \ninfo\n,\n \nerr\n \n=\n \npage\n.\nsaveFile\n(\navatarObj\n,\n \n'/avatars'\n,\n \ntrue\n)\n\n  \nif\n \nnot\n \ninfo\n \nthen\n\n    \npage\n.\nresponse\n(\n\"File upload failed: \"\n..\nerr\n)\n\n  \nelse\n\n    \npage\n.\nresponse\n(\n\"Uploaded file: \"\n..\ninfo\n.\nfile\n)\n\n  \nend\n\n\nend\n\n\n\n--# Incoming Page Request\n\n\nif\n \npage\n.\nisGet\n \nthen\n\n  \nrenderForm\n()\n\n\nelseif\n \npage\n.\nisPost\n \nthen\n\n  \nsubmitForm\n()\n\n\nelse\n\n  \npage\n.\nstatus\n(\n501\n)\n\n\nend",
            "title": "File Uploads"
        },
        {
            "location": "/server/modules/pages/uploads/#accessing-uploads",
            "text": "Uploaded files are stored in the  page.files  property of the  page  object as  file objects . You can access a file object by its form input name. For sake of an example, let us assume the following form to upload a file:  < form   action = \"\"   method = \"POST\"   enctype = \"multipart/form-data\" > \n   < input   type = \"file\"   name = \"avatar\"   id = \"avatar\" > \n   < button   type = \"submit\" > Upload Avatar </ button >  </ form >   Once this form is posted to the Coronium Page, you can access the \"avatar\" file object like so:  local   avatarObj   =   page . files . avatar",
            "title": "Accessing Uploads"
        },
        {
            "location": "/server/modules/pages/uploads/#file-upload-objects",
            "text": "File objects have a handful of properties that you can inspect. This can be helpful when looking for a specific file type or size.  File Object Properties     Name  Description      file  The raw name the uploaded file.    type  The file  MIME  type. Example: 'image/png'.    size  The total file size in bytes.     For example, to verify an upload is a  .png  image:  local   avatarObj   =   page . files . avatar  if   avatarObj . type   ==   'image/png'   then \n   --save file upload  else \n   --wrong file type, discard upload  end",
            "title": "File Upload Objects"
        },
        {
            "location": "/server/modules/pages/uploads/#handling-uploads",
            "text": "Once you have a reference to a file object, you can save it to the  files  directory on your Coronium server.   All uploads are stored in a temporary directory until saved. If you determine that the file is not needed, or is of the incorrect type or size, you should \"discard\" the uploaded file to keep this temporary directory clean (see  Discarding  below).  When you successfully save an upload, the uploaded file is automatically removed from the temporary directory.",
            "title": "Handling Uploads"
        },
        {
            "location": "/server/modules/pages/uploads/#saving",
            "text": "To save an uploaded file, use the  page.saveFile  method with a reference to the file object:  local   avatarObj   =   page . files . avatar  local   info ,   err   =   page . saveFile ( avatarObj ,   '/avatars' )  if   not   info   then \n   core . log ( err )   -- log error  else \n   core . log ( \"Saved file at \" .. info . path )  end   The  saveFile  method returns an  info  object on success. See the  saveFile  method for details on what keys this object exposes.  The  unique  Flag  By default, an uploaded file will be saved using its \"raw\" name as submitted by the form. To create a unique name for the file upload -- to prevent overwriting an existing file for example -- you can pass the  unique  boolean flag to the  saveFile  method.  local   avatarObj   =   page . files . avatar  --pass true as the third argument to create a unique name  local   info ,   err   =   page . saveFile ( avatarObj ,   '/avatars' ,   true )  if   not   info   then \n   core . log ( err )   -- log error  else \n   core . log ( \"Saved file as \" .. info . file )   --info.file holds the unique name  end   Storage Paths  Files are stored relative to the  files  directory on your Coronium server. In the two examples above, we have provided '/avatars' as the relative path to store the image. This would result in the image being stored at  /home/coronium/files/avatars/<image-name>.png .",
            "title": "Saving"
        },
        {
            "location": "/server/modules/pages/uploads/#discarding",
            "text": "As mentioned above, if for any reason you decide to  not  save the uploaded file, you should \"discard\" it to keep the temporary directory clean.  You can discard a file by using the  discardFile  method with a reference to the file object you want to discard.  Expanding on the first example above:  local   avatarObj   =   page . files . avatar  if   avatarObj . type   ==   'image/png'   then \n   --save file upload \n   local   info ,   err   =   page . saveFile ( avatarObj ,   '/avatars' ) \n   ...  else \n   --wrong file type, discard upload \n   local   success ,   err   =   page . discardFile ( avatarObj ) \n   ...  end    JavaScript  You can also check a file type or size on the browser client using JavaScript before uploading.",
            "title": "Discarding"
        },
        {
            "location": "/server/modules/pages/uploads/#multiple-uploads",
            "text": "Handling multiple uploads is as simple as accessing the file objects and either saving or discarding them.  An example multiple upload form might look like:  < form   action = \"\"   method = \"POST\"   enctype = \"multipart/form-data\" > \n   < input   type = \"file\"   name = \"avatar\"   id = \"avatar\" > \n   < input   type = \"file\"   name = \"logo\"   id = \"logo\" > \n   < button   type = \"submit\" > Upload </ button >  </ form >   The file objects can be accessed and saved like so:  local   avatarObj   =   page . files . avatar  local   logoObj   =   page . files . logo  -- Save avatar  local   info ,   err   =   page . saveFile ( avatarObj ,   '/avatars' )  if   not   info   then \n   core . log ( avatarObj . file .. ' had error: ' .. err )  end  -- Save logo  local   info ,   err   =   page . saveFile ( logoObj ,   '/logos' )  if   not   info   then \n   core . log ( logoObj . file .. ' had error: ' .. err )  end",
            "title": "Multiple Uploads"
        },
        {
            "location": "/server/modules/pages/uploads/#page-upload-example",
            "text": "A very basic file upload page.  --# upload.lua  local   page   =   core . pages . new ()  --# Generate form (GET)  local   function   renderForm () \n   local   formBody   =   [[    <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\">      <input type=\"file\" name=\"avatar\" id=\"avatar\">      <button type=\"submit\">Upload</button>    </form>        ]] \n\n   page . response ( formBody )  end  --# Process form (POST)  local   function   submitForm () \n   local   avatarObj   =   page . files . avatar \n\n   local   info ,   err   =   page . saveFile ( avatarObj ,   '/avatars' ,   true ) \n   if   not   info   then \n     page . response ( \"File upload failed: \" .. err ) \n   else \n     page . response ( \"Uploaded file: \" .. info . file ) \n   end  end  --# Incoming Page Request  if   page . isGet   then \n   renderForm ()  elseif   page . isPost   then \n   submitForm ()  else \n   page . status ( 501 )  end",
            "title": "Page Upload Example"
        },
        {
            "location": "/server/modules/pages/ajax/",
            "text": "The following explains how to access data in an asynchronous manner via AJAX using the Pages module.\n\n\nPage Response Module\n\n\nYou will need to create a \"response\" module that will placed in the same directory where your display page(s) reside. This module can talk to Coronium Core modules, and then you'll send back the responses.\n\n\nDirectory Structure\n\n\npages/\n  ajax.html\n  ajax.lua\n  qwest.html\n\n\n\n\n\nIn the \najax.lua\n we set up methods to respond to the AJAX page requests. The passed in values from an AJAX call are in the \npage.form\n object when using the POST method.\n\n\n\n\nPOST Method\n\n\nFor ease of use, you should always make your AJAX calls using the POST method.\n\n\n\n\najax.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nfunction\n \nprocessPost\n()\n\n\n  \nlocal\n \naction\n \n=\n \npage\n.\nform\n.\naction\n\n\n  \nif\n \naction\n \n==\n \n\"get-timestamp\"\n \nthen\n\n    \nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ntimestamp\n(\npage\n.\nform\n.\ntime\n)\n\n    \npage\n.\nrenderJson\n({\ntimestamp\n \n=\n \nres\n})\n\n  \nelse\n\n    \npage\n.\nrenderJson\n({\nerror\n \n=\n \n\"Action not found\"\n})\n\n  \nend\n\n\n\nend\n\n\n\n--# incoming\n\n\nif\n \npage\n.\nisPost\n \nthen\n\n  \nprocessPost\n()\n\n\nelse\n\n  \npage\n.\nstatus\n(\n501\n)\n\n\nend\n\n\n\n\n\n\n\n\nServer-side Modules\n\n\nFor more advanced use cases you can access your custom server-side API modules in the response methods using \npage.callApi\n.\n\n\n\n\nExamples\n\n\nXMLHttpRequest\n\n\najax.html\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nbody\n>\n\n    \n<\nh1\n>\nThe XMLHttpRequest Object\n</\nh1\n>\n\n\n    \n<\ndiv\n \nid\n=\n\"demo\"\n>\n\n\n      \n<!-- Post to `ajax`, no .lua extension -->\n\n      \n<\nbutton\n \ntype\n=\n\"button\"\n\n      \nonclick\n=\n\"loadDoc('/ajax', myFunction)\"\n>\nGet MySQL Timestamp\n      \n</\nbutton\n>\n\n\n    \n</\ndiv\n>\n\n\n    \n<\nscript\n>\n\n      \nfunction\n \nloadDoc\n(\nurl\n,\n \ncFunction\n)\n \n{\n\n        \n//Get UNIX time\n\n        \nvar\n \ntime\n \n=\n \nMath\n.\nfloor\n(\nDate\n.\nnow\n()\n \n/\n \n1000\n);\n\n\n        \nvar\n \nxhttp\n;\n\n\n        \nxhttp\n=\nnew\n \nXMLHttpRequest\n();\n\n\n        \nxhttp\n.\nonreadystatechange\n \n=\n \nfunction\n()\n \n{\n\n          \nif\n \n(\nthis\n.\nreadyState\n \n==\n \n4\n \n&&\n \nthis\n.\nstatus\n \n==\n \n200\n)\n \n{\n\n            \ncFunction\n(\nthis\n);\n\n          \n}\n\n        \n};\n\n\n        \nxhttp\n.\nopen\n(\n\"POST\"\n,\n \nurl\n,\n \ntrue\n);\n\n        \n//Set Content Type\n\n        \nxhttp\n.\nsetRequestHeader\n(\n\"Content-Type\"\n,\n \n\"application/json\"\n)\n\n        \n//Mark as AJAX request\n\n        \nxhttp\n.\nsetRequestHeader\n(\n\"X-Requested-With\"\n,\n \n\"XMLHttpRequest\"\n)\n\n\n        \n//Set `action` and `time` parameters here\n\n        \nvar\n \ndata\n \n=\n \n{\n\n          \naction\n:\n \n'get-timestamp'\n,\n\n          \ntime\n:\n \ntime\n\n        \n}\n\n        \nxhttp\n.\nsend\n(\nJSON\n.\nstringify\n(\ndata\n));\n\n      \n}\n\n\n      \nfunction\n \nmyFunction\n(\nxhttp\n)\n \n{\n\n        \nconsole\n.\nlog\n(\nxhttp\n);\n\n        \ndocument\n.\ngetElementById\n(\n\"demo\"\n).\ninnerHTML\n \n=\n \n        \nJSON\n.\nparse\n(\nxhttp\n.\nresponseText\n).\ntimestamp\n;\n\n      \n}\n\n    \n</\nscript\n>\n\n  \n</\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nQwest Library\n\n\nI personally prefer using the \nqwest\n library, as it uses JSON natively, making it easier to work with.\n\n\nqwest.html\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n\n<\nhead\n>\n\n\n<\nscript\n \nsrc\n=\n\"https://cdnjs.cloudflare.com/ajax/libs/qwest/4.5.0/qwest.min.js\"\n></\nscript\n>\n\n\n</\nhead\n>\n\n  \n<\nbody\n>\n\n\n  \n<\nh1\n>\nThe Qwest Library\n</\nh1\n>\n\n\n  \n<\ndiv\n \nid\n=\n\"demo\"\n>\n\n    \n<\nbutton\n \ntype\n=\n\"button\"\n \nonclick\n=\n\"loadDoc()\"\n>\nGet MySQL Timestamp\n</\nbutton\n>\n\n  \n</\ndiv\n>\n\n\n  \n<\nscript\n>\n\n    \nfunction\n \nloadDoc\n()\n \n{\n\n      \n//Post to `ajax`, no .lua extension\n\n      \nqwest\n.\npost\n(\n'/ajax'\n,\n \n{\n\n        \n//Set `action` and `time` values here\n\n        \naction\n:\n \n'get-timestamp'\n,\n\n        \ntime\n:\n \nMath\n.\nfloor\n(\nDate\n.\nnow\n()\n \n/\n \n1000\n)\n\n     \n})\n\n     \n.\nthen\n(\nfunction\n(\nxhr\n,\n \nresponse\n)\n \n{\n\n        \ndocument\n.\ngetElementById\n(\n\"demo\"\n).\ninnerHTML\n \n=\n \nresponse\n.\ntimestamp\n;\n\n     \n})\n\n     \n.\ncatch\n(\nfunction\n(\ne\n,\n \nxhr\n,\n \nresponse\n)\n \n{\n\n        \n// Process the error\n\n     \n});\n\n    \n}\n\n  \n</\nscript\n>\n\n\n  \n</\nbody\n>\n\n\n</\nhtml\n>",
            "title": "Using AJAX"
        },
        {
            "location": "/server/modules/pages/ajax/#page-response-module",
            "text": "You will need to create a \"response\" module that will placed in the same directory where your display page(s) reside. This module can talk to Coronium Core modules, and then you'll send back the responses.  Directory Structure  pages/\n  ajax.html\n  ajax.lua\n  qwest.html  In the  ajax.lua  we set up methods to respond to the AJAX page requests. The passed in values from an AJAX call are in the  page.form  object when using the POST method.   POST Method  For ease of use, you should always make your AJAX calls using the POST method.   ajax.lua  local   page   =   core . pages . new ()  local   function   processPost () \n\n   local   action   =   page . form . action \n\n   if   action   ==   \"get-timestamp\"   then \n     local   res ,   err   =   core . mysql . timestamp ( page . form . time ) \n     page . renderJson ({ timestamp   =   res }) \n   else \n     page . renderJson ({ error   =   \"Action not found\" }) \n   end  end  --# incoming  if   page . isPost   then \n   processPost ()  else \n   page . status ( 501 )  end    Server-side Modules  For more advanced use cases you can access your custom server-side API modules in the response methods using  page.callApi .",
            "title": "Page Response Module"
        },
        {
            "location": "/server/modules/pages/ajax/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/server/modules/pages/ajax/#xmlhttprequest",
            "text": "ajax.html  <!DOCTYPE html>  < html > \n   < body > \n     < h1 > The XMLHttpRequest Object </ h1 > \n\n     < div   id = \"demo\" > \n\n       <!-- Post to `ajax`, no .lua extension --> \n       < button   type = \"button\" \n       onclick = \"loadDoc('/ajax', myFunction)\" > Get MySQL Timestamp\n       </ button > \n\n     </ div > \n\n     < script > \n       function   loadDoc ( url ,   cFunction )   { \n         //Get UNIX time \n         var   time   =   Math . floor ( Date . now ()   /   1000 ); \n\n         var   xhttp ; \n\n         xhttp = new   XMLHttpRequest (); \n\n         xhttp . onreadystatechange   =   function ()   { \n           if   ( this . readyState   ==   4   &&   this . status   ==   200 )   { \n             cFunction ( this ); \n           } \n         }; \n\n         xhttp . open ( \"POST\" ,   url ,   true ); \n         //Set Content Type \n         xhttp . setRequestHeader ( \"Content-Type\" ,   \"application/json\" ) \n         //Mark as AJAX request \n         xhttp . setRequestHeader ( \"X-Requested-With\" ,   \"XMLHttpRequest\" ) \n\n         //Set `action` and `time` parameters here \n         var   data   =   { \n           action :   'get-timestamp' , \n           time :   time \n         } \n         xhttp . send ( JSON . stringify ( data )); \n       } \n\n       function   myFunction ( xhttp )   { \n         console . log ( xhttp ); \n         document . getElementById ( \"demo\" ). innerHTML   =  \n         JSON . parse ( xhttp . responseText ). timestamp ; \n       } \n     </ script > \n   </ body >  </ html >",
            "title": "XMLHttpRequest"
        },
        {
            "location": "/server/modules/pages/ajax/#qwest-library",
            "text": "I personally prefer using the  qwest  library, as it uses JSON natively, making it easier to work with.  qwest.html  <!DOCTYPE html>  < html >  < head >  < script   src = \"https://cdnjs.cloudflare.com/ajax/libs/qwest/4.5.0/qwest.min.js\" ></ script >  </ head > \n   < body > \n\n   < h1 > The Qwest Library </ h1 > \n\n   < div   id = \"demo\" > \n     < button   type = \"button\"   onclick = \"loadDoc()\" > Get MySQL Timestamp </ button > \n   </ div > \n\n   < script > \n     function   loadDoc ()   { \n       //Post to `ajax`, no .lua extension \n       qwest . post ( '/ajax' ,   { \n         //Set `action` and `time` values here \n         action :   'get-timestamp' , \n         time :   Math . floor ( Date . now ()   /   1000 ) \n      }) \n      . then ( function ( xhr ,   response )   { \n         document . getElementById ( \"demo\" ). innerHTML   =   response . timestamp ; \n      }) \n      . catch ( function ( e ,   xhr ,   response )   { \n         // Process the error \n      }); \n     } \n   </ script > \n\n   </ body >  </ html >",
            "title": "Qwest Library"
        },
        {
            "location": "/server/modules/pages/html5/",
            "text": "You can host your \nCorona HTML5\n builds directly on your \nCoronium Core\n server in the \nPages\n directory.\n\n\nThis also allows you to access your custom built \nserver-side APIs\n using the \nCoroniumJS\n plugin.\n\n\n \nClick here to watch a screencast.\n\n\nHosting HTML5 Builds\n\n\nTo host your HTML5 game or app, create a directory in the \n/home/coronium/pages\n directory and upload your Corona HTML5 output.\n\n\nThe game or app will be available at: \n\n\nhttp[s]://your.coronium.server/<html5-app-directory>\n\n\n\n\n\nTo access the \ndebug build\n use:\n\n\nhttp[s]://your.coronium.server/<html5-app-directory>/index-debug.html\n\n\n\n\n\nUsing CoroniumJS\n\n\nUsing the \nCoroniumJS\n plugin in your Corona HTML5 project gives you access to your custom \nserver-side APIs\n. The plugin will be enhanced over time to allow for more functionality.\n\n\n \nRequires Corona \ndaily build\n 2018.3276 or higher.\n\n\nDownload\n\n\nYou can download the most recent \nCoroniumJS\n plugin by \nclicking here\n.\n\n\nInstall\n\n\nExpand the archive, and then move the \ncoroniumjs_js.js\n and \ncoroniumjs.lua\n files the \nroot\n of your Corona HTML5 project directory.\n\n\nYour directory tree should look something like:\n\n\n<corona_project>/\n  coroniumjs_js.js\n  coroniumjs.lua\n  main.lua\n  ...\n\n\n\n\n\nRequire\n\n\nIn your \nmain.lua\n (or wherever needed):\n\n\nlocal\n \ncorejs\n \n=\n \nrequire\n(\n\"coroniumjs\"\n)\n\n\n\n\n\n\nCoroniumJS API\n\n\ninit\n\n\nInitialize the CoroniumJS plugin.\n\n\ncorejs\n.\ninit\n(\n \nconfig_tbl\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nconfig_tbl\n\n\nThe configuration table for the plugin initialzation.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nConfig Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nThe Coronium Core \nserver key\n.\n\n\nString\n\n\nY\n\n\n\n\n\n\nscope\n\n\nA unique application name for your Corona project. See \nApplication Scope\n in the client guide.\n\n\nString\n\n\nY\n\n\n\n\n\n\napi\n\n\nThe server-side API Project name to run api methods against (see \nServer-side API\n).\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\ncorejs\n.\ninit\n({\n\n  \nkey\n \n=\n \n'<coronium-server-key>'\n,\n\n  \nscope\n \n=\n \n'FunRun'\n,\n\n  \napi\n \n=\n \n'game'\n\n\n})\n\n\n\n\n\n\nNote\n\n\nThe \nCoroniumJS\n plugin will only work with HTML5 projects hosted on a \nCoronium Core\n server.\n\n\n\n\napi\n\n\nCall a custom server-side API method. Works like the standard client \ncore.api\n method.\n\n\ncorejs\n.\napi\n.\n<\nmethod\n-\nname\n>\n([\ninput_params\n,]\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ninput_params\n\n\nA key/value table of parameters for the method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe response listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nname\n)\n \n-- Jimmy\n\n  \nend\n\n\nend\n\n\n\ncorejs\n.\napi\n.\ntest\n({\nname\n=\n\"Jimmy\"\n},\n \napiResponse\n)\n\n\n\n\n\n\ndebug\n\n\nPretty print the response event to the console. Useful for debugging.\n\n\ncorejs\n.\ndebug\n(\nresponse_event\n)\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \ncorejs\n.\ndebug\n(\n \nevt\n \n)\n\n\n  \n...\n\n\nend",
            "title": "HTML5 Builds"
        },
        {
            "location": "/server/modules/pages/html5/#hosting-html5-builds",
            "text": "To host your HTML5 game or app, create a directory in the  /home/coronium/pages  directory and upload your Corona HTML5 output.  The game or app will be available at:   http[s]://your.coronium.server/<html5-app-directory>  To access the  debug build  use:  http[s]://your.coronium.server/<html5-app-directory>/index-debug.html",
            "title": "Hosting HTML5 Builds"
        },
        {
            "location": "/server/modules/pages/html5/#using-coroniumjs",
            "text": "Using the  CoroniumJS  plugin in your Corona HTML5 project gives you access to your custom  server-side APIs . The plugin will be enhanced over time to allow for more functionality.    Requires Corona  daily build  2018.3276 or higher.",
            "title": "Using CoroniumJS"
        },
        {
            "location": "/server/modules/pages/html5/#download",
            "text": "You can download the most recent  CoroniumJS  plugin by  clicking here .",
            "title": "Download"
        },
        {
            "location": "/server/modules/pages/html5/#install",
            "text": "Expand the archive, and then move the  coroniumjs_js.js  and  coroniumjs.lua  files the  root  of your Corona HTML5 project directory.  Your directory tree should look something like:  <corona_project>/\n  coroniumjs_js.js\n  coroniumjs.lua\n  main.lua\n  ...",
            "title": "Install"
        },
        {
            "location": "/server/modules/pages/html5/#require",
            "text": "In your  main.lua  (or wherever needed):  local   corejs   =   require ( \"coroniumjs\" )",
            "title": "Require"
        },
        {
            "location": "/server/modules/pages/html5/#coroniumjs-api",
            "text": "",
            "title": "CoroniumJS API"
        },
        {
            "location": "/server/modules/pages/html5/#init",
            "text": "Initialize the CoroniumJS plugin.  corejs . init (   config_tbl   )   Parameters     Name  Description  Type  Required      config_tbl  The configuration table for the plugin initialzation.  Table  Y     Config Table Keys     Name  Description  Type  Required      key  The Coronium Core  server key .  String  Y    scope  A unique application name for your Corona project. See  Application Scope  in the client guide.  String  Y    api  The server-side API Project name to run api methods against (see  Server-side API ).  String  Y     Example  corejs . init ({ \n   key   =   '<coronium-server-key>' , \n   scope   =   'FunRun' , \n   api   =   'game'  })   Note  The  CoroniumJS  plugin will only work with HTML5 projects hosted on a  Coronium Core  server.",
            "title": "init"
        },
        {
            "location": "/server/modules/pages/html5/#api",
            "text": "Call a custom server-side API method. Works like the standard client  core.api  method.  corejs . api . < method - name > ([ input_params ,]   listener )   Parameters     Name  Description  Type  Required      input_params  A key/value table of parameters for the method.  Table  Y    listener  The response listener callback function.  Function  Y     Example  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . name )   -- Jimmy \n   end  end  corejs . api . test ({ name = \"Jimmy\" },   apiResponse )",
            "title": "api"
        },
        {
            "location": "/server/modules/pages/html5/#debug",
            "text": "Pretty print the response event to the console. Useful for debugging.  corejs . debug ( response_event )   Example  local   function   apiResponse (   evt   ) \n   corejs . debug (   evt   ) \n\n   ...  end",
            "title": "debug"
        },
        {
            "location": "/server/modules/pages/errors/",
            "text": "The \nPages\n module has a set of default error pages for the most common HTTP error codes. You can customize the pages to your liking. \n\n\nThe error code pages can be found in the \n/home/coronium/pages/_coronium/errors\n directory.\n\n\nThe currently supported HTTP error pages are:\n\n\n\n\n400\n Bad Request (400.html)\n\n\n401\n Unauthorized (401.html)\n\n\n403\n Forbidden (403.html)\n\n\n404\n Not Found (404.html)\n\n\n500, 502, 504\n Internal Error (50x.html)\n\n\n503\n Service Unavailable (503.html)",
            "title": "Error Pages"
        },
        {
            "location": "/server/modules/template/",
            "text": "Template Storage\n\n\nServer-side templates are stored in the \n/home/coronium/templates\n directory. They have no relation to the \nPages\n templates.\n\n\n\n\nFor detailed information on how to work with templates, see the \nTemplates\n section of the Pages guide.\n\n\nrender\n\n\nRender a template based on a passed key/value table. Returns \nString\n.\n\n\ncore\n.\ntemplate\n.\nrender\n(\ntpl_file\n,\n \ntpl_data\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntpl_file\n\n\nThe template file to render relative to the \ntemplates\n directory.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntpl_data\n\n\nA table of key/value pairs to populate the template file.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ncompiled_str\n \n=\n \ncore\n.\ntemplate\n.\nrender\n(\n'common_resp.tpl'\n,\n \n{\n\n  \nname\n \n=\n \n\"Jenny\"\n,\n\n  \nage\n \n=\n \n23\n\n\n})",
            "title": "Template"
        },
        {
            "location": "/server/modules/template/#render",
            "text": "Render a template based on a passed key/value table. Returns  String .  core . template . render ( tpl_file ,   tpl_data )   Parameters     Name  Description  Type  Required      tpl_file  The template file to render relative to the  templates  directory.  String  Y    tpl_data  A table of key/value pairs to populate the template file.  Table  Y     Example  local   compiled_str   =   core . template . render ( 'common_resp.tpl' ,   { \n   name   =   \"Jenny\" , \n   age   =   23  })",
            "title": "render"
        },
        {
            "location": "/server/modules/timer/",
            "text": "Be sure to read the \nLifecycle/Context\n section to understand how timers work.\n\n\n\nTimers take up a client connection from your total pool of connections. They also take up memory for as long as they are active. Be careful when using timers, and make sure you have control over it or it could run forever using up resources.\n\n\ntimer\n\n\nCreates a timer that will call a function on expiration, or in a recurring fashion.\n\n\ncore\n.\ntimer\n(\nseconds\n,\n \ncallback\n[,\n \nrecurring\n][,\n \nextra_args\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nThe amount of seconds before the callback is triggered.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\ncallback\n\n\nThe callback function to call on timer expiry.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\nrecurring\n\n\nWhether this timer loops. Required if passing arguments.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\nextra_args\n\n\nAny extra arguments to pass to the timer callback.\n\n\nVarious\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nA timer \nobject\n, or \nnil\n, and an error.\n\n\nExamples\n\n\nTimers run in their own context outside of the client request. For example, the timer callback shown below will \nnot\n actually send anything back to the client. Instead the timer is started in its own context and the method immediately returns \ntrue\n.\n\n\n Be aware that anytime you call the \ndoSomething\n method you will create a new timer.\n\n\n\n--This example will not work!\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ndoSomething\n()\n\n\n  \nlocal\n \nfunction\n \ntimer_cb\n()\n\n    \n--this won't return data to the client\n\n    \nreturn\n \n{\nsome\n=\ndata\n}\n\n  \nend\n\n\n  \nlocal\n \nt\n,\n \nerr\n \n=\n \ncore\n.\ntimer\n(\n5\n,\n \ntimer_cb\n)\n\n\n  \n--returns immediately\n\n  \nreturn\n \ntrue\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nYou can however use just about anything else included in the \ncore\n server-side api:\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ndoSomething\n()\n\n\n  \nlocal\n \nfunction\n \ntimer_cb\n()\n\n    \ncore\n.\nlog\n(\n\"I'm 5 seconds late to the party!\"\n)\n\n  \nend\n\n\n  \nlocal\n \nt\n,\n \nerr\n \n=\n \ncore\n.\ntimer\n(\n5\n,\n \ntimer_cb\n)\n\n\n  \n--returns immediately\n\n  \nreturn\n \ntrue\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nYou can also pass in parameters that the callback can use on expiry.\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ndoSomething\n(\ninput\n)\n\n\n  \nlocal\n \nfunction\n \ntimer_cb\n(\nname\n)\n\n    \ncore\n.\nlog\n(\nname\n..\n\" was here 5 seconds ago!\"\n)\n\n  \nend\n\n\n  \nlocal\n \nt\n,\n \nerr\n \n=\n \ncore\n.\ntimer\n(\n5\n,\n \ntimer_cb\n,\n \nfalse\n,\n \ninput\n.\nname\n)\n\n\n  \n--returns immediately\n\n  \nreturn\n \ntrue\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nYou can set up recurring timers, but you should make sure you have a way to stop them at a specific point or they run forever. \n\n\nTo stop a recurring timer use the \ntimer_obj:cancel()\n method (see example below). \n\n\nIf you need a timer that runs indefinitely it's better to use \nJobs\n.\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ndoSomething\n()\n\n\n  \n--this example uses upvalues\n\n  \n--which is legal for the timer\n\n  \nlocal\n \nt\n,\n \nerr\n\n  \nlocal\n \ncnt\n \n=\n \n1\n\n  \nlocal\n \nmax_runs\n \n=\n \n5\n\n\n  \nlocal\n \nfunction\n \ntimer_cb\n()\n\n    \ncore\n.\nlog\n(\n\"This is callback #\"\n..\ncnt\n)\n\n\n    \ncnt\n \n=\n \ncnt\n \n+\n \n1\n\n    \nif\n \ncnt\n \n>\n \nmax_runs\n \nthen\n\n      \nt\n:\ncancel\n()\n \n--cancel the timer\n\n    \nend\n\n  \nend\n\n\n  \n--repeats every 5 seconds until canceled\n\n  \nt\n,\n \nerr\n \n=\n \ncore\n.\ntimer\n(\n5\n,\n \ntimer_cb\n,\n \ntrue\n)\n\n\n  \n--returns immediately\n\n  \nreturn\n \ntrue\n\n\nend\n\n\n\nreturn\n \napi",
            "title": "Timer"
        },
        {
            "location": "/server/modules/timer/#timer",
            "text": "Creates a timer that will call a function on expiration, or in a recurring fashion.  core . timer ( seconds ,   callback [,   recurring ][,   extra_args ])   Parameters     Name  Description  Type  Required      seconds  The amount of seconds before the callback is triggered.  Number  Y    callback  The callback function to call on timer expiry.  Function  Y    recurring  Whether this timer loops. Required if passing arguments.  Boolean  N    extra_args  Any extra arguments to pass to the timer callback.  Various  N     Returns  A timer  object , or  nil , and an error.  Examples  Timers run in their own context outside of the client request. For example, the timer callback shown below will  not  actually send anything back to the client. Instead the timer is started in its own context and the method immediately returns  true .   Be aware that anytime you call the  doSomething  method you will create a new timer.  --This example will not work!  local   api   =   core . api ()  function   api . doSomething () \n\n   local   function   timer_cb () \n     --this won't return data to the client \n     return   { some = data } \n   end \n\n   local   t ,   err   =   core . timer ( 5 ,   timer_cb ) \n\n   --returns immediately \n   return   true  end  return   api   You can however use just about anything else included in the  core  server-side api:  local   api   =   core . api ()  function   api . doSomething () \n\n   local   function   timer_cb () \n     core . log ( \"I'm 5 seconds late to the party!\" ) \n   end \n\n   local   t ,   err   =   core . timer ( 5 ,   timer_cb ) \n\n   --returns immediately \n   return   true  end  return   api   You can also pass in parameters that the callback can use on expiry.  local   api   =   core . api ()  function   api . doSomething ( input ) \n\n   local   function   timer_cb ( name ) \n     core . log ( name .. \" was here 5 seconds ago!\" ) \n   end \n\n   local   t ,   err   =   core . timer ( 5 ,   timer_cb ,   false ,   input . name ) \n\n   --returns immediately \n   return   true  end  return   api   You can set up recurring timers, but you should make sure you have a way to stop them at a specific point or they run forever.   To stop a recurring timer use the  timer_obj:cancel()  method (see example below).   If you need a timer that runs indefinitely it's better to use  Jobs .  local   api   =   core . api ()  function   api . doSomething () \n\n   --this example uses upvalues \n   --which is legal for the timer \n   local   t ,   err \n   local   cnt   =   1 \n   local   max_runs   =   5 \n\n   local   function   timer_cb () \n     core . log ( \"This is callback #\" .. cnt ) \n\n     cnt   =   cnt   +   1 \n     if   cnt   >   max_runs   then \n       t : cancel ()   --cancel the timer \n     end \n   end \n\n   --repeats every 5 seconds until canceled \n   t ,   err   =   core . timer ( 5 ,   timer_cb ,   true ) \n\n   --returns immediately \n   return   true  end  return   api",
            "title": "timer"
        },
        {
            "location": "/server/modules/users/api/",
            "text": "Provides methods to build a custom user registration flow on the server-side that integrates with the Coronium Core user system, as well as, advanced user queries. You can also use OAuth client IDs as user identifiers via the \nOAuth\n API.\n\n\n\n\nAdvanced Usage\n\n\nThese methods are for advanced use cases. In general you should use the client-side \nUsers\n module for your user management.\n\n\n\n\nregister\n\n\nRegisters a new user into the Coronium user system. This method marks a \"join\" event for statistical purposes.\n\n\nThe user is automatically marked as confirmed and active. Email confirmations are not supported through this method. See the client-side \nUsers\n module instead if you need email confirmations.\n\n\nUsers created using the server-side register method are not able to log in using the client-side login method. You must create a custom server-side API method and log the user in using the server-side login method.\n See the \nlogin\n method below.\n\n\ncore\n.\nusers\n.\nregister\n(\nusername\n,\n \npassword\n,\n \nscope\n,\n \nmeta\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nAn optional display name for the user. To create an anonymous user pass \nnil\n to this parameter, and a generic name will automatically be created.\n\n\nString\n or \nNil\n\n\nY\n\n\n\n\n\n\npassword\n\n\nAn optional password for the user. To create a user without a password, pass \nnil\n to this parameter. Anonymous users cannot have passwords, so if you pass \nnil\n for the username, you must pass \nnil\n here as well.\n\n\nString\n or \nNil\n\n\nY\n\n\n\n\n\n\nscope\n\n\nThe application scope this user should belong to. To get the current client application scope see the \nInput\n section of the API module, or supply your own.\n\n\nString\n\n\nY\n\n\n\n\n\n\nmeta\n\n\nAddtional information for the user registration (see Meta Keys below).\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\n\n\nPasswords\n\n\nSupply the password as plain text. It will be hashed before being added to the user record.\n\n\n\n\nMeta Keys\n\n\nThe following keys are currently supported in the \nmeta\n table:\n\n\n\n\nemail\n (\nstring\n)\n\n\ngroup\n (\nstring\n)\n\n\nextra\n (\ntable\n)\n\n\nlogin\n (\nboolean\n)\n\n\n\n\nThe \nlogin\n key, when set to \ntrue\n, will mark a \"login\" in addition to a \"join\" event when the user is created. The default is \nfalse\n. This can be helpful when conditionally creating new users. See also \nlogin\n.\n\n\nThe \nextra\n key is a key/value based table that you can use to store additional custom data to the user record. The \nextra\n table can only contain \nString\n, \nNumber\n, and \nBoolean\n data types.\n\n\nThe full \nmeta\n table structure looks like:\n\n\n--meta table\n\n\n{\n\n  \nemail\n \n=\n \n\"me@home.com\"\n,\n\n  \ngroup\n \n=\n \n\"cadets\"\n,\n\n  \nextra\n \n=\n \n{\n\n    \ncolor\n \n=\n \n\"Blue\"\n,\n\n    \nage\n \n=\n \n24\n,\n\n    \nwinner\n \n=\n \ntrue\n\n  \n},\n\n  \nlogin\n \n=\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\nAnonymous Users\n\n\nIf you create an anonymous user (see examples below), you \nmust\n add an OAuth provider using \naddAuthProvider\n to be able to log the user in.\n\n\n\n\nReturns\n\n\nThe newly created users unique ID as a \nstring\n, or \nnil\n, error, and error code.\n\n\nExample\n\n\n--Custom server-side API (main.lua)\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\n--api methods have an additonal argument\n\n\n--called `scope` that contains the \n\n\n--scope for the current client call.\n\n\nfunction\n \napi\n.\nregisterUser\n(\ninput\n,\n \nscope\n)\n\n\n  \n-- Example 1\n\n  \n-- Create an anonymous user. You must add an OAuth provider\n\n  \n-- to be able to log this user in.\n\n  \nlocal\n \nuser_id\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nregister\n(\nnil\n,\n \nnil\n,\n \nscope\n)\n\n\n  \n--== Add an OAuth provider here with the returned user_id.\n\n\n  \n-- Example 2\n\n  \n-- Create an anonymous user, with email and group. You must add an OAuth provider\n\n  \n-- to be able to log this user in.\n\n  \nlocal\n \nuser_id\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nregister\n(\nnil\n,\n \nnil\n,\n \nscope\n,\n \n{\n\n    \ngroup\n \n=\n \n\"cadets\"\n,\n\n    \nemail\n \n=\n \n\"me@home.com\"\n\n  \n})\n\n\n  \n--== Add an OAuth provider here with the returned user_id.\n\n\n  \n-- Example 3\n\n  \n-- Create a named user, no password.\n\n  \nlocal\n \nuser_id\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nregister\n(\n\"Donna\"\n,\n \nnil\n,\n \nscope\n)\n\n\n  \n-- Example 4\n\n  \n-- Create a named user with password.\n\n  \nlocal\n \nuser_id\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nregister\n(\n\"Donna\"\n,\n \n\"mypass123\"\n,\n \nscope\n)\n\n\n  \n-- Example 5\n\n  \n-- Create a named user, with email and extra.\n\n  \nlocal\n \nuser_id\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nregister\n(\n\"Billy\"\n,\n \nnil\n,\n \nscope\n,\n \n{\n\n    \nemail\n \n=\n \n\"me@home.com\"\n,\n\n    \nextra\n \n=\n \n{\n\n      \ncolor\n \n=\n \n\"Green\"\n,\n\n      \nage\n \n=\n \n36\n\n    \n}\n\n  \n})\n\n\n  \n-- Example 6\n\n  \n-- Create an named user in a different scope, with extra.\n\n  \nlocal\n \nuser_id\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nregister\n(\n\"Bob\"\n,\n \nnil\n,\n \n\"Space Race\"\n,\n \n{\n\n    \nextra\n \n=\n \n{\n\n      \nlikes_pizza\n \n=\n \ntrue\n\n    \n}\n\n  \n})\n\n\n  \n-- Handle any errors by logging\n\n  \nif\n \nnot\n \nuser_id\n \nthen\n\n    \ncore\n.\nlog\n(\nerr\n)\n\n  \nend\n\n\n  \n--OR\n\n\n  \n--Pass the err and code downstream\n\n  \nif\n \nnot\n \nuser_id\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n,\n \ncode\n)\n\n  \nend\n\n\n  \n--Return something on success\n\n  \nreturn\n \ntrue\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nErrors Codes\n\n\nThe Users module methods return a string error as well as a error \"status\" code. You can use these codes to adjust your application logic. A listing of current error codes can be found in the \nStatus Codes\n section. The codes are generally more helpful on the client-side.\n\n\nLinking OAuth Providers\n\n\nSee the \nOAuth API\n to learn how to associate your Coronium users OAuth providers.\n\n\nlogin\n\n\nLogin a user with a \nusername\n (with or without password), \nuser_id\n, or OAuth \nclient_id\n. This method marks a \"login\" event for statistical purposes.\n\n\ncore\n.\nusers\n.\nlogin\n(\nlogin_type\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nlogin_type\n\n\nA key/value table. See example below.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nReturns\n\n\nA user record as a \ntable\n, or \nnil\n, error and error code.\n\n\nExample\n\n\n-- By username and password\n\n\nlocal\n \nuser\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nlogin\n({\n\n  \nusername\n=\n'Timmy'\n,\n \n  \npassword\n \n=\n \n'pass1234'\n,\n\n  \nscope\n=\n'Fun Run'\n\n\n})\n\n\n\n-- By username\n\n\nlocal\n \nuser\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nlogin\n({\n\n  \nusername\n=\n'Timmy'\n,\n \n  \nscope\n=\n'Fun Run'\n\n\n})\n\n\n\n--By OAuth ID\n\n\nlocal\n \nuser\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nlogin\n({\n\n  \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n,\n\n  \nclient_id\n=\n\"fb_id-1234\"\n,\n \n  \nscope\n=\n'Space Race'\n\n\n})\n\n\n\n--By User ID\n\n\nlocal\n \nuser\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nlogin\n({\n\n  \nuser_id\n=\n\"aad3eba3-9c9c-9a1b-f236de1e3752\"\n\n\n})\n\n\n\n\n\n\nupdate\n\n\nUpdate a user in the Coronium user system. If you do not have a \nuser_id\n, first use the \nusers.getWithQuery\n method to get one.\n\n\ncore\n.\nusers\n.\nupdate\n(\nuser_id\n,\n \nupdate_params\n)\n\n\n\n\n\n\n\n\nUpdating OAuth\n\n\nTo update OAuth provider information for a user see the \nupdateAuthProvider\n method.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nupdate_params\n\n\nA table of key/value pairs to update.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nThe following keys are updatable:\n\n\n\n\nusername\n (\nstring\n)\n\n\npassword\n (\nstring\n)\n\n\nemail\n (\nstring\n)\n\n\ngroup\n (\nstring\n)\n\n\nextra\n (\ntable\n)\n\n\nactive\n (\nboolean\n)\n\n\n\n\n\n\nUpdating Passwords\n\n\nSupply the password as plain text. It will be hashed before being updated and added to the user record.\n\n\n\n\nThe \nextra\n table can only contain \nString\n, \nNumber\n, and \nBoolean\n data types. You can update, add, and remove multiple keys in the \nextra\n table within a single update call.\n\n\n--extra table\n\n\nextra\n \n=\n \n{\n\n  \ncolor\n \n=\n \n\"Blue\"\n,\n\n  \nage\n \n=\n \n24\n,\n\n  \nwinner\n \n=\n \ntrue\n\n\n}\n\n\n\n\n\n\nTo remove keys from the \nextra\n table you must pass a special constant \ncore.NULL\n to the key.\n\n\n--extra table\n\n\nextra\n \n=\n \n{\n\n  \ncolor\n \n=\n \ncore\n.\nNULL\n,\n \n--remove the color key on update\n\n  \nage\n \n=\n \n24\n,\n\n  \nwinner\n \n=\n \ntrue\n\n\n}\n\n\n\n\n\n\nReturns\n\n\nThe updated users information as a \ntable\n, or \nnil\n, error, and error code.\n\n\nExample\n\n\n--[[\n\n\nAssuming the record already has an `extra` table like so:\n\n\n{\n\n\n  color = \"Blue\",\n\n\n  age = 24,\n\n\n  winner = true\n\n\n}\n\n\n--]]\n\n\n\n--Update the user record\n\n\nlocal\n \nres\n,\n \nerr\n,\n \nerrcode\n \n=\n \ncore\n.\nusers\n.\nupdate\n(\n\"aad3eba3...\"\n,\n \n{\n\n  \npassword\n \n=\n \n\"superpass123\"\n,\n\n  \nemail\n \n=\n \n\"me@town.com\"\n\n  \nextra\n \n=\n \n{\n\n    \ncolor\n \n=\n \n\"Red\"\n,\n \n--change color key\n\n    \nhigh_score\n \n=\n \n12300\n \n--add high_score key\n\n    \nage\n \n=\n \ncore\n.\nNULL\n \n--remove age key\n\n  \n}\n\n\n})\n\n\n\n--[[\n\n\nThe `extra` table for the record will now be:\n\n\n{\n\n\n  color = \"Red\",\n\n\n  high_score = 12300,\n\n\n  winner = true\n\n\n}\n\n\n--]]\n\n\n\n\n\n\ndelete\n\n\nRemove a user from the Coronium user system. If you do not have a \nuser_id\n, first use the \nusers.getWithQuery\n method to get one.\n\n\ncore\n.\nusers\n.\ndelete\n(\nuser_id\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe records removed as a \nnumber\n (usually a 1), or \nnil\n, error, and error code.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\ndelete\n(\n\"aad3eba3-9c9c-9a1b-f236de1e3752\"\n)\n\n\n\n\n\n\nget\n\n\nGet a users full data record. This method \ndoes not\n mark a \"login\" event for the user. See \nlogin\n.\n\n\ncore\n.\nusers\n.\nget\n(\nuser_id\n)\n\n\n\n\n\n\n\n\nOAuth Users\n\n\nTo get a user with an OAuth provider client ID, see the \ngetWithProvider\n method in the OAuth API.\n\n\n\n\nExample\n\n\nlocal\n \nuser\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nget\n(\n\"aad3eba3-9c9c-9a1b-f236de1e3752\"\n)\n\n\n\n\n\n\ngetGroup\n\n\nGet a set of active user records based on group and application scope.\n\n\ncore\n.\nusers\n.\ngetGroup\n(\nscope\n,\n \ngroup\n,\n \nlimit\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nThe application scope to be queried.\n\n\nString\n\n\nY\n\n\n\n\n\n\ngroup\n\n\nThe group name to search for.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlimit\n\n\nLimit the records returned. See \nLimit\n below. Default is 100.\n\n\nNumber\n or \nTable\n\n\nN\n\n\n\n\n\n\n\n\n\n\nActive Users Only\n\n\nThis method only returns users that are marked as being \nactive\n. See \ngetWithQuery\n if you need users in a group regardless of \nactive\n status.\n\n\n\n\nLimit\n\n\nTo limit the rows returned, supply a number value to the \nlimit\n parameter. To offset the limit, supply a table array of number values. For example, to return rows 6-15, then pass {5, 10}.\n\n\nReturns\n\n\nThe records found as a table array, or \nnil\n, error, and error code. If \nlimit\n is set to 1, then a single table with the user data is returned (not an array).\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ngetUserGroup\n(\ninput\n,\n \nscope\n)\n\n\n  \n--use current scope from the client calling\n\n  \nlocal\n \nusers\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\ngetGroup\n(\nscope\n,\n \n\"cadets\"\n,\n \n10\n)\n\n\n  \n--OR\n\n\n  \n--provide your own scope as a string value\n\n  \nlocal\n \nusers\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\ngetGroup\n(\n\"Fun Run\"\n,\n \n\"cadets\"\n,\n \n10\n)\n\n\n  \n...\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\ngetWithQuery\n\n\nGet user record(s) based on specific query parameters.\n\n\ncore\n.\nusers\n.\ngetWithQuery\n(\nscope\n,\n \nquery_params\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nThe application scope to be queried.\n\n\nString\n\n\nY\n\n\n\n\n\n\nquery_tbl\n\n\nA table with the query parameters (see below).\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nactive\n\n\nThe active state of the user.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\ncountry_code\n\n\nA two letter country identifier.\n\n\nString\n\n\nN\n\n\n\n\n\n\nemail\n\n\nThe users email address.\n\n\nString\n\n\nN\n\n\n\n\n\n\ngroup\n\n\nThe group name to search within.\n\n\nString\n\n\nN\n\n\n\n\n\n\nusername\n\n\nThe users username.\n\n\nString\n\n\nN\n\n\n\n\n\n\norderby\n\n\nThe sorting attributes. See \nOrderby\n below.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlimit\n\n\nLimit the records returned. See \nLimit\n below.\n\n\nNumber\n or \nTable\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nOrderby\n\n\nThe \norderby\n key should be a table filled with column = direction pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order. See example below.\n\n\nLimit\n\n\nTo limit the rows returned, supply a number value to the \nlimit\n key. To offset the limit, supply a table array of number values. For example, to return rows 6-15, then \nlimit = {5, 10}\n.\n\n\nReturns\n\n\nThe records found as a table array, or \nnil\n, error, and error code. If \nlimit\n is set to 1, then a single table with the user data is returned (not an array). If no query parameters are provided, returns users in the supplied scope, with a default limit of 100. \n\n\nExample\n\n\nlocal\n \nusers\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\ngetWithQuery\n(\n\"Space Race\"\n,\n \n{\n\n  \ngroup\n \n=\n \n\"cadets\"\n,\n\n  \nactive\n \n=\n \ntrue\n,\n\n  \norderby\n \n=\n \n{\n \nusername\n \n=\n \n\"ASC\"\n \n},\n\n  \nlimit\n \n=\n \n20\n\n\n})\n\n\n\n\n\n\ngetAndMerge\n\n\nGet a user record, and merge multiple associated database and table quries related to the user into the users record.\n\n\ncore\n.\nusers\n.\ngetAndMerge\n(\nuser_id\n,\n \nmerge_tbl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nmerge_tbl\n\n\nA table array of database queries. See \nmysql.selectMerge\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nCreating Associations\n\n\nTo use this method properly, you must create additonal databases with tables. The tables that you wish to associate to the user must have a \nuser_id\n column filled with the users unique identifier. You can create the associations using the client-side or server-side \nMySQL\n module.\n\n\nReturns\n\n\nA user record with the associated queries included as the \nkey\n name assigned in the query table. See \nmysql.selectMerge\n for more information on how the query entries work.\n\n\nErrors\n\n\nIf the user is not found the method will return \nnil\n, error, and error code. If the user is found but any associated database queries fail, the user record will still be returned with any successful associated queries. On failed associations, the \nkey\n property of the failed database query will contain an \nerrors\n key describing the errors.\n\n\nExample\n\n\nlocal\n \nusers\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\ngetAndMerge\n(\n\"aad3eba3...\"\n,\n \n{\n\n  \n{\n\n    \ndb\n \n=\n \n\"locations\"\n,\n\n    \ntbl\n \n=\n \n\"spots\"\n,\n\n    \ncolumns\n \n=\n \n{\n \n\"longitude\"\n,\n \n\"latitude\"\n \n},\n\n    \nlimit\n \n=\n \n10\n,\n\n    \norderby\n \n=\n \n{\n \nlongitude\n \n=\n \n\"DESC\"\n \n},\n\n    \nkey\n \n=\n \n\"spots\"\n\n  \n}\n\n\n})\n\n\n\n\n\n\nsendConfirmationLink\n\n\nSend an email to a newly registered user to confirm their email address. See also \nConfirmations\n.\n\n\ncore\n.\nusers\n.\nsendConfirmationLink\n(\nuser_id\n,\n \noptions\n)\n\n\n\n\n\n\n\n\nMailgun Account Required\n\n\nA valid \nMailgun\n account is required to use this method. See the \nMailgun Config\n section for more information.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique ID to send the confirmation link to.\n\n\nString\n\n\nY\n\n\n\n\n\n\noptions\n\n\nA table with email confirmation options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nConfirmation Options Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfrom_email\n\n\nThe senders email address. This is usually your address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nsubject\n\n\nThe confirmation email subject line.\n\n\nString\n\n\nY\n\n\n\n\n\n\nemail_tpl\n\n\nIdentifier for a custom confirmation email template.\n\n\nString\n\n\nN\n\n\n\n\n\n\ntpl_keys\n\n\nAdditional template keys for the custom confirmation email template.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nA \nString\n indicating the sent state from Mailgun, can be \"OK\" or \"Failed\", or \nnil\n, error, and error code.\n\n\nNote: If the user is not registered with an email address, this action will return an error.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nsendConfirmationLink\n(\n\"0091633d...\"\n,\n \n{\n\n  \nfrom_email\n \n=\n \n\"code@develephant.com\"\n,\n\n  \nsubject\n \n=\n \n\"Email confirmation\"\n\n\n})\n\n\n\n\n\n\nSee the \nConfirmations\n section for more detailed information.\n\n\nsendPasswordResetLink\n\n\nSend an email to a user with a special link to reset the users password. See also \nPassword Reset\n.\n\n\ncore\n.\nusers\n.\nsendPasswordResetLink\n(\nto_email\n,\n \nscope\n,\n \noptions\n)\n\n\n\n\n\n\n\n\nMailgun Account Required\n\n\nA valid \nMailgun\n account is required to use this method. See the \nMailgun Config\n section for more information.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nto_email\n\n\nThe users email address to send the reset link to.\n\n\nString\n\n\nY\n\n\n\n\n\n\nscope\n\n\nThe application scope to be queried.\n\n\nString\n\n\nY\n\n\n\n\n\n\noptions\n\n\nA table with email reset options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nReset Options Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfrom_email\n\n\nThe senders email address. This is usually your address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nsubject\n\n\nThe password reset email subject line.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntpl_name\n\n\nIdentifier for a custom password reset email template.\n\n\nString\n\n\nN\n\n\n\n\n\n\ntpl_keys\n\n\nAdditional template keys for the custom password reset email template.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nA \nboolean\n \ntrue\n value on success, or \nnil\n and an error.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\nsendPasswordResetLink\n(\n\"me@home.com\"\n,\n \n\"Fun Run\"\n,\n \n  \n{\n\n    \nfrom_email\n \n=\n \n\"myapp@domain.com\"\n,\n\n    \nsubject\n \n=\n \n\"Password Reset Request\"\n,\n     \n  \n}\n\n\n)\n\n\n\n\n\n\nSee the \nPassword Reset\n section for more detailed information.",
            "title": "Users API"
        },
        {
            "location": "/server/modules/users/api/#register",
            "text": "Registers a new user into the Coronium user system. This method marks a \"join\" event for statistical purposes.  The user is automatically marked as confirmed and active. Email confirmations are not supported through this method. See the client-side  Users  module instead if you need email confirmations.  Users created using the server-side register method are not able to log in using the client-side login method. You must create a custom server-side API method and log the user in using the server-side login method.  See the  login  method below.  core . users . register ( username ,   password ,   scope ,   meta )   Parameters     Name  Description  Type  Required      username  An optional display name for the user. To create an anonymous user pass  nil  to this parameter, and a generic name will automatically be created.  String  or  Nil  Y    password  An optional password for the user. To create a user without a password, pass  nil  to this parameter. Anonymous users cannot have passwords, so if you pass  nil  for the username, you must pass  nil  here as well.  String  or  Nil  Y    scope  The application scope this user should belong to. To get the current client application scope see the  Input  section of the API module, or supply your own.  String  Y    meta  Addtional information for the user registration (see Meta Keys below).  Table  N      Important  String values are automatically run through  mysql.escape . Do not double-escape values.    Passwords  Supply the password as plain text. It will be hashed before being added to the user record.   Meta Keys  The following keys are currently supported in the  meta  table:   email  ( string )  group  ( string )  extra  ( table )  login  ( boolean )   The  login  key, when set to  true , will mark a \"login\" in addition to a \"join\" event when the user is created. The default is  false . This can be helpful when conditionally creating new users. See also  login .  The  extra  key is a key/value based table that you can use to store additional custom data to the user record. The  extra  table can only contain  String ,  Number , and  Boolean  data types.  The full  meta  table structure looks like:  --meta table  { \n   email   =   \"me@home.com\" , \n   group   =   \"cadets\" , \n   extra   =   { \n     color   =   \"Blue\" , \n     age   =   24 , \n     winner   =   true \n   }, \n   login   =   true  }    Anonymous Users  If you create an anonymous user (see examples below), you  must  add an OAuth provider using  addAuthProvider  to be able to log the user in.   Returns  The newly created users unique ID as a  string , or  nil , error, and error code.  Example  --Custom server-side API (main.lua)  local   api   =   core . api ()  --api methods have an additonal argument  --called `scope` that contains the   --scope for the current client call.  function   api . registerUser ( input ,   scope ) \n\n   -- Example 1 \n   -- Create an anonymous user. You must add an OAuth provider \n   -- to be able to log this user in. \n   local   user_id ,   err ,   code   =   core . users . register ( nil ,   nil ,   scope ) \n\n   --== Add an OAuth provider here with the returned user_id. \n\n   -- Example 2 \n   -- Create an anonymous user, with email and group. You must add an OAuth provider \n   -- to be able to log this user in. \n   local   user_id ,   err ,   code   =   core . users . register ( nil ,   nil ,   scope ,   { \n     group   =   \"cadets\" , \n     email   =   \"me@home.com\" \n   }) \n\n   --== Add an OAuth provider here with the returned user_id. \n\n   -- Example 3 \n   -- Create a named user, no password. \n   local   user_id ,   err ,   code   =   core . users . register ( \"Donna\" ,   nil ,   scope ) \n\n   -- Example 4 \n   -- Create a named user with password. \n   local   user_id ,   err ,   code   =   core . users . register ( \"Donna\" ,   \"mypass123\" ,   scope ) \n\n   -- Example 5 \n   -- Create a named user, with email and extra. \n   local   user_id ,   err ,   code   =   core . users . register ( \"Billy\" ,   nil ,   scope ,   { \n     email   =   \"me@home.com\" , \n     extra   =   { \n       color   =   \"Green\" , \n       age   =   36 \n     } \n   }) \n\n   -- Example 6 \n   -- Create an named user in a different scope, with extra. \n   local   user_id ,   err ,   code   =   core . users . register ( \"Bob\" ,   nil ,   \"Space Race\" ,   { \n     extra   =   { \n       likes_pizza   =   true \n     } \n   }) \n\n   -- Handle any errors by logging \n   if   not   user_id   then \n     core . log ( err ) \n   end \n\n   --OR \n\n   --Pass the err and code downstream \n   if   not   user_id   then \n     return   core . error ( err ,   code ) \n   end \n\n   --Return something on success \n   return   true  end  return   api   Errors Codes  The Users module methods return a string error as well as a error \"status\" code. You can use these codes to adjust your application logic. A listing of current error codes can be found in the  Status Codes  section. The codes are generally more helpful on the client-side.  Linking OAuth Providers  See the  OAuth API  to learn how to associate your Coronium users OAuth providers.",
            "title": "register"
        },
        {
            "location": "/server/modules/users/api/#login",
            "text": "Login a user with a  username  (with or without password),  user_id , or OAuth  client_id . This method marks a \"login\" event for statistical purposes.  core . users . login ( login_type )   Parameters     Name  Description  Type  Required      login_type  A key/value table. See example below.  Table  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Returns  A user record as a  table , or  nil , error and error code.  Example  -- By username and password  local   user ,   err ,   code   =   core . users . login ({ \n   username = 'Timmy' ,  \n   password   =   'pass1234' , \n   scope = 'Fun Run'  })  -- By username  local   user ,   err ,   code   =   core . users . login ({ \n   username = 'Timmy' ,  \n   scope = 'Fun Run'  })  --By OAuth ID  local   user ,   err ,   code   =   core . users . login ({ \n   provider   =   core . FACEBOOK , \n   client_id = \"fb_id-1234\" ,  \n   scope = 'Space Race'  })  --By User ID  local   user ,   err ,   code   =   core . users . login ({ \n   user_id = \"aad3eba3-9c9c-9a1b-f236de1e3752\"  })",
            "title": "login"
        },
        {
            "location": "/server/modules/users/api/#update",
            "text": "Update a user in the Coronium user system. If you do not have a  user_id , first use the  users.getWithQuery  method to get one.  core . users . update ( user_id ,   update_params )    Updating OAuth  To update OAuth provider information for a user see the  updateAuthProvider  method.   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    update_params  A table of key/value pairs to update.  Table  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   The following keys are updatable:   username  ( string )  password  ( string )  email  ( string )  group  ( string )  extra  ( table )  active  ( boolean )    Updating Passwords  Supply the password as plain text. It will be hashed before being updated and added to the user record.   The  extra  table can only contain  String ,  Number , and  Boolean  data types. You can update, add, and remove multiple keys in the  extra  table within a single update call.  --extra table  extra   =   { \n   color   =   \"Blue\" , \n   age   =   24 , \n   winner   =   true  }   To remove keys from the  extra  table you must pass a special constant  core.NULL  to the key.  --extra table  extra   =   { \n   color   =   core . NULL ,   --remove the color key on update \n   age   =   24 , \n   winner   =   true  }   Returns  The updated users information as a  table , or  nil , error, and error code.  Example  --[[  Assuming the record already has an `extra` table like so:  {    color = \"Blue\",    age = 24,    winner = true  }  --]]  --Update the user record  local   res ,   err ,   errcode   =   core . users . update ( \"aad3eba3...\" ,   { \n   password   =   \"superpass123\" , \n   email   =   \"me@town.com\" \n   extra   =   { \n     color   =   \"Red\" ,   --change color key \n     high_score   =   12300   --add high_score key \n     age   =   core . NULL   --remove age key \n   }  })  --[[  The `extra` table for the record will now be:  {    color = \"Red\",    high_score = 12300,    winner = true  }  --]]",
            "title": "update"
        },
        {
            "location": "/server/modules/users/api/#delete",
            "text": "Remove a user from the Coronium user system. If you do not have a  user_id , first use the  users.getWithQuery  method to get one.  core . users . delete ( user_id )   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y     Returns  The records removed as a  number  (usually a 1), or  nil , error, and error code.  Example  local   res ,   err ,   code   =   core . users . delete ( \"aad3eba3-9c9c-9a1b-f236de1e3752\" )",
            "title": "delete"
        },
        {
            "location": "/server/modules/users/api/#get",
            "text": "Get a users full data record. This method  does not  mark a \"login\" event for the user. See  login .  core . users . get ( user_id )    OAuth Users  To get a user with an OAuth provider client ID, see the  getWithProvider  method in the OAuth API.   Example  local   user ,   err ,   code   =   core . users . get ( \"aad3eba3-9c9c-9a1b-f236de1e3752\" )",
            "title": "get"
        },
        {
            "location": "/server/modules/users/api/#getgroup",
            "text": "Get a set of active user records based on group and application scope.  core . users . getGroup ( scope ,   group ,   limit )   Parameters     Name  Description  Type  Required      scope  The application scope to be queried.  String  Y    group  The group name to search for.  String  Y    limit  Limit the records returned. See  Limit  below. Default is 100.  Number  or  Table  N      Active Users Only  This method only returns users that are marked as being  active . See  getWithQuery  if you need users in a group regardless of  active  status.   Limit  To limit the rows returned, supply a number value to the  limit  parameter. To offset the limit, supply a table array of number values. For example, to return rows 6-15, then pass {5, 10}.  Returns  The records found as a table array, or  nil , error, and error code. If  limit  is set to 1, then a single table with the user data is returned (not an array).  Example  local   api   =   core . api ()  function   api . getUserGroup ( input ,   scope ) \n\n   --use current scope from the client calling \n   local   users ,   err ,   code   =   core . users . getGroup ( scope ,   \"cadets\" ,   10 ) \n\n   --OR \n\n   --provide your own scope as a string value \n   local   users ,   err ,   code   =   core . users . getGroup ( \"Fun Run\" ,   \"cadets\" ,   10 ) \n\n   ...  end  return   api",
            "title": "getGroup"
        },
        {
            "location": "/server/modules/users/api/#getwithquery",
            "text": "Get user record(s) based on specific query parameters.  core . users . getWithQuery ( scope ,   query_params )   Parameters     Name  Description  Type  Required      scope  The application scope to be queried.  String  Y    query_tbl  A table with the query parameters (see below).  Table  N     Query Table Keys     Name  Description  Type  Required      active  The active state of the user.  Boolean  N    country_code  A two letter country identifier.  String  N    email  The users email address.  String  N    group  The group name to search within.  String  N    username  The users username.  String  N    orderby  The sorting attributes. See  Orderby  below.  Table  N    limit  Limit the records returned. See  Limit  below.  Number  or  Table  N      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Orderby  The  orderby  key should be a table filled with column = direction pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order. See example below.  Limit  To limit the rows returned, supply a number value to the  limit  key. To offset the limit, supply a table array of number values. For example, to return rows 6-15, then  limit = {5, 10} .  Returns  The records found as a table array, or  nil , error, and error code. If  limit  is set to 1, then a single table with the user data is returned (not an array). If no query parameters are provided, returns users in the supplied scope, with a default limit of 100.   Example  local   users ,   err ,   code   =   core . users . getWithQuery ( \"Space Race\" ,   { \n   group   =   \"cadets\" , \n   active   =   true , \n   orderby   =   {   username   =   \"ASC\"   }, \n   limit   =   20  })",
            "title": "getWithQuery"
        },
        {
            "location": "/server/modules/users/api/#getandmerge",
            "text": "Get a user record, and merge multiple associated database and table quries related to the user into the users record.  core . users . getAndMerge ( user_id ,   merge_tbl )   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    merge_tbl  A table array of database queries. See  mysql.selectMerge  String  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Creating Associations  To use this method properly, you must create additonal databases with tables. The tables that you wish to associate to the user must have a  user_id  column filled with the users unique identifier. You can create the associations using the client-side or server-side  MySQL  module.  Returns  A user record with the associated queries included as the  key  name assigned in the query table. See  mysql.selectMerge  for more information on how the query entries work.  Errors  If the user is not found the method will return  nil , error, and error code. If the user is found but any associated database queries fail, the user record will still be returned with any successful associated queries. On failed associations, the  key  property of the failed database query will contain an  errors  key describing the errors.  Example  local   users ,   err ,   code   =   core . users . getAndMerge ( \"aad3eba3...\" ,   { \n   { \n     db   =   \"locations\" , \n     tbl   =   \"spots\" , \n     columns   =   {   \"longitude\" ,   \"latitude\"   }, \n     limit   =   10 , \n     orderby   =   {   longitude   =   \"DESC\"   }, \n     key   =   \"spots\" \n   }  })",
            "title": "getAndMerge"
        },
        {
            "location": "/server/modules/users/api/#sendconfirmationlink",
            "text": "Send an email to a newly registered user to confirm their email address. See also  Confirmations .  core . users . sendConfirmationLink ( user_id ,   options )    Mailgun Account Required  A valid  Mailgun  account is required to use this method. See the  Mailgun Config  section for more information.   Parameters     Name  Description  Type  Required      user_id  The users unique ID to send the confirmation link to.  String  Y    options  A table with email confirmation options (see below).  Table  Y     Confirmation Options Keys     Name  Description  Type  Required      from_email  The senders email address. This is usually your address.  String  Y    subject  The confirmation email subject line.  String  Y    email_tpl  Identifier for a custom confirmation email template.  String  N    tpl_keys  Additional template keys for the custom confirmation email template.  Table  N     Returns  A  String  indicating the sent state from Mailgun, can be \"OK\" or \"Failed\", or  nil , error, and error code.  Note: If the user is not registered with an email address, this action will return an error.  Example  local   res ,   err ,   code   =   core . users . sendConfirmationLink ( \"0091633d...\" ,   { \n   from_email   =   \"code@develephant.com\" , \n   subject   =   \"Email confirmation\"  })   See the  Confirmations  section for more detailed information.",
            "title": "sendConfirmationLink"
        },
        {
            "location": "/server/modules/users/api/#sendpasswordresetlink",
            "text": "Send an email to a user with a special link to reset the users password. See also  Password Reset .  core . users . sendPasswordResetLink ( to_email ,   scope ,   options )    Mailgun Account Required  A valid  Mailgun  account is required to use this method. See the  Mailgun Config  section for more information.   Parameters     Name  Description  Type  Required      to_email  The users email address to send the reset link to.  String  Y    scope  The application scope to be queried.  String  Y    options  A table with email reset options (see below).  Table  Y     Reset Options Keys     Name  Description  Type  Required      from_email  The senders email address. This is usually your address.  String  Y    subject  The password reset email subject line.  String  Y    tpl_name  Identifier for a custom password reset email template.  String  N    tpl_keys  Additional template keys for the custom password reset email template.  Table  N     Returns  A  boolean   true  value on success, or  nil  and an error.  Example  local   res ,   err   =   core . users . sendPasswordResetLink ( \"me@home.com\" ,   \"Fun Run\" ,  \n   { \n     from_email   =   \"myapp@domain.com\" , \n     subject   =   \"Password Reset Request\" ,      \n   }  )   See the  Password Reset  section for more detailed information.",
            "title": "sendPasswordResetLink"
        },
        {
            "location": "/server/modules/users/oauth/",
            "text": "The OAuth API is an extension of the server-side \nUsers\n module. The following methods allow you to manage OAuth providers for a custom user. See the server-side \nUsers\n module for more information on managing custom users.\n\n\nThe main use cases for the OAuth API are \nFacebook Login\n, \nGoogle Sign-In\n, and \nDevices as Users\n.\n\n\n\n\nClient-Side OAuth Users\n\n\nWorking with client-side \nOAuth API\n is the recommended way to work with OAuth users.\n\n\n\n\ngetWithProvider\n\n\nGet a user record based on an auth provider and immutable client ID.\n\n\ncore\n.\nusers\n.\ngetWithProvider\n(\nscope\n,\n \nprovider\n,\n \nclient_id\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nThe application scope the user belongs to.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\nclient_id\n\n\nThe immutable identifier returned by the auth provider.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nReturns\n\n\nA user record as a \ntable\n, or \nnil\n, error, and error code. The record will also include the provider information in the users \noauth\n key.\n\n\nThe \noauth\n table contains the following keys\n\n\n\n\nclient_id\n (\nstring\n)\n\n\naccess_token\n (\nstring\n)\n\n\naccess_token_expiry\n (\nnumber\n)\n\n\naccess_token_expired\n (\nboolean\n)\n\n\nprovider\n (\nstring\n)\n\n\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ngetUser\n(\ninput\n,\n \nscope\n)\n\n\n  \nlocal\n \nuser\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\ngetWithProvider\n(\n\n    \nscope\n,\n \n    \ncore\n.\nFACEBOOK\n,\n \n    \n\"fb-id_1234\"\n)\n\n\n  \n...\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nToken Expiration\n\n\nIf an access token and expiration has been added to the record, the token expiration state will be determined internally. You can check for expiration with the \nboolean\n \naccess_token_expired\n key. See also the \naccessTokenExpired\n method.\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ngetUser\n(\ninput\n,\n \nscope\n)\n\n\n  \nlocal\n \nuser\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\ngetWithProvider\n(\n\n    \nscope\n,\n \n    \ncore\n.\nFACEBOOK\n,\n \n    \n\"fb-id_1234\"\n)\n\n\n  \n--check access token expiration\n\n  \nif\n \nuser\n.\noauth\n.\naccess_token_expired\n \nthen\n\n    \n--token has expired\n\n  \nelse\n\n    \n--token is valid\n\n  \nend\n\n\n  \n...\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\naddAuthProvider\n\n\nLink OAuth provider information to a custom user.\n\n\ncore\n.\nusers\n.\naddAuthProvider\n(\nuser_id\n,\n \nprovider\n,\n \ninfo_tbl\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\ninfo_tbl\n\n\nTable of the provider information in key/value format (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nInfo Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nclient_id\n\n\nThe immutable ID provided by the OAuth provider.\n\n\nString\n\n\nY\n\n\n\n\n\n\naccess_token\n\n\nOAuth provider access token, if any.\n\n\nString\n\n\nN\n\n\n\n\n\n\naccess_token_expiry\n\n\nThe lifetime of the access token as a UNIX timestamp, if any.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nReturns\n\n\nThe added provider information as a \ntable\n, or \nnil\n, error, and error code.\n\n\nThe returned table contains the following keys:\n\n\n\n\nclient_id\n (\nstring\n)\n\n\naccess_token\n (\nstring\n)\n\n\naccess_token_expiry\n (\nnumber\n)\n\n\naccess_token_expired\n (\nboolean\n)\n\n\nprovider\n (\nstring\n)\n\n\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\naddAuthProvider\n(\n\"aad3eba3...\"\n,\n \ncore\n.\nFACEBOOK\n,\n \n{\n\n  \nclient_id\n \n=\n \n\"fb-id-1234\"\n,\n\n  \naccess_token\n \n=\n \n\"1234abcd\"\n,\n\n  \naccess_token_expiry\n \n=\n \n1516647155\n\n\n})\n\n\n\n\n\n\ngetAuthProvider\n\n\nGet OAuth provider information for a custom user.\n\n\ncore\n.\nusers\n.\ngetAuthProvider\n(\nuser_id\n,\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe provider information as a \ntable\n, or \nnil\n, error, and error code.\n\n\nThe returned table contains the following keys\n\n\n\n\nclient_id\n (\nstring\n)\n\n\naccess_token\n (\nstring\n)\n\n\naccess_token_expiry\n (\nnumber\n)\n\n\naccess_token_expired\n (\nboolean\n)\n\n\nprovider\n (\nstring\n)\n\n\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\ngetAuthProvider\n(\n\"aad3eba3...\"\n,\n \ncore\n.\nFACEBOOK\n)\n\n\n\n\n\n\ngetAuthProviders\n\n\nGet all OAuth providers information for a custom user.\n\n\ncore\n.\nusers\n.\ngetAuthProviders\n(\nuser_id\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe provider information as a keyed \ntable\n by provider, with each providers information table, or \nnil\n, error, and error code.\n\n\nThe table returned has a structure like so:\n\n\n{\n\n  \nfacebook\n \n=\n \n{\n\n    \nclient_id\n \n=\n \n\"fb-id-1234\"\n,\n\n    \naccess_token\n \n=\n \n\"1234abcd\"\n,\n\n    \naccess_token_expiry\n \n=\n \n1516647155\n,\n\n    \naccess_token_expired\n \n=\n \nfalse\n\n  \n},\n\n  \ngoogle\n \n=\n \n{\n\n    \nclient_id\n \n=\n \n\"google-id-1234\"\n,\n\n    \naccess_token\n \n=\n \n\"1234abcd\"\n,\n\n    \naccess_token_expiry\n \n=\n \n1516640011\n,\n\n    \naccess_token_expired\n \n=\n \ntrue\n    \n  \n},\n\n  \n...\n\n\n}\n\n\n\n\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\ngetAuthProviders\n(\n\"aad3eba3...\"\n)\n\n\n\n\n\n\nupdateAuthProvider\n\n\nUpdate OAuth provider information for a custom user.\n\n\ncore\n.\nusers\n.\nupdateAuthProvider\n(\nuser_id\n,\n \nprovider\n,\n \nparams\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\nparams\n\n\nA table of key/value pairs of provider information.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nThe following keys are updatable:\n\n\n\n\nclient_id\n (\nstring\n)\n\n\naccess_token\n (\nstring\n)\n\n\naccess_token_expiry\n (\nnumber\n)\n\n\n\n\nReturns\n\n\nThe updated provider information as a \ntable\n (see \ngetAuthProvider\n), or \nnil\n, error, and error code.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nupdateAuthProvider\n(\n\"aad3eba3...\"\n,\n \ncore\n.\nFACEBOOK\n,\n \n\n{\n\n  \naccess_token\n \n=\n \n\"1234efgh\"\n,\n\n  \naccess_token_expiry\n \n=\n \n1516663152\n\n\n})\n\n\n\n\n\n\nremoveAuthProvider\n\n\nRemove an OAuth provider from a custom user.\n\n\ncore\n.\nusers\n.\nremoveAuthProvider\n(\nuser_id\n,\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe \nuser_id\n as a \nstring\n, or \nnil\n, error, and error code.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nremoveAuthProvider\n(\n\"aad3eba3...\"\n,\n \ncore\n.\nFACEBOOK\n)\n\n\n\n\n\n\nremoveAuthProviders\n\n\nRemove all OAuth providers from a custom user.\n\n\ncore\n.\nusers\n.\nremoveAuthProviders\n(\nuser_id\n)\n\n\n\n\n\n\n\n\nWarning\n\n\nThis method clears \nall\n of the providers for the given user ID.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe \nuser_id\n as a \nstring\n, or \nnil\n, error, and error code.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nremoveAuthProviders\n(\n\"aad3eba3...\"\n)\n\n\n\n\n\n\naccessTokenExpired\n\n\nConditionally check if a users access token has expired for the specified provider.\n\n\ncore\n.\nusers\n.\naccessTokenExpired\n(\nuser_id\n,\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nA \nboolean\n value based on whether the access token has expired. Will be \ntrue\n is the token has expired, or \nfalse\n if the access token is still valid.\n\n\n\n\nNote\n\n\nIf the user does not have the specified provider linked to their account, the result will always be \ntrue\n.\n\n\n\n\nExample\n\n\nif\n \ncore\n.\nusers\n.\naccessTokenExpired\n(\n\"aad3eba3...\"\n,\n \ncore\n.\nFACEBOOK\n)\n \nthen\n\n  \n--token has expired\n\n\nelse\n\n  \n--token is still valid\n\n\nend\n\n\n\n\n\n\nupdateTokenExpiry\n\n\nUpdate the provider token expiration time. This is a convenience method, see also \nupdateAuthProvider\n.\n\n\ncore\n.\nusers\n.\nupdateTokenExpiry\n(\nuser_id\n,\n \nprovider\n,\n \nexpiry\n[,\n \ntoken\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\nexpiry\n\n\nThe new access token expiration time as a UNIX timestamp.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\ntoken\n\n\nOptionally update the access token string as well.\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nThe updated provider information as a \ntable\n (see \ngetAuthProvider\n), or \nnil\n, error, and error code.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nupdateTokenExpiry\n(\n\n  \n\"aad3eba3...\"\n,\n \n  \ncore\n.\nFACEBOOK\n,\n \n  \n1516663152\n)\n\n\n\n\n\n\nOAuth Constants\n\n\nUsed for the \nprovider\n parameter in OAuth methods.\n\n\n\n\n\n\n\n\nConstant\n\n\nDescription\n\n\nSee Also\n\n\n\n\n\n\n\n\n\n\ncore.FACEBOOK\n\n\nMarks a provider as Facebook.\n\n\nFacebook Login\n\n\n\n\n\n\ncore.GOOGLE\n\n\nMarks a provider as Google.\n\n\nGoogle Sign-In\n\n\n\n\n\n\ncore.OPENUDID\n\n\nMarks a provider as OpenUDID\n\n\nDevices As Users",
            "title": "OAuth API"
        },
        {
            "location": "/server/modules/users/oauth/#getwithprovider",
            "text": "Get a user record based on an auth provider and immutable client ID.  core . users . getWithProvider ( scope ,   provider ,   client_id )   Parameters     Name  Description  Type  Required      scope  The application scope the user belongs to.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y    client_id  The immutable identifier returned by the auth provider.  String  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Returns  A user record as a  table , or  nil , error, and error code. The record will also include the provider information in the users  oauth  key.  The  oauth  table contains the following keys   client_id  ( string )  access_token  ( string )  access_token_expiry  ( number )  access_token_expired  ( boolean )  provider  ( string )   Example  local   api   =   core . api ()  function   api . getUser ( input ,   scope ) \n\n   local   user ,   err ,   code   =   core . users . getWithProvider ( \n     scope ,  \n     core . FACEBOOK ,  \n     \"fb-id_1234\" ) \n\n   ...  end  return   api   Token Expiration  If an access token and expiration has been added to the record, the token expiration state will be determined internally. You can check for expiration with the  boolean   access_token_expired  key. See also the  accessTokenExpired  method.  Example  local   api   =   core . api ()  function   api . getUser ( input ,   scope ) \n\n   local   user ,   err ,   code   =   core . users . getWithProvider ( \n     scope ,  \n     core . FACEBOOK ,  \n     \"fb-id_1234\" ) \n\n   --check access token expiration \n   if   user . oauth . access_token_expired   then \n     --token has expired \n   else \n     --token is valid \n   end \n\n   ...  end  return   api",
            "title": "getWithProvider"
        },
        {
            "location": "/server/modules/users/oauth/#addauthprovider",
            "text": "Link OAuth provider information to a custom user.  core . users . addAuthProvider ( user_id ,   provider ,   info_tbl )   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y    info_tbl  Table of the provider information in key/value format (see below).  Table  Y     Info Table Keys     Name  Description  Type  Required      client_id  The immutable ID provided by the OAuth provider.  String  Y    access_token  OAuth provider access token, if any.  String  N    access_token_expiry  The lifetime of the access token as a UNIX timestamp, if any.  Number  N      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   Returns  The added provider information as a  table , or  nil , error, and error code.  The returned table contains the following keys:   client_id  ( string )  access_token  ( string )  access_token_expiry  ( number )  access_token_expired  ( boolean )  provider  ( string )   Example  local   res ,   err ,   code   =   core . users . addAuthProvider ( \"aad3eba3...\" ,   core . FACEBOOK ,   { \n   client_id   =   \"fb-id-1234\" , \n   access_token   =   \"1234abcd\" , \n   access_token_expiry   =   1516647155  })",
            "title": "addAuthProvider"
        },
        {
            "location": "/server/modules/users/oauth/#getauthprovider",
            "text": "Get OAuth provider information for a custom user.  core . users . getAuthProvider ( user_id ,   provider )   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y     Returns  The provider information as a  table , or  nil , error, and error code.  The returned table contains the following keys   client_id  ( string )  access_token  ( string )  access_token_expiry  ( number )  access_token_expired  ( boolean )  provider  ( string )   Example  local   res ,   err ,   code   =   core . users . getAuthProvider ( \"aad3eba3...\" ,   core . FACEBOOK )",
            "title": "getAuthProvider"
        },
        {
            "location": "/server/modules/users/oauth/#getauthproviders",
            "text": "Get all OAuth providers information for a custom user.  core . users . getAuthProviders ( user_id )   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y     Returns  The provider information as a keyed  table  by provider, with each providers information table, or  nil , error, and error code.  The table returned has a structure like so:  { \n   facebook   =   { \n     client_id   =   \"fb-id-1234\" , \n     access_token   =   \"1234abcd\" , \n     access_token_expiry   =   1516647155 , \n     access_token_expired   =   false \n   }, \n   google   =   { \n     client_id   =   \"google-id-1234\" , \n     access_token   =   \"1234abcd\" , \n     access_token_expiry   =   1516640011 , \n     access_token_expired   =   true     \n   }, \n   ...  }   Example  local   res ,   err ,   code   =   core . users . getAuthProviders ( \"aad3eba3...\" )",
            "title": "getAuthProviders"
        },
        {
            "location": "/server/modules/users/oauth/#updateauthprovider",
            "text": "Update OAuth provider information for a custom user.  core . users . updateAuthProvider ( user_id ,   provider ,   params )   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y    params  A table of key/value pairs of provider information.  Table  Y      Important  String values are automatically run through  mysql.escape . Do not double-escape values.   The following keys are updatable:   client_id  ( string )  access_token  ( string )  access_token_expiry  ( number )   Returns  The updated provider information as a  table  (see  getAuthProvider ), or  nil , error, and error code.  Example  local   res ,   err ,   code   =   core . users . updateAuthProvider ( \"aad3eba3...\" ,   core . FACEBOOK ,   { \n   access_token   =   \"1234efgh\" , \n   access_token_expiry   =   1516663152  })",
            "title": "updateAuthProvider"
        },
        {
            "location": "/server/modules/users/oauth/#removeauthprovider",
            "text": "Remove an OAuth provider from a custom user.  core . users . removeAuthProvider ( user_id ,   provider )   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y     Returns  The  user_id  as a  string , or  nil , error, and error code.  Example  local   res ,   err ,   code   =   core . users . removeAuthProvider ( \"aad3eba3...\" ,   core . FACEBOOK )",
            "title": "removeAuthProvider"
        },
        {
            "location": "/server/modules/users/oauth/#removeauthproviders",
            "text": "Remove all OAuth providers from a custom user.  core . users . removeAuthProviders ( user_id )    Warning  This method clears  all  of the providers for the given user ID.   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y     Returns  The  user_id  as a  string , or  nil , error, and error code.  Example  local   res ,   err ,   code   =   core . users . removeAuthProviders ( \"aad3eba3...\" )",
            "title": "removeAuthProviders"
        },
        {
            "location": "/server/modules/users/oauth/#accesstokenexpired",
            "text": "Conditionally check if a users access token has expired for the specified provider.  core . users . accessTokenExpired ( user_id ,   provider )   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y     Returns  A  boolean  value based on whether the access token has expired. Will be  true  is the token has expired, or  false  if the access token is still valid.   Note  If the user does not have the specified provider linked to their account, the result will always be  true .   Example  if   core . users . accessTokenExpired ( \"aad3eba3...\" ,   core . FACEBOOK )   then \n   --token has expired  else \n   --token is still valid  end",
            "title": "accessTokenExpired"
        },
        {
            "location": "/server/modules/users/oauth/#updatetokenexpiry",
            "text": "Update the provider token expiration time. This is a convenience method, see also  updateAuthProvider .  core . users . updateTokenExpiry ( user_id ,   provider ,   expiry [,   token ])   Parameters     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y    expiry  The new access token expiration time as a UNIX timestamp.  Number  Y    token  Optionally update the access token string as well.  String  N     Returns  The updated provider information as a  table  (see  getAuthProvider ), or  nil , error, and error code.  Example  local   res ,   err ,   code   =   core . users . updateTokenExpiry ( \n   \"aad3eba3...\" ,  \n   core . FACEBOOK ,  \n   1516663152 )",
            "title": "updateTokenExpiry"
        },
        {
            "location": "/server/modules/users/oauth/#oauth-constants",
            "text": "Used for the  provider  parameter in OAuth methods.     Constant  Description  See Also      core.FACEBOOK  Marks a provider as Facebook.  Facebook Login    core.GOOGLE  Marks a provider as Google.  Google Sign-In    core.OPENUDID  Marks a provider as OpenUDID  Devices As Users",
            "title": "OAuth Constants"
        },
        {
            "location": "/server/modules/users/oauthusers/",
            "text": "Creating Users\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ncreateAuthUser\n(\ninput\n,\n \nscope\n)\n\n\n  \n--check if user already exists with provider\n\n  \nlocal\n \nuser\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\ngetWithProvider\n(\n\n    \nscope\n,\n \n    \ncore\n.\nFACEBOOK\n,\n \n    \ninput\n.\nclient_id\n)\n\n\n  \nif\n \nnot\n \nuser\n \nthen\n \n--a user does not exist\n\n\n    \n--Create a custom anonymous Coronium user.\n\n    \n--On success marks a \"join\" and \"login\" event.\n\n    \nlocal\n \nuser_id\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\nregister\n(\nnil\n,\n \nnil\n,\n \nscope\n,\n \n{\n\n      \nlogin\n \n=\n \ntrue\n\n    \n})\n\n\n    \nif\n \nnot\n \nuser_id\n \nthen\n\n      \ncore\n.\nlog\n(\nerr\n)\n\n    \nelse\n\n\n      \n--Link user with OAuth provider info\n\n      \nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\naddAuthProvider\n(\nuser_id\n,\n \ncore\n.\nFACEBOOK\n,\n \n{\n\n        \nclient_id\n \n=\n \ninput\n.\nclient_id\n,\n\n        \naccess_token\n \n=\n \ninput\n.\naccess_token\n,\n\n        \naccess_token_expiry\n \n=\n \ninput\n.\naccess_token_expires\n\n      \n})\n\n\n      \nif\n \nnot\n \nres\n \nthen\n\n        \ncore\n.\nlog\n(\nerr\n)\n\n      \nelse\n\n        \n-- user is created and linked with auth provider.\n\n      \nend\n\n    \nend\n\n\n  \nend\n\n\n  \nreturn\n \ntrue\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nLogging In\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\nloginAuthUser\n(\ninput\n,\n \nscope\n)\n\n\n  \nlocal\n \nuser\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\nlogin\n({\n\n    \nscope\n \n=\n \nscope\n,\n\n    \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n,\n\n    \nclient_id\n \n=\n \ninput\n.\nclient_id\n\n  \n})\n\n\n  \nif\n \nnot\n \nuser\n \nthen\n\n    \n--user does not exist, create one (see Creating Users above).\n\n    \nreturn\n \napi\n.\ncreateAuthUser\n(\ninput\n,\n \nscope\n)\n\n  \nelse\n\n    \n--user exists and a \"login\" event has been marked.\n\n\n    \n--check and update access_token if needed\n\n    \nif\n \nuser\n.\noauth\n.\nacess_token_expired\n \nthen\n\n\n      \nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\nupdateAuthProvider\n(\n\n        \nuser\n.\nuser_id\n,\n \n        \ncore\n.\nFACEBOOK\n,\n \n        \n{\n\n          \naccess_token\n \n=\n \ninput\n.\naccess_token\n,\n\n          \naccess_token_expiry\n \n=\n \ninput\n.\naccess_token_expires\n\n        \n})\n\n\n    \nend\n\n\n    \nreturn\n \nuser\n\n  \nend\n\n\nend\n\n\n\n\nreturn\n \napi",
            "title": "OAuth Users"
        },
        {
            "location": "/server/modules/users/oauthusers/#creating-users",
            "text": "local   api   =   core . api ()  function   api . createAuthUser ( input ,   scope ) \n\n   --check if user already exists with provider \n   local   user ,   err   =   core . users . getWithProvider ( \n     scope ,  \n     core . FACEBOOK ,  \n     input . client_id ) \n\n   if   not   user   then   --a user does not exist \n\n     --Create a custom anonymous Coronium user. \n     --On success marks a \"join\" and \"login\" event. \n     local   user_id ,   err   =   core . users . register ( nil ,   nil ,   scope ,   { \n       login   =   true \n     }) \n\n     if   not   user_id   then \n       core . log ( err ) \n     else \n\n       --Link user with OAuth provider info \n       local   res ,   err   =   core . users . addAuthProvider ( user_id ,   core . FACEBOOK ,   { \n         client_id   =   input . client_id , \n         access_token   =   input . access_token , \n         access_token_expiry   =   input . access_token_expires \n       }) \n\n       if   not   res   then \n         core . log ( err ) \n       else \n         -- user is created and linked with auth provider. \n       end \n     end \n\n   end \n\n   return   true  end  return   api",
            "title": "Creating Users"
        },
        {
            "location": "/server/modules/users/oauthusers/#logging-in",
            "text": "local   api   =   core . api ()  function   api . loginAuthUser ( input ,   scope ) \n\n   local   user ,   err   =   core . users . login ({ \n     scope   =   scope , \n     provider   =   core . FACEBOOK , \n     client_id   =   input . client_id \n   }) \n\n   if   not   user   then \n     --user does not exist, create one (see Creating Users above). \n     return   api . createAuthUser ( input ,   scope ) \n   else \n     --user exists and a \"login\" event has been marked. \n\n     --check and update access_token if needed \n     if   user . oauth . acess_token_expired   then \n\n       local   res ,   err   =   core . users . updateAuthProvider ( \n         user . user_id ,  \n         core . FACEBOOK ,  \n         { \n           access_token   =   input . access_token , \n           access_token_expiry   =   input . access_token_expires \n         }) \n\n     end \n\n     return   user \n   end  end  return   api",
            "title": "Logging In"
        },
        {
            "location": "/server/modules/users/confirmations/",
            "text": "Require a user to confirm their email by using the \nusers.sendConfirmationLink\n method of the \nUsers\n module. \n\n\nWhen a confirmation email is sent, the user is in a \"pending\" state. You can view \nPending Users\n in the \nUsers\n section of the \nWebmin\n.\n\n\n\n\nMailgun Account Required\n\n\nA valid \nMailgun\n account and the proper configuration must be set up to use the email confirmation feature. See the \nMailgun Config\n section for more information.\n\n\n\n\nConfirmation Options\n\n\nThe following keys are available to pass to the options parameter of the \nusers.sendConfirmationLink\n method depending on whether you are using the default or a custom template.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfrom_email\n\n\nThe senders email address. This is usually your address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nsubject\n\n\nThe confirmation email subject line.\n\n\nString\n\n\nY\n\n\n\n\n\n\nemail_tpl\n\n\nIdentifier for a custom confirmation email template.\n\n\nString\n\n\nN\n\n\n\n\n\n\ntpl_keys\n\n\nAdditional template keys for the custom confirmation email template.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nServer-Side Example\n\n\nYou need a registered user to send a confirmation. Generally you create a user with the \nuser.register\n method, making sure to supply an email address, and then follow up with the \nusers.sendConfirmationLink\n method.\n\n\nDefault Confirmation\n\n\nfunction\n \napi\n.\ncreateAndConfirm\n(\ninput\n)\n\n\n  \n-- Register a user\n\n  \nlocal\n \nuser_id\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nregister\n(\n\"Wolly\"\n,\n \nnil\n,\n \n\"Space Race\"\n,\n \n{\n\n    \nemail\n \n=\n \n\"wolly@home.com\"\n\n  \n})\n\n\n  \nif\n \nnot\n \nuser_id\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n,\n \ncode\n)\n\n  \nend\n\n\n  \n-- Send the confirmation\n\n  \nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nsendConfirmationLink\n(\nuser_id\n,\n \n{\n\n    \nfrom_email\n \n=\n \n\"yourapp@domain.com\"\n,\n\n    \nsubject\n \n=\n \n\"Please confirm your registration.\"\n,\n\n  \n})\n\n\n  \nif\n \nnot\n \nres\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n,\n \ncode\n)\n\n  \nend\n\n\n  \nreturn\n \nres\n\n\n\nend\n\n\n\n\n\n\nResponse\n\n\nOn success, the \nsendConfirmationLink\n method will return a \nString\n indicating the sent state from Mailgun, which can be \"OK\" or \"Failed\". Otherwise a \nnil\n, error, and error code is returned.\n\n\nDefault Template\n\n\nBy default the following email template is sent to the users email. The only required template key is the \n{* confirm_link *}\n which is replaced automatically with the proper link to confirm the user.\n\n\n\n\nRequired Template Key\n\n\nIf you do not include the \n{* confirm_link *}\n template key in the email template, the user will have no way to confirm the registration.\n\n\n\n\nYou can edit the default template messaging if you wish, but to add additional template keys you must create a custom template, which is explained in the next section.\n\n\nTemplate Location: \n/home/coronium/templates/registration/email.tpl\n\n\nHello,\n\nYou have requested to sign up for our app. \n\nPlease confirm your registration by clicking the link below:\n\n{* confirm_link *}\n\nThank you.\n\n\n\n\n\nCustom Templates\n\n\nTo create a custom email template, you create, and place your custom template file in the \n/home/coronium/templates/registration/\n directory, and pass a reference to the template file in the \nemail_tpl\n parameter of the \noptions\n table.\n\n\nAt a minimum you must include the \n{* confirm_link *}\n template key in your custom template for the auto-generated confirmation link, but you can also supply other template keys by passing a table of key/value pairs to the \ntpl_keys\n parameter of the \noptions\n table.\n\n\n\n\nYou can create as many custom email templates as you wish.\n\n\n\n\nTemplate Example\n\n\nTemplate Location: \n/home/coronium/templates/registration/custom_email.tpl\n\n\nHello {{ username }},\n\nThank you for signing up to use the {{ app_name }} application.\n\nPlease click the following link to confirm your registration:\n\n{* confirm_link *}\n\nHave a nice day.\n\n\n\n\n\nCustom Confirmation\n\n\nfunction\n \napi\n.\ncreateAndConfirm\n(\ninput\n)\n\n\n  \n-- Register a user\n\n  \nlocal\n \nuser_id\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nregister\n(\n\"Wolly\"\n,\n \nnil\n,\n \n\"Space Race\"\n,\n \n{\n\n    \nemail\n \n=\n \n\"wolly@home.com\"\n\n  \n})\n\n\n  \nif\n \nnot\n \nuser_id\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n,\n \ncode\n)\n\n  \nend\n\n\n  \n-- Send the confirmation\n\n  \nlocal\n \nres\n,\n \nerr\n,\n \ncode\n \n=\n \ncore\n.\nusers\n.\nsendConfirmationLink\n(\nuser_id\n,\n \n{\n\n    \nfrom_email\n \n=\n \n\"yourapp@domain.com\"\n,\n\n    \nsubject\n \n=\n \n\"Please confirm your registration.\"\n,\n\n    \nemail_tpl\n \n=\n \n\"custom_email.tpl\"\n,\n\n    \ntpl_keys\n \n=\n \n{\n\n      \nusername\n \n=\n \n\"Wolly\"\n,\n\n      \napp_name\n \n=\n \n\"Space Race\"\n\n    \n}\n\n  \n})\n\n\n  \nif\n \nnot\n \nres\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n,\n \ncode\n)\n\n  \nend\n\n\n  \nreturn\n \nres\n\n\n\nend\n\n\n\n\n\n\nResult\n\n\nHello Wolly,\n\nThank you for signing up to use the Space Race application.\n\nPlease click the following link to confirm your registration:\n\nhttp://your.coronium.host/_confirmation?code=<generated-confirmation-code>\n\nHave a nice day.\n\n\n\n\n\nImportant Notes\n\n\nDo not add a \nconfirm_link\n key to the \ntpl_keys\n parameter. Just be sure to include it in your custom template and it will be populated automatically with the correct confirmation link when the email is sent.\n\n\nConfirmation Page\n\n\nOnce the user clicks the confirmation link in the registration email, they will be taken to the confirmation landing page. \n\n\nWhen the user is confirmed they will be marked as \nactive\n in the \nusers\n database.\n\n\nTo customize the landing page, you can edit the following resources.\n\n\n\n\nTemplate: \n/home/coronium/pages/_coronium/registration/confirmation.tpl\n\n\nLua Code: \n/home/coronium/pages/_coronium/registration/confirmation.lua\n\n\n\n\nSee the \nPages\n usage guide for information about how to work with these files.",
            "title": "Confirmations"
        },
        {
            "location": "/server/modules/users/confirmations/#confirmation-options",
            "text": "The following keys are available to pass to the options parameter of the  users.sendConfirmationLink  method depending on whether you are using the default or a custom template.     Name  Description  Type  Required      from_email  The senders email address. This is usually your address.  String  Y    subject  The confirmation email subject line.  String  Y    email_tpl  Identifier for a custom confirmation email template.  String  N    tpl_keys  Additional template keys for the custom confirmation email template.  Table  N",
            "title": "Confirmation Options"
        },
        {
            "location": "/server/modules/users/confirmations/#server-side-example",
            "text": "You need a registered user to send a confirmation. Generally you create a user with the  user.register  method, making sure to supply an email address, and then follow up with the  users.sendConfirmationLink  method.",
            "title": "Server-Side Example"
        },
        {
            "location": "/server/modules/users/confirmations/#default-confirmation",
            "text": "function   api . createAndConfirm ( input ) \n\n   -- Register a user \n   local   user_id ,   err ,   code   =   core . users . register ( \"Wolly\" ,   nil ,   \"Space Race\" ,   { \n     email   =   \"wolly@home.com\" \n   }) \n\n   if   not   user_id   then \n     return   core . error ( err ,   code ) \n   end \n\n   -- Send the confirmation \n   local   res ,   err ,   code   =   core . users . sendConfirmationLink ( user_id ,   { \n     from_email   =   \"yourapp@domain.com\" , \n     subject   =   \"Please confirm your registration.\" , \n   }) \n\n   if   not   res   then \n     return   core . error ( err ,   code ) \n   end \n\n   return   res  end",
            "title": "Default Confirmation"
        },
        {
            "location": "/server/modules/users/confirmations/#response",
            "text": "On success, the  sendConfirmationLink  method will return a  String  indicating the sent state from Mailgun, which can be \"OK\" or \"Failed\". Otherwise a  nil , error, and error code is returned.",
            "title": "Response"
        },
        {
            "location": "/server/modules/users/confirmations/#default-template",
            "text": "By default the following email template is sent to the users email. The only required template key is the  {* confirm_link *}  which is replaced automatically with the proper link to confirm the user.   Required Template Key  If you do not include the  {* confirm_link *}  template key in the email template, the user will have no way to confirm the registration.   You can edit the default template messaging if you wish, but to add additional template keys you must create a custom template, which is explained in the next section.  Template Location:  /home/coronium/templates/registration/email.tpl  Hello,\n\nYou have requested to sign up for our app. \n\nPlease confirm your registration by clicking the link below:\n\n{* confirm_link *}\n\nThank you.",
            "title": "Default Template"
        },
        {
            "location": "/server/modules/users/confirmations/#custom-templates",
            "text": "To create a custom email template, you create, and place your custom template file in the  /home/coronium/templates/registration/  directory, and pass a reference to the template file in the  email_tpl  parameter of the  options  table.  At a minimum you must include the  {* confirm_link *}  template key in your custom template for the auto-generated confirmation link, but you can also supply other template keys by passing a table of key/value pairs to the  tpl_keys  parameter of the  options  table.   You can create as many custom email templates as you wish.",
            "title": "Custom Templates"
        },
        {
            "location": "/server/modules/users/confirmations/#template-example",
            "text": "Template Location:  /home/coronium/templates/registration/custom_email.tpl  Hello {{ username }},\n\nThank you for signing up to use the {{ app_name }} application.\n\nPlease click the following link to confirm your registration:\n\n{* confirm_link *}\n\nHave a nice day.",
            "title": "Template Example"
        },
        {
            "location": "/server/modules/users/confirmations/#custom-confirmation",
            "text": "function   api . createAndConfirm ( input ) \n\n   -- Register a user \n   local   user_id ,   err ,   code   =   core . users . register ( \"Wolly\" ,   nil ,   \"Space Race\" ,   { \n     email   =   \"wolly@home.com\" \n   }) \n\n   if   not   user_id   then \n     return   core . error ( err ,   code ) \n   end \n\n   -- Send the confirmation \n   local   res ,   err ,   code   =   core . users . sendConfirmationLink ( user_id ,   { \n     from_email   =   \"yourapp@domain.com\" , \n     subject   =   \"Please confirm your registration.\" , \n     email_tpl   =   \"custom_email.tpl\" , \n     tpl_keys   =   { \n       username   =   \"Wolly\" , \n       app_name   =   \"Space Race\" \n     } \n   }) \n\n   if   not   res   then \n     return   core . error ( err ,   code ) \n   end \n\n   return   res  end   Result  Hello Wolly,\n\nThank you for signing up to use the Space Race application.\n\nPlease click the following link to confirm your registration:\n\nhttp://your.coronium.host/_confirmation?code=<generated-confirmation-code>\n\nHave a nice day.",
            "title": "Custom Confirmation"
        },
        {
            "location": "/server/modules/users/confirmations/#important-notes",
            "text": "Do not add a  confirm_link  key to the  tpl_keys  parameter. Just be sure to include it in your custom template and it will be populated automatically with the correct confirmation link when the email is sent.",
            "title": "Important Notes"
        },
        {
            "location": "/server/modules/users/confirmations/#confirmation-page",
            "text": "Once the user clicks the confirmation link in the registration email, they will be taken to the confirmation landing page.   When the user is confirmed they will be marked as  active  in the  users  database.  To customize the landing page, you can edit the following resources.   Template:  /home/coronium/pages/_coronium/registration/confirmation.tpl  Lua Code:  /home/coronium/pages/_coronium/registration/confirmation.lua   See the  Pages  usage guide for information about how to work with these files.",
            "title": "Confirmation Page"
        },
        {
            "location": "/server/modules/users/passwordreset/",
            "text": "If you need to have a user reset their password, you can do this with the server-side \nusers.sendPasswordResetLink\n method, which will send an email with a password reset link that will allow the user to update the password via a form on the web.\n\n\n\n\nMailgun Account Required\n\n\nA valid \nMailgun\n account and the proper configuration must be set up to use the password reset feature. See the \nMailgun Config\n section for more information.\n\n\n\n\nReset Options\n\n\nThe following keys are available to pass to the \noptions\n parameter of the \nusers.sendPasswordResetLink\n method depending on whether you are using the default or a custom template.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfrom_email\n\n\nThe senders email address. This is usually your address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nsubject\n\n\nThe password reset email subject line.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntpl_name\n\n\nIdentifier for a custom password reset email template.\n\n\nString\n\n\nN\n\n\n\n\n\n\ntpl_keys\n\n\nAdditional template keys for the custom password reset email template.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nDefault Reset\n\n\nThe following example will send a password reset email using the default template.\n\n\nCode Example\n\n\nThe only \noptions\n parameter table keys required are the \nfrom_email\n and \nsubject\n.\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\nsendPasswordResetLink\n(\n\"user@home.com\"\n,\n \n\"Fun Run\"\n,\n \n  \n{\n\n    \nfrom_email\n \n=\n \n\"myapp@domain.com\"\n,\n\n    \nsubject\n \n=\n \n\"Password Reset Request\"\n,\n     \n  \n}\n\n\n)\n\n\n\n\n\n\nDefault Template\n\n\nBy default the following email template is sent to the users email. The only required template key is the \n{* reset_link *}\n which is replaced automatically with the proper link to password reset form.\n\n\n\n\nRequired Template Key\n\n\nIf you do not include the \n{* reset_link *}\n template key in the email template, the user will have no way to get to the reset form.\n\n\n\n\nYou can edit the default template messaging if you wish, but to add additional template keys you must create a custom template, which is explained in the next section.\n\n\nTemplate Location: \n/home/coronium/templates/password/email.tpl\n\n\nHello,\n\nYou have requested a password reset for our app. \n\nPlease click the following link to reset your password:\n\n{* reset_link *}\n\nThank you.\n\n\n\n\n\nCustom Reset\n\n\nThe following example will send a password reset email using a custom template.\n\n\nTo use a custom email template, you create, and place your custom template file in the \n/home/coronium/templates/password/\n directory, and pass a reference to the template file in the \ntpl_name\n parameter.\n\n\nAt a minimum you must include the \n{* reset_link *}\n template key in your custom template for the auto-generated password reset link, but you can also supply other template keys by passing a table of key/value pairs to the \ntpl_keys\n parameter.\n\n\n\n\nYou can create as many custom email templates as you wish.\n\n\n\n\nCode Example\n\n\nThe \nfrom_email\n, \nsubject\n, \ntpl_name\n, and \ntpl_keys\n are all required on the \noptions\n parameter table to use a custom template.\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\nsendPasswordResetLink\n(\n\"user@home.com\"\n,\n \n\"Fun Run\"\n\n  \n{\n\n    \nfrom_email\n \n=\n \n\"myapp@domain.com\"\n,\n\n    \nsubject\n \n=\n \n\"Password Reset Request\"\n,\n\n    \n--custom template meta\n\n    \ntpl_name\n \n=\n \n\"custom_reset.tpl\"\n,\n\n    \ntpl_keys\n \n=\n \n{\n\n      \nusername\n \n=\n \n\"Carol\"\n,\n\n      \napp_name\n \n=\n \n\"Fun Run\"\n\n    \n}\n\n  \n}\n\n\n)\n\n\n\n\n\n\nCustom Template\n\n\nTemplate Location: \n/home/coronium/templates/password/custom_reset.tpl\n\n\nHello {{ username }},\n\nYou have requested a password reset for the {{ app_name }} application. \n\nPlease click the following link to reset your password:\n\n{* reset_link *}\n\nHave a nice day.\n\n\n\n\n\nResult\n\n\nHello Carol,\n\nYou have requested a password reset for the Fun Run application. \n\nPlease click the following link to reset your password:\n\nhttp://your.coronium.host/_resetpassword?code=<generated-reset-code>\n\nHave a nice day.\n\n\n\n\n\nImportant Notes\n\n\nDo not add a \nreset_link\n key to the \ntpl_keys\n entry. Just be sure to include it in your custom template and it will be populated automatically with the correct password reset link when the email is sent.\n\n\nReset Form Page\n\n\nOnce the user clicks the confirmation link in the password reset email, they will be taken to the password reset form page. \n\n\nTo customize the reset form page, you can edit the following resources.\n\n\n\n\nTemplate: \n/home/coronium/pages/_coronium/password/password_form.tpl\n\n\nLua Code: \n/home/coronium/pages/_coronium/password/password_form.lua\n\n\nJS Code: \n/home/coronium/pages/_coronium/password/password_submit.js\n\n\n\n\nSee the \nPages\n usage guide for information about how to work with these files. \n\n\nExpiring Reset links\n\n\nWhen a password reset email is sent, a database entry is added to the administration database.\n\n\nIf you're going to be using password resets, it is highly recommended you create a recurring Job using the \nJobs Service\n to clean up expired password resets so the database does not grow too large.\n\n\nWhen a user successfully updates their password, the entry is automatically removed from the database. So this Job only needs to clean up failed email sends and/or old reset links.\n\n\nA special method called \nusers.flushExpiredPasswordResets\n is available for use in Jobs, and will clear any password reset links that are over a day old.\n\n\nYou can make this clean up happen at longer intervals, depending how you set up the Job.\n\n\nCreate Expiry Job\n\n\nUsing the Coronium \nWebmin\n, go to the \nJobs Service\n section and click \nNew Job\n.\n\n\nYou can use whatever values you'd like for your Job, but as an example:\n\n\n\n\nJob Name:\n CleanPasswordResets\n\n\nJob Path:\n admin/pw_reset_cleanup.lua\n\n\nJob Interval:\n 3600\n\n\nRun Once:\n OFF\n\n\nActive:\n ON\n\n\n\n\nThis Job will run every hour. Click the \nCreate\n button.\n\n\nYou will be taken to the Job code editor. Use the following Job code to clear links that are older than a day:\n\n\nlocal\n \njob\n \n=\n \ncore\n.\njob\n()\n\n\n\nfunction\n \njob\n.\nrun\n()\n\n  \ncore\n.\nusers\n.\nflushExpiredPasswordResets\n()\n\n  \nreturn\n \njob\n.\nOK\n\n\nend\n\n\n\nreturn\n \njob\n\n\n\n\n\n\nWhen a user clicks on a link that no longer exists, they will be notified, at which point that can make another password reset request.",
            "title": "Password Reset"
        },
        {
            "location": "/server/modules/users/passwordreset/#reset-options",
            "text": "The following keys are available to pass to the  options  parameter of the  users.sendPasswordResetLink  method depending on whether you are using the default or a custom template.     Name  Description  Type  Required      from_email  The senders email address. This is usually your address.  String  Y    subject  The password reset email subject line.  String  Y    tpl_name  Identifier for a custom password reset email template.  String  N    tpl_keys  Additional template keys for the custom password reset email template.  Table  N",
            "title": "Reset Options"
        },
        {
            "location": "/server/modules/users/passwordreset/#default-reset",
            "text": "The following example will send a password reset email using the default template.",
            "title": "Default Reset"
        },
        {
            "location": "/server/modules/users/passwordreset/#code-example",
            "text": "The only  options  parameter table keys required are the  from_email  and  subject .  local   res ,   err   =   core . users . sendPasswordResetLink ( \"user@home.com\" ,   \"Fun Run\" ,  \n   { \n     from_email   =   \"myapp@domain.com\" , \n     subject   =   \"Password Reset Request\" ,      \n   }  )",
            "title": "Code Example"
        },
        {
            "location": "/server/modules/users/passwordreset/#default-template",
            "text": "By default the following email template is sent to the users email. The only required template key is the  {* reset_link *}  which is replaced automatically with the proper link to password reset form.   Required Template Key  If you do not include the  {* reset_link *}  template key in the email template, the user will have no way to get to the reset form.   You can edit the default template messaging if you wish, but to add additional template keys you must create a custom template, which is explained in the next section.  Template Location:  /home/coronium/templates/password/email.tpl  Hello,\n\nYou have requested a password reset for our app. \n\nPlease click the following link to reset your password:\n\n{* reset_link *}\n\nThank you.",
            "title": "Default Template"
        },
        {
            "location": "/server/modules/users/passwordreset/#custom-reset",
            "text": "The following example will send a password reset email using a custom template.  To use a custom email template, you create, and place your custom template file in the  /home/coronium/templates/password/  directory, and pass a reference to the template file in the  tpl_name  parameter.  At a minimum you must include the  {* reset_link *}  template key in your custom template for the auto-generated password reset link, but you can also supply other template keys by passing a table of key/value pairs to the  tpl_keys  parameter.   You can create as many custom email templates as you wish.",
            "title": "Custom Reset"
        },
        {
            "location": "/server/modules/users/passwordreset/#code-example_1",
            "text": "The  from_email ,  subject ,  tpl_name , and  tpl_keys  are all required on the  options  parameter table to use a custom template.  local   res ,   err   =   core . users . sendPasswordResetLink ( \"user@home.com\" ,   \"Fun Run\" \n   { \n     from_email   =   \"myapp@domain.com\" , \n     subject   =   \"Password Reset Request\" , \n     --custom template meta \n     tpl_name   =   \"custom_reset.tpl\" , \n     tpl_keys   =   { \n       username   =   \"Carol\" , \n       app_name   =   \"Fun Run\" \n     } \n   }  )",
            "title": "Code Example"
        },
        {
            "location": "/server/modules/users/passwordreset/#custom-template",
            "text": "Template Location:  /home/coronium/templates/password/custom_reset.tpl  Hello {{ username }},\n\nYou have requested a password reset for the {{ app_name }} application. \n\nPlease click the following link to reset your password:\n\n{* reset_link *}\n\nHave a nice day.  Result  Hello Carol,\n\nYou have requested a password reset for the Fun Run application. \n\nPlease click the following link to reset your password:\n\nhttp://your.coronium.host/_resetpassword?code=<generated-reset-code>\n\nHave a nice day.",
            "title": "Custom Template"
        },
        {
            "location": "/server/modules/users/passwordreset/#important-notes",
            "text": "Do not add a  reset_link  key to the  tpl_keys  entry. Just be sure to include it in your custom template and it will be populated automatically with the correct password reset link when the email is sent.",
            "title": "Important Notes"
        },
        {
            "location": "/server/modules/users/passwordreset/#reset-form-page",
            "text": "Once the user clicks the confirmation link in the password reset email, they will be taken to the password reset form page.   To customize the reset form page, you can edit the following resources.   Template:  /home/coronium/pages/_coronium/password/password_form.tpl  Lua Code:  /home/coronium/pages/_coronium/password/password_form.lua  JS Code:  /home/coronium/pages/_coronium/password/password_submit.js   See the  Pages  usage guide for information about how to work with these files.",
            "title": "Reset Form Page"
        },
        {
            "location": "/server/modules/users/passwordreset/#expiring-reset-links",
            "text": "When a password reset email is sent, a database entry is added to the administration database.  If you're going to be using password resets, it is highly recommended you create a recurring Job using the  Jobs Service  to clean up expired password resets so the database does not grow too large.  When a user successfully updates their password, the entry is automatically removed from the database. So this Job only needs to clean up failed email sends and/or old reset links.  A special method called  users.flushExpiredPasswordResets  is available for use in Jobs, and will clear any password reset links that are over a day old.  You can make this clean up happen at longer intervals, depending how you set up the Job.",
            "title": "Expiring Reset links"
        },
        {
            "location": "/server/modules/users/passwordreset/#create-expiry-job",
            "text": "Using the Coronium  Webmin , go to the  Jobs Service  section and click  New Job .  You can use whatever values you'd like for your Job, but as an example:   Job Name:  CleanPasswordResets  Job Path:  admin/pw_reset_cleanup.lua  Job Interval:  3600  Run Once:  OFF  Active:  ON   This Job will run every hour. Click the  Create  button.  You will be taken to the Job code editor. Use the following Job code to clear links that are older than a day:  local   job   =   core . job ()  function   job . run () \n   core . users . flushExpiredPasswordResets () \n   return   job . OK  end  return   job   When a user clicks on a link that no longer exists, they will be notified, at which point that can make another password reset request.",
            "title": "Create Expiry Job"
        },
        {
            "location": "/server/modules/utils/",
            "text": "Here you can find various helpers available in the root \ncore\n namespace.\n\n\nlog\n\n\nPrints a string message to the \n/usr/local/coronium/logs/coronium.log\n file.\n\n\ncore\n.\nlog\n(\n \nmessage\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message string to log.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\ncore\n.\nlog\n(\n'something to log'\n)\n\n\n\n\n\n\nsf (string format)\n\n\nFormat a string based on token replacment. This method shares the same attributes as the Lua string.format method.\n\n\ncore\n.\nsf\n(\n \nstr_template\n,\n \nvalues\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nstr_template\n\n\nThe string containing replacment tokens.\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA list of values for token replacment.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nusername\n \n=\n \n\"Dave\"\n\n\nlocal\n \nformatted_str\n \n=\n \ncore\n.\nsf\n(\n\"Hello, %s!\"\n,\n \nusername\n)\n\n\n\n-- formatted_str = \"Hello, Dave!\"\n\n\n\n\n\n\nNotes\n\n\nSome common token types:\n\n\n\n\n\n\n\n\nToken\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n%s\n\n\nUsed as a string replacment, any other type will error.\n\n\n\n\n\n\n%d\n\n\nUsed as a number replacment, any other type will error.\n\n\n\n\n\n\n\n\nYou can mix tokens, as well as have multiples:\n\n\nlocal\n \nstr\n \n=\n \ncore\n.\nsf\n(\n\"Ordered %d %s with %s.\"\n,\n \n2\n,\n \n'burgers'\n,\n \n'cheese'\n)\n\n\n-- `str` contains \"Ordered 2 burgers with cheese.\"\n\n\n\n\n\n\n\n\nTip\n\n\nThe \nsf\n method is useful for creating SQL queries, as well as other type-safe replacments.\n\n\n\n\ntrim\n\n\nRemoves empty space from the start and end of a string, if any.\n\n\ncore\n.\ntrim\n(\n \nstring\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nThe string to trim.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ntrimmed_str\n \n=\n \ncore\n.\ntrim\n(\n\"  I could use a trim  \"\n)\n\n\n\n-- trimmed_str = \"I could use a trim\"\n\n\n\n\n\n\nsplit\n\n\nConverts a delimited string into a Lua table array.\n\n\ncore\n.\nsplit\n(\n \nstring\n[,\n \ndelimiter\n \n]\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nThe delimited string to split.\n\n\nNone\n\n\nY\n\n\n\n\n\n\ndelimiter\n\n\nThe delimiter to split the string with.\n\n\nComma\n ( , )\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ntbl_array\n \n=\n \ncore\n.\nsplit\n(\n\"Red,Green,Blue\"\n)\n\n\n\n-- `tbl_array` contains {\"Red\",\"Green\",\"Blue\"}\n\n\n\n\n\n\nUsing a custom delimiter:\n\n\nlocal\n \ntbl_array\n \n=\n \ncore\n.\nsplit\n(\n\"User:2001:Storage\"\n,\n \n\":\"\n)\n\n\n\n-- `tbl_array` contains {\"User\",\"2001\",\"Storage\"}\n\n\n\n\n\n\njson\n\n\nJSON encoding and decoding.\n\n\nlocal\n \njson\n \n=\n \ncore\n.\njson\n\n\n\n\n\n\nEncode\n\n\nlocal\n \nstr\n \n=\n \njson\n.\nencode\n(\ntbl\n)\n\n\n\n\n\n\nDecode\n\n\nlocal\n \ntbl\n \n=\n \njson\n.\ndecode\n(\nstr\n)\n\n\n\n\n\n\njson_safe\n\n\nJSON encoding and decoding with error handling.\n\n\nlocal\n \njson\n \n=\n \ncore\n.\njson_safe\n\n\n\n\n\n\nEncode safe\n\n\nlocal\n \nstr\n,\n \nerr\n \n=\n \njson\n.\nencode\n(\ntbl\n)\n\n\n\n\n\n\nDecode safe\n\n\nlocal\n \ntbl\n,\n \nerr\n \n=\n \njson\n.\ndecode\n(\nstr\n)\n\n\n\n\n\n\nuuid\n\n\nGenerates a universally unique id.\n\n\nExample\n\n\nlocal\n \nuuid\n \n=\n \ncore\n.\nuuid\n()\n\n\n\n-- `uuid` will contain something like \"1f0af2fa-8b06-4605-bace-e13a85aa36d5\"\n\n\n\n\n\n\nmd5\n\n\nGenerate a hexadecimal MD5 digest from a given string.\n\n\nlocal\n \nmd5\n \n=\n \ncore\n.\nmd5\n(\n\"somestringtomd5\"\n)\n\n\n\n-- `md5` will contain something like \"9a5c03309269f0274506259626dc725c\"\n\n\n\n\n\n\nsleep\n\n\nPause processing for a certain amount of seconds. Useful in looping situations.\n\n\ncore\n.\nsleep\n(\nseconds\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nThe amount of seconds to sleep.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nfor\n \ni\n=\n1\n,\n \n20\n \ndo\n\n  \n--do some work\n\n\n  \ncore\n.\nsleep\n(\n2\n)\n \n--wait 2 seconds\n\n\nend\n\n\n\n\n\n\ncountryCode\n\n\nTwo letter country code based on the request IP. Can only be called in a \ncore.api\n method.\n\n\nExample\n\n\nlocal\n \ncode\n \n=\n \ncore\n.\ncountryCode\n()\n\n\n\n-- `code` will contain something like \"US\" or \"EU\"\n\n\n\n\n\n\ncallApi\n\n\nCall a method on a custom api endpoint built using the \ncore.api\n. This method allows you to call other project api methods from within a different project api.\n\n\ncore\n.\ncallApi\n(\nproject\n,\n \naction\n,\n \ndata_params\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nproject\n\n\nThe name of the api project.\n\n\nString\n\n\nY\n\n\n\n\n\n\naction\n\n\nThe name of the api method to call.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndata_params\n\n\nValues to pass to the api method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\ncallApi\n(\n\"default\"\n,\n \n\"test\"\n,\n \n{\ngreet\n=\n\"Hello!\"\n})",
            "title": "Utils"
        },
        {
            "location": "/server/modules/utils/#log",
            "text": "Prints a string message to the  /usr/local/coronium/logs/coronium.log  file.  core . log (   message   )   Parameters     Name  Description  Requried      message  The message string to log.  Y     Example  core . log ( 'something to log' )",
            "title": "log"
        },
        {
            "location": "/server/modules/utils/#sf-string-format",
            "text": "Format a string based on token replacment. This method shares the same attributes as the Lua string.format method.  core . sf (   str_template ,   values   )   Parameters     Name  Description  Requried      str_template  The string containing replacment tokens.  Y    values  A list of values for token replacment.  Y     Example  local   username   =   \"Dave\"  local   formatted_str   =   core . sf ( \"Hello, %s!\" ,   username )  -- formatted_str = \"Hello, Dave!\"   Notes  Some common token types:     Token  Description      %s  Used as a string replacment, any other type will error.    %d  Used as a number replacment, any other type will error.     You can mix tokens, as well as have multiples:  local   str   =   core . sf ( \"Ordered %d %s with %s.\" ,   2 ,   'burgers' ,   'cheese' )  -- `str` contains \"Ordered 2 burgers with cheese.\"    Tip  The  sf  method is useful for creating SQL queries, as well as other type-safe replacments.",
            "title": "sf (string format)"
        },
        {
            "location": "/server/modules/utils/#trim",
            "text": "Removes empty space from the start and end of a string, if any.  core . trim (   string   )   Parameters     Name  Description  Requried      string  The string to trim.  Y     Example  local   trimmed_str   =   core . trim ( \"  I could use a trim  \" )  -- trimmed_str = \"I could use a trim\"",
            "title": "trim"
        },
        {
            "location": "/server/modules/utils/#split",
            "text": "Converts a delimited string into a Lua table array.  core . split (   string [,   delimiter   ]   )   Parameters     Name  Description  Default  Requried      string  The delimited string to split.  None  Y    delimiter  The delimiter to split the string with.  Comma  ( , )  N     Example  local   tbl_array   =   core . split ( \"Red,Green,Blue\" )  -- `tbl_array` contains {\"Red\",\"Green\",\"Blue\"}   Using a custom delimiter:  local   tbl_array   =   core . split ( \"User:2001:Storage\" ,   \":\" )  -- `tbl_array` contains {\"User\",\"2001\",\"Storage\"}",
            "title": "split"
        },
        {
            "location": "/server/modules/utils/#json",
            "text": "JSON encoding and decoding.  local   json   =   core . json   Encode  local   str   =   json . encode ( tbl )   Decode  local   tbl   =   json . decode ( str )",
            "title": "json"
        },
        {
            "location": "/server/modules/utils/#json_safe",
            "text": "JSON encoding and decoding with error handling.  local   json   =   core . json_safe   Encode safe  local   str ,   err   =   json . encode ( tbl )   Decode safe  local   tbl ,   err   =   json . decode ( str )",
            "title": "json_safe"
        },
        {
            "location": "/server/modules/utils/#uuid",
            "text": "Generates a universally unique id.  Example  local   uuid   =   core . uuid ()  -- `uuid` will contain something like \"1f0af2fa-8b06-4605-bace-e13a85aa36d5\"",
            "title": "uuid"
        },
        {
            "location": "/server/modules/utils/#md5",
            "text": "Generate a hexadecimal MD5 digest from a given string.  local   md5   =   core . md5 ( \"somestringtomd5\" )  -- `md5` will contain something like \"9a5c03309269f0274506259626dc725c\"",
            "title": "md5"
        },
        {
            "location": "/server/modules/utils/#sleep",
            "text": "Pause processing for a certain amount of seconds. Useful in looping situations.  core . sleep ( seconds )   Parameters     Name  Description  Default  Requried      seconds  The amount of seconds to sleep.  Number  Y     Example  for   i = 1 ,   20   do \n   --do some work \n\n   core . sleep ( 2 )   --wait 2 seconds  end",
            "title": "sleep"
        },
        {
            "location": "/server/modules/utils/#countrycode",
            "text": "Two letter country code based on the request IP. Can only be called in a  core.api  method.  Example  local   code   =   core . countryCode ()  -- `code` will contain something like \"US\" or \"EU\"",
            "title": "countryCode"
        },
        {
            "location": "/server/modules/utils/#callapi",
            "text": "Call a method on a custom api endpoint built using the  core.api . This method allows you to call other project api methods from within a different project api.  core . callApi ( project ,   action ,   data_params )   Parameters     Name  Description  Type  Required      project  The name of the api project.  String  Y    action  The name of the api method to call.  String  Y    data_params  Values to pass to the api method.  Table  Y     Example  local   result ,   err   =   core . callApi ( \"default\" ,   \"test\" ,   { greet = \"Hello!\" })",
            "title": "callApi"
        },
        {
            "location": "/server/updates/",
            "text": "It's a good idea to keep your \nCoronium Core\n server up to date with the latest release. To update your server, simply follow the directions below.\n\n\nAvailable Updates\n\n\n2.6.5 to 2.7.0\n\n\nThe following will update your \nCoronium Core\n 2.6.5 server to version 2.7.0\n\n\n Be sure to read the \nCritical Update Notes\n before installing this update.\n\n\n\nChanges\n\n\n\n\n\n\nInternals (nginx, ngx_lua, LuaJIT, etc.) updated to the latest versions; providing security fixes, better stability, and other enhancements.\n\n\n\n\n\n\nEnhancements include \nGlobal Guard\n which will print a warning in the \napi.log\n if any global variables are found in your server-side code. Lua globals can cause critical race conditions to occur on client requests, so it is wise to keep a look out for these warnings and update your code as needed.\n\n\n\n\n\n\nUsers module password algorithm refactored to be on par with current standards. See \nNotes\n below.\n\n\n\n\n\n\nAdded\n\n\n\n\nServer plugins\n to allow a developer to extend the server-side \ncore\n namespace.\n\n\n\n\nUpdated\n\n\n\n\nEmail module\n (Mailgun) to support the \nEU\n region API endpoint, which can be set in the Webmin \nMailgun config section\n.\n\n\n\n\nFixed\n\n\n\n\nAn issue with downloads that limited a downloadable file size to 1 MB.\n\n\nA few modules that contained global variables due to lack of sleep.\n\n\n\n\n\n\n \nDigitalOcean Updater\n\n\n\n\nRoot User Required\n\n\nYou must be logged in as the \nroot\n user to run the updater or it may fail. \nThis update requires a server reboot\n.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nDigitalOcean\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.7.0/do.sh && sudo bash do.sh\n\n\n\n\n\n\n\n \nAmazon Lightsail/EC2 Updater\n\n\n\n\nUbuntu User Required\n\n\nYou must be logged in as the \nubuntu\n user to run the updater or it may fail. \nThis update requires a server reboot\n.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nAmazon Lightsail/EC2\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.7.0/ec2.sh && sudo bash ec2.sh\n\n\n\n\n\n\n\n2.6.4 to 2.6.5\n\n\nThe following will update your Coronium Core 2.6.4 server to version 2.6.5\n\n\nUpdated\n\n\n\n\nPages module version 2 which now supports form based uploads and cookies for user sessions, as well as a number of new methods for response output. See the updated documentation \nhere\n for more information.\n\n\n\n\nFixed\n\n\n\n\nAn issue with the Pages module where an incoming request to a Lua page that doesn't exist writes an error message to the \npages.log\n. Missing Pages dynamic Lua files now respond with a proper 404.\n\n\n\n\n\n\n \nDigitalOcean Updater\n\n\n\n\nRoot User Required\n\n\nYou must be logged in as the \nroot\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nDigitalOcean\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.5/do.sh && sudo bash do.sh\n\n\n\n\n\n\n\n \nAmazon EC2 Updater\n\n\n\n\nUbuntu User Required\n\n\nYou must be logged in as the \nubuntu\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nAmazon EC2\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.5/ec2.sh && sudo bash ec2.sh\n\n\n\n\n\n\n\n2.6.3 to 2.6.4\n\n\nThe following will update your Coronium Core 2.6.3 server to version 2.6.4\n\n\nAdded\n\n\n\n\n\n\nRemote access tools and information for MySQL and MongoDB enhanced database security. See \nMySQL Remote Access\n and \nMongoDB Remote Access\n for more details.\n\n\n\n\n\n\nMySQL module \nparseTimestamp\n method to convert MySQL timestamp to Unix timestamp.\n\n\n\n\n\n\n\n\n \nDigitalOcean Updater\n\n\n\n\nRoot User Required\n\n\nYou must be logged in as the \nroot\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nDigitalOcean\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.4/do.sh && sudo bash do.sh\n\n\n\n\n\n\n\n \nAmazon EC2 Updater\n\n\n\n\nUbuntu User Required\n\n\nYou must be logged in as the \nubuntu\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nAmazon EC2\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.4/ec2.sh && sudo bash ec2.sh\n\n\n\n\n\n\n\n2.6.2 to 2.6.3\n\n\nThe following will update your Coronium Core 2.6.2 server to version 2.6.3\n\n\nFixed\n\n\n\n\nCoronium Core system logs not rotating properly.\n\n\n\n\n\n\n \nDigitalOcean Updater\n\n\n\n\nRoot User Required\n\n\nYou must be logged in as the \nroot\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nDigitalOcean\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.3/do.sh && sudo bash do.sh\n\n\n\n\n\n\n\n \nAmazon EC2 Updater\n\n\n\n\nUbuntu User Required\n\n\nYou must be logged in as the \nubuntu\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nAmazon EC2\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.3/ec2.sh && sudo bash ec2.sh\n\n\n\n\n\n\n\n2.6.1 to 2.6.2\n\n\nThe following will update your Coronium Core 2.6.1 server to version 2.6.2\n\n\nAdded\n\n\n\n\nAbility to host \nCorona HTML5\n apps and games on your \nCoronium Core\n server, and utilize the \nCoroniumJS\n plugin to access custom \nserver-side APIs\n. See the \nHTML5 Builds\n section in the \nPages\n documentation for more details.\n\n\n\n\n\n\n \nDigitalOcean Updater\n\n\n\n\nRoot User Required\n\n\nYou must be logged in as the \nroot\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nDigitalOcean\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.2/do.sh && sudo bash do.sh\n\n\n\n\n\n\n\n \nAmazon EC2 Updater\n\n\n\n\nUbuntu User Required\n\n\nYou must be logged in as the \nubuntu\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nAmazon EC2\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.2/ec2.sh && sudo bash ec2.sh\n\n\n\n\n\n\n\n2.6.0 to 2.6.1\n\n\nThe following will update your Coronium Core 2.6.0 server to version 2.6.1\n\n\nAdded\n\n\n\n\nCustomizable error pages for common HTTP error codes. See the \nError Pages\n section in the Pages documentation.\n\n\n\n\nFixed\n\n\n\n\nAn issue with the Pages module where an incoming request to an unsupported endpoint would write an error message to the \npages.log\n, filling the log file with useless entries.\n\n\n\n\nUpdated\n\n\n\n\nMonit control files to be compatible with latest version. This allows running some other Coronium solutions on the Coronium Core server as well, like \nCoronium ChatterBox\n.\n\n\n\n\n\n\n \nDigitalOcean Updater\n\n\n\n\nRoot User Required\n\n\nYou must be logged in as the \nroot\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nDigitalOcean\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.1/do.sh && sudo bash do.sh\n\n\n\n\n\n\n\n \nAmazon EC2 Updater\n\n\n\n\nUbuntu User Required\n\n\nYou must be logged in as the \nubuntu\n user to run the updater or it may fail.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nAmazon EC2\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.1/ec2.sh && sudo bash ec2.sh\n\n\n\n\n\n\n\n2.5.0 to 2.6.0\n\n\nThe following will update your Coronium Core 2.5.0 server to version 2.6.0\n\n\n Be sure to read the \nCritical Update Notes\n before installing this update.\n\n\n\nAdded\n\n\n\n\n\n\nPassword reset link that can be sent to a user with an email address using the server-side \nusers.sendPasswordResetLink\n method, allowing a user to reset their password via online form. Supports custom email template messaging. See also the \nPassword Reset\n guide. \n\n\n\n\n\n\nScope Permissions\n for additional security, allowing a developer to control what client-side actions are allowed.\n\n\n\n\n\n\nServer-side \nusers.sendConfirmationLink\n to send a confirmation email for server-side created users. See also the \nConfirmations\n guide. \n\n\n\n\n\n\nServer-side utility method \ncore.md5\n which creates an MD5 digest of the given string.\n\n\n\n\n\n\nServer-side command line tool to \ndisable/enable MongoDB\n to gain some additional system resources in the event a developer is not using any MongoDB related functionality.\n\n\n\n\n\n\nA bunch of new and updated documentation.\n\n\n\n\n\n\nUpdated\n\n\n\n\n\n\nClient-side \nusers.login\n method to support login by \nemail\n \nor\n \nusername\n.\n\n\n\n\n\n\nServer-side \nusers.getWithQuery\n to query against a hashed password.\n\n\n\n\n\n\nCoronium Core Corona Plugin to support version 2.6.0 or better servers.\n\n\n\n\n\n\nFixed\n\n\n\n\n\n\nArchive projects action in the \nSystem Info\n section not downloading.\n\n\n\n\n\n\nServer-side \nusers.getWithQuery\n only working with the \nactive\n key set.\n\n\n\n\n\n\nUser confirmation email send incorrectly reporting \"failed\" status.\n\n\n\n\n\n\nVarious minor issues.\n\n\n\n\n\n\nAPI Changes\n\n\n\n\nThe client-side \ncore.init\n method now requires a \nversion\n parameter. See \nInitialization\n.\n\n\n\n\nWebmin 2.0.0\n\n\n\n\n\n\nNew \nScopes\n section for viewing, and managing \nScope Permissions\n.\n\n\n\n\n\n\nAuto Scroll Log\n option added to the \nConfiguration\n section.\n\n\n\n\n\n\nCode completions updated for new methods.\n\n\n\n\n\n\nTons of tweaks, fixes, reorganization, and visual updates\n\n\n\n\n\n\n Be sure to read the \nCritical Update Notes\n before installing this update.\n\n\n\n\n\nNote: Close any open Webmin browser windows before updating.\n\n\n \nDigitalOcean Updater\n\n\n\n\nRoot User Required\n\n\nYou must be logged in as the \nroot\n user to run the updater or it may fail. \nThis update requires a server reboot\n.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nDigitalOcean\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.0/do.sh && sudo bash do.sh\n\n\n\n\n\n\n\n \nAmazon EC2 Updater\n\n\n\n\nUbuntu User Required\n\n\nYou must be logged in as the \nubuntu\n user to run the updater or it may fail. \nThis update requires a server reboot\n.\n\n\n\n\nPaste the following one-liner into your terminal to start the \nAmazon EC2\n update:\n\n\nwget https://s3.amazonaws.com/coronium-core-update/v2.6.0/ec2.sh && sudo bash ec2.sh\n\n\n\n\n\nDepreciated\n\n\n2.4.1 to 2.5.0\n\n\n\n\nAvailability Notice\n\n\nThis version/update is no longer supported, but is available by request.\n\n\n\n\nAdded\n\n\n\n\n\n\nServer-side \nJobs API\n and service allowing you to run code periodically in the background for a variety of use cases. See the \nJobs Guide\n for full usage information.\n\n\n\n\n\n\nA server-side utility method \ncore.sleep\n that allows one to pause code execution for a duration of time. Useful for tight work loops.\n\n\n\n\n\n\nServer-side \ncore.timer\n method for single-use or recurring timers.\n\n\n\n\n\n\nServer-side \nnetwork.pipeline\n method added to make sequential network calls to a host.\n\n\n\n\n\n\nAbility to set a MySQL column to a valid \nNULL\n value when using the WHERE table syntax (see \nhere\n).\n\n\n\n\n\n\nUpdated documentation for all new additions.\n\n\n\n\n\n\nFixed\n\n\n\n\n\n\nAn edge case that could cause a log file to stop loading properly in the Log Viewer.\n\n\n\n\n\n\nmysql.selectCount\n returning a string type as opposed to a number.\n\n\n\n\n\n\nAPI Changes\n\n\n\n\n\n\nServer-side \nnetwork.get\n previously returned only the response body. It now correctly returns a response object similar to \nnetwork.request\n.\n\n\n\n\n\n\nServer-side \nnetwork.post\n previously returned only the response body. It now correctly returns a response object similar to \nnetwork.request\n.\n\n\n\n\n\n\nWebmin 1.4.0\n\n\n\n\n\n\nJobs\n section has been added to create, manage, and edit Jobs and the Job Service.\n\n\n\n\n\n\nYou can now manage log files in the \nSystem Info\n section.\n\n\n\n\n\n\nOptional auto-reload added when viewing log files.\n\n\n\n\n\n\nServer key moved back to the \nConfiguration\n section.\n\n\n\n\n\n\nMore clean up, tweaks, and fixes.\n\n\n\n\n\n\n2.4.0 to 2.4.1\n\n\n\n\nAvailability Notice\n\n\nThis version/update is no longer supported, but is available by request.\n\n\n\n\nAdded\n\n\n\n\nUserland \nnginx\n config directories for server add-ons (like PHP, etc).\n\n\nSafety to make sure an update is applicable to the installed version.\n\n\nUsing AJAX with the Pages API\n in the \ndocumentation\n.\n\n\n\n\nUpdated\n\n\n\n\nNginx\n config updated for better throughput at high loads.\n\n\n\n\nWebmin 1.3.0\n\n\n\n\nNew \nSystem\n section added to show general system information.\n\n\nNew version alert added to show when a new version is available.\n\n\nSafety to make sure unsaved code is not lost before leaving the code editor.\n\n\nUnsaved code is automatically saved if the editor is left idle for more than 60 seconds.\n\n\nYou can now download a .zip archive of your current API projects in the \nSystem\n section.\n\n\nVarious cosmetic changes and updates.\n\n\n\n\n2.3.2 to 2.4.0\n\n\n\n\nAvailability Notice\n\n\nThis version/update is no longer supported, but is available by request.\n\n\n\n\nAdded\n\n\n\n\n\n\nServer-side \nUsers\n module, allowing for custom user logic and types. Includes new methods \ngetGroup\n, \ngetWithQuery\n, and \ngetAndMerge\n for advanced user queries, record associations, and more.\n\n\n\n\n\n\nServer-side and client-side \nOAuth API\n which is a \nUsers\n module extension to support OAuth client IDs, access tokens, and expirys from Facebook login, Google sign-in, etc.\n\n\n\n\n\n\nMySQL module EZ Query method \nmysql.selectMerge\n to select from multiple databases and tables in a single call. See the client-side \nselectMerge\n or server-side \nselectMerge\n documentation for more details. \n\n\n\n\n\n\nMySQL module EZ Query method \nmysql.selectCount\n to get records counts based on queries. See the client-side \nselectCount\n or server-side \nselectCount\n documentation for more details. \n\n\n\n\n\n\nServer-side MySQL module \ntime based methods\n can now accept a UNIX timestamp for conversion.\n\n\n\n\n\n\nServer-side MySQL module \nlogQueries\n method to enable logging of the raw queries being created under the hood for debugging purposes.\n\n\n\n\n\n\nModules that accept a \nwhere\n key can now benefit from a new special table type clause. See \nThe WHERE Key\n for more information.\n\n\n\n\n\n\nA new field in the \nUsers\n module called \ngroup\n to help partition your users within a scope.\n\n\n\n\n\n\nA new incoming parameter \nscope\n for use in custom server-side API methods (see \nInput\n).\n\n\n\n\n\n\nLogging is now split into \napi\n, \npages\n, and \nnginx\n logs for less noise and more specificality.\n\n\n\n\n\n\nLots of new and revised documentation.\n\n\n\n\n\n\nFixed\n\n\n\n\n\n\nUsers module \nField 'extra' doesn't have a default value\n error.\n\n\n\n\n\n\nAdministration database collation type inconsistencies.\n\n\n\n\n\n\nTrigger privilege unavailable for external MySQL admin clients.\n\n\n\n\n\n\nUpdated\n\n\n\n\n\n\nClient connection count increased significantly.\n\n\n\n\n\n\nAlmost all server-side methods now support error, and error status codes that can be returned to the client. See \nStatus Codes\n.\n\n\n\n\n\n\nAPI Changes\n\n\n\n\n\n\nmysql.selectBatch\n \nkey\n parameter is now optional per entry. If not specified the table name will be used instead. Be sure to provide a \nkey\n if multiple entries use the same table.\n\n\n\n\n\n\nmysql.selectBatch\n now returns a single record (similar to \nmysql.selectOne\n) if the \nlimit\n for an entry is set to 1.\n\n\n\n\n\n\nWebmin Update 1.2\n\n\n\n\n\n\nNow supports multi-file server-side API projects.\n\n\n\n\n\n\nNew Webmin settings area in the \nConfig\n section.\n\n\n\n\n\n\nLog viewer updated to view newly split log files. \n\n\n\n\n\n\nLog displays with (optional) colorized output. Increased line output.\n\n\n\n\n\n\nDark theme now available for the code editor.\n\n\n\n\n\n\nNew user keys \noauth\n and \ngroup\n added to the user details page.\n\n\n\n\n\n\nFilter by group added to the user search page.\n\n\n\n\n\n\nCode editor completions for all new methods.\n\n\n\n\n\n\nLots of updates and fixes both under and over the hood.\n\n\n\n\n\n\n2.3.0 to 2.3.2\n\n\n\n\nAvailability Notice\n\n\nThis version/update is no longer supported, but is available by request.\n\n\n\n\nThe following will update your Coronium Core 2.3.0 or 2.3.1 server to version 2.3.2\n\n\nFixed\n\n\n\n\nLocked down all module access to the administration database.\n\n\nProvided enhanced security for client-side MySQL injections.\n\n\n\n\nUpdated\n\n\n\n\ncore.users\n \nextra\n storage increased significantly.\n\n\n\n\n2.2.0 to 2.3.0\n\n\n\n\nAvailability Notice\n\n\nThis version/update is no longer supported, but is available by request.\n\n\n\n\nAdded\n\n\n\n\n\n\nThe EZ Query MySQL module methods \nselectBatch\n, \ninsertBatch\n, \nupdateMany\n, \nupdateBatch\n, \ndeleteMany\n, and \ndeleteBatch\n have been added for optimized performance, reduced network calls, and simplification of code when working with multiple query entries; particularly on the client-side. See the client-side \nMySQL module\n documentation for more details. See also \nOptimized Methods\n.\n\n\n\n\n\n\nThe server-side MySQL module methods \ndbConnect\n, \ndbQuery\n, and \ndbClose\n have been added for advanced control over the database connection, allowing for highly performant queries. See \nAdvanced Methods\n for more information.\n\n\n\n\n\n\nThe ability to fine tune the Coronium MySQL server configuration, which has been consolidated into a single file. See the \nConfigruation File\n section in the MySQL server guide.\n\n\n\n\n\n\nA client-side response event key named \ntt\n, which shows the total trip time for the request. See \nResponse Events\n for more details.\n\n\n\n\n\n\nA number of system-wide tunings for better performance for high traffic.\n\n\n\n\n\n\nFixed\n\n\n\n\nThe \ninsertMany\n MySQL module method now handles a single entry properly.\n\n\n\n\nUpdated\n\n\n\n\nNginx core updated to the latest version.\n\n\nLuaJIT core updated to the latest version.\n\n\nAPI request throttle has been slightly lowered.\n\n\nWebmin code editor completions for new methods.\n\n\n\n\nAPI Changes\n\n\n\n\nThe \ninsertMany\n MySQL module response has been changed. Previously the response returned the number of records inserted. Now the response contains an array of tables with either the inserted id or error. Previously this method would error out if \nany\n of the inserts failed. Now all inserts are attempted and the error, if any, for the insert is returned in the response array. See the client-side \ninsertMany\n or server-side \ninsertMany\n documentation for more details.\n\n\n\n\n2.1.1 to 2.2.0\n\n\n\n\nAvailability Notice\n\n\nThis version/update is no longer supported, but is available by request.\n\n\n\n\nAdded\n\n\n\n\n\n\nresendConfirmation\n method added to the Users module, to resend a confirmation email.\n\n\n\n\n\n\nUsers \"extra\" metadata now supports boolean types.\n\n\n\n\n\n\nFixed\n\n\n\n\nDocumentation links in the Webmin now resolve properly.\n\n\n\n\nAPI Changes\n\n\nusers.login\n\n\nThe client-side Users module \nlogin\n response has changed. See the \nLogging In\n section of the documentation for more information.\n\n\nusers.create\n\n\nThe client-side Users module \ncreate\n response has changed. See the \nCreating\n users section of the documentation for more information.\n\n\n2.1.0 to 2.1.1\n\n\n\n\nAvailability Notice\n\n\nThis version/update is no longer supported, but is available by request.\n\n\n\n\nAdded\n\n\n\n\nFull support for multiple applications with separate scope for users and metrics.\n\n\nWebmin \"Today\" view for global application usage metrics for the current day.\n\n\n\n\n2.0.3 to 2.1.0\n\n\n\n\nAvailability Notice\n\n\nThis version/update is no longer supported, but is available by request.\n\n\n\n\nAdded\n\n\n\n\nBrowser based web admin for informational data in regards to app usage, users, device metrics, minor administration, and more.\n\n\nBrowser based code editor for building server-side project APIs.\n\n\nClient-side Users module for user registration, login tracking, and optional customizable email confirmations.\n\n\nClient-side Analytics module to collect usage statistics and device metrics.\n\n\nServer-side Email module for sending email via Mailgun.\n\n\nServer-side Template module for resuable customized output.\n\n\nCORS support for the Pages module.\n\n\nMySQL EZ Query method \nselectOne\n added for simple single record retrieval.\n\n\nMySQL EZ Query method \ninsertMany\n added for optimized multi-record insertion.\n\n\nVarious date and time utility methods for the MySQL module.\n\n\nAbility to adjust Corona network client-side timeout for large workloads.\n\n\nAbility to adjust MySQL server-side timeout for large workloads.\n\n\n\n\n2.0.2 to 2.0.3\n\n\n\n\nAvailability Notice\n\n\nThis version/update is no longer supported, but is available by request.\n\n\n\n\nFixed\n\n\n\n\nTemp cache body file now works properly for large payloads.\n\n\nPages \nresponse\n method returns a status properly when provided.\n\n\n\n\nAdded\n\n\n\n\nPages \nstatus\n convienence method added to quickly return a status code other than 200.\n\n\nServer \ncoronium.body.conf\n file which can be used to adjust the body cache for servers with large memory allocations.\n\n\n\n\nWebmin HTTPS/SSL\n\n\nIf your Coronium Core install was setup with HTTPS/SSL support, you will need to update the Webmin API host to work over HTTPS/SSL as well.\n\n\n\n\nImportant\n\n\nIf you've performed this step in a previous update, you \ndo not\n need to do it again, unless you are having problems accessing your Webmin.\n\n\n\n\nLog in as the \ncoronium\n user, and from the command line, run the following, using your secure domain name:\n\n\nsudo webmin-apihost https://<your.coronium.host>\n\n\n\n\n\nCritical Update Notes\n\n\n2.6.0 Update\n\n\nCoronium Core version 2.6.0 introduces some major architectural changes to the underlying system to lay the groundwork for some current and future enhancements.\n\n\nIf at all possible it is reccomended to \nrun a fresh install\n and import your data and projects. If this is not an option, be sure to carefully read the notes that follow so your update will go smoothly.\n\n\nLive Apps\n\n\nIf you currently have live apps running on v2.5.0 you can still update your server, but you will be unable to use any of the new features until you redeploy your application with the new Coronium Core Plugin set to version 2 (see \ncore.init\n). All of the following information needs to be understood as well before updating.\n\n\nUsers Data\n\n\nVersion 2.6.0 now supports \nlogins by email address\n. \nThis means that no two users in the same scope can have the same email address in the Users system\n.\n\n\nIf you currently have users in the same scope with the same email address, certain functionality like \nusers.sendPasswordReset\n, as well as, logging in by email address, will not work properly.  Other validation issues will also arise. \n\n\nYou will need to clean up Users that have this issue before updating\n. If you have questions on how to do this, visit the \nsupport forum\n.\n\n\nScopes\n\n\nWith the addition of \nScope Permissions\n, scopes are being more fully intergrated into the Webmin system. \n\n\nWhen you first update, you will need to visit the \nScopes\n section in the Webmin and click the \nUpdate Cache\n button to import your current scopes. You will then be able to edit permissions on them, if needed.\n\n\nMore enhancements to scopes management are coming in future updates.\n\n\nPlugin Version\n\n\nBecause the Corona plugin system does not support multiple plugin versions internally, you must now supply a \nversion\n parameter to the client-side \ncore.init\n method. \n\n\nFor server features included in v2.6.0 or better, you must set the plugin version number to \n2\n.\n\n\ncore\n.\ninit\n({\n\n  \nversion\n \n=\n \n2\n,\n\n  \nserver\n \n=\n \n\"https://<coronium-host-address>\"\n,\n\n  \nkey\n \n=\n \n\"<coronium-server-key>\"\n,\n\n  \nscope\n \n=\n \n\"Space Race\"\n\n\n})\n\n\n\n\n\n\n2.7.0 Update\n\n\nUpdater Notes\n\n\nThe underlying updating mechanism has changed. If you have edited core files (found in \n/usr/local/coronium\n) then you run the risk of losing whatever changes you may have made. Backup these files first if needed. \nYou should never change files in the core directory\n.\n\n\nUser ID Migration\n\n\nAutomatic Migration\n\n\nThe IDs used for the built-in Users system have been updated to current standards. This requires a migration of current IDs to the stronger versions.\n\n\nThe common way this works is that as a user logs in with the Users module -- and if an older ID version is detected -- it will \nautomatically\n be migrated to the new ID type.\n\n\nManual Migration\n\n\nIf you want to manually update all the current user IDs to the new type all in one round, you will need to set up a server-side API script, and then call this endpoint from a local Coronium app.\n\n\n\n\nCreate a new server-side project called \"migration\".\n\n\nIn the \nmain.lua\n project file add the following api function:\n\n\n\n\nfunction\n \napi\n.\ncompat\n(\n \ninput\n \n)\n\n  \nlocal\n \ncompat\n \n=\n \nrequire\n(\n\"coronium.compat\"\n)\n\n  \nlocal\n \nres\n,\n \nerr\n \n=\n \ncompat\n.\nensureUserPasswords\n()\n\n  \nif\n \nnot\n \nres\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \nreturn\n \nres\n\n\nend\n\n\n\n\n\n\n\n\nOnce this is set up, call the endpoint from a simple Corona project:\n\n\n\n\nlocal\n \nfunction\n \nonResponse\n(\nevt\n)\n\n  \ncore\n.\ndebug\n(\nevt\n)\n\n\nend\n\n\n\ncore\n.\napi\n.\ncompat\n(\nonResponse\n)\n\n\n\n\n\n\n\n\nIf there are no major errors, you should receive the count of updated users.\n\n\n\n\nAll user IDs are updated, and more secure. Any future users will automatically start with the newer ID type, so there is little need to ever rerun the manual migration. Feel free to delete the \"migration\" project.\n\n\nGlobal Guard\n\n\nThe addition of the global guard can have some side effects, mostly related to other external Lua modules -- such as LFS, etc. that still use some global values. You may see warnings regarding this, and at this time you will need to ignore them until LFS, and others, update thier respective modules.\n\n\nBecause a global could be crippling to your application, it has been mandated by the developers of the \nngx_lua\n module that \nglobal guard cannot be disabled\n (though it is currently being debated).\n\n\nOver the next few versions, Coronium Core is going to try and phase out any use of LFS. Unless they update it (not likely) first.",
            "title": "Updates"
        },
        {
            "location": "/server/updates/#available-updates",
            "text": "",
            "title": "Available Updates"
        },
        {
            "location": "/server/updates/#265-to-270",
            "text": "The following will update your  Coronium Core  2.6.5 server to version 2.7.0   Be sure to read the  Critical Update Notes  before installing this update.  Changes    Internals (nginx, ngx_lua, LuaJIT, etc.) updated to the latest versions; providing security fixes, better stability, and other enhancements.    Enhancements include  Global Guard  which will print a warning in the  api.log  if any global variables are found in your server-side code. Lua globals can cause critical race conditions to occur on client requests, so it is wise to keep a look out for these warnings and update your code as needed.    Users module password algorithm refactored to be on par with current standards. See  Notes  below.    Added   Server plugins  to allow a developer to extend the server-side  core  namespace.   Updated   Email module  (Mailgun) to support the  EU  region API endpoint, which can be set in the Webmin  Mailgun config section .   Fixed   An issue with downloads that limited a downloadable file size to 1 MB.  A few modules that contained global variables due to lack of sleep.      DigitalOcean Updater   Root User Required  You must be logged in as the  root  user to run the updater or it may fail.  This update requires a server reboot .   Paste the following one-liner into your terminal to start the  DigitalOcean  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.7.0/do.sh && sudo bash do.sh     Amazon Lightsail/EC2 Updater   Ubuntu User Required  You must be logged in as the  ubuntu  user to run the updater or it may fail.  This update requires a server reboot .   Paste the following one-liner into your terminal to start the  Amazon Lightsail/EC2  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.7.0/ec2.sh && sudo bash ec2.sh",
            "title": "2.6.5 to 2.7.0"
        },
        {
            "location": "/server/updates/#264-to-265",
            "text": "The following will update your Coronium Core 2.6.4 server to version 2.6.5  Updated   Pages module version 2 which now supports form based uploads and cookies for user sessions, as well as a number of new methods for response output. See the updated documentation  here  for more information.   Fixed   An issue with the Pages module where an incoming request to a Lua page that doesn't exist writes an error message to the  pages.log . Missing Pages dynamic Lua files now respond with a proper 404.      DigitalOcean Updater   Root User Required  You must be logged in as the  root  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  DigitalOcean  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.5/do.sh && sudo bash do.sh     Amazon EC2 Updater   Ubuntu User Required  You must be logged in as the  ubuntu  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  Amazon EC2  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.5/ec2.sh && sudo bash ec2.sh",
            "title": "2.6.4 to 2.6.5"
        },
        {
            "location": "/server/updates/#263-to-264",
            "text": "The following will update your Coronium Core 2.6.3 server to version 2.6.4  Added    Remote access tools and information for MySQL and MongoDB enhanced database security. See  MySQL Remote Access  and  MongoDB Remote Access  for more details.    MySQL module  parseTimestamp  method to convert MySQL timestamp to Unix timestamp.       DigitalOcean Updater   Root User Required  You must be logged in as the  root  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  DigitalOcean  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.4/do.sh && sudo bash do.sh     Amazon EC2 Updater   Ubuntu User Required  You must be logged in as the  ubuntu  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  Amazon EC2  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.4/ec2.sh && sudo bash ec2.sh",
            "title": "2.6.3 to 2.6.4"
        },
        {
            "location": "/server/updates/#262-to-263",
            "text": "The following will update your Coronium Core 2.6.2 server to version 2.6.3  Fixed   Coronium Core system logs not rotating properly.      DigitalOcean Updater   Root User Required  You must be logged in as the  root  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  DigitalOcean  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.3/do.sh && sudo bash do.sh     Amazon EC2 Updater   Ubuntu User Required  You must be logged in as the  ubuntu  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  Amazon EC2  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.3/ec2.sh && sudo bash ec2.sh",
            "title": "2.6.2 to 2.6.3"
        },
        {
            "location": "/server/updates/#261-to-262",
            "text": "The following will update your Coronium Core 2.6.1 server to version 2.6.2  Added   Ability to host  Corona HTML5  apps and games on your  Coronium Core  server, and utilize the  CoroniumJS  plugin to access custom  server-side APIs . See the  HTML5 Builds  section in the  Pages  documentation for more details.      DigitalOcean Updater   Root User Required  You must be logged in as the  root  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  DigitalOcean  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.2/do.sh && sudo bash do.sh     Amazon EC2 Updater   Ubuntu User Required  You must be logged in as the  ubuntu  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  Amazon EC2  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.2/ec2.sh && sudo bash ec2.sh",
            "title": "2.6.1 to 2.6.2"
        },
        {
            "location": "/server/updates/#260-to-261",
            "text": "The following will update your Coronium Core 2.6.0 server to version 2.6.1  Added   Customizable error pages for common HTTP error codes. See the  Error Pages  section in the Pages documentation.   Fixed   An issue with the Pages module where an incoming request to an unsupported endpoint would write an error message to the  pages.log , filling the log file with useless entries.   Updated   Monit control files to be compatible with latest version. This allows running some other Coronium solutions on the Coronium Core server as well, like  Coronium ChatterBox .      DigitalOcean Updater   Root User Required  You must be logged in as the  root  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  DigitalOcean  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.1/do.sh && sudo bash do.sh     Amazon EC2 Updater   Ubuntu User Required  You must be logged in as the  ubuntu  user to run the updater or it may fail.   Paste the following one-liner into your terminal to start the  Amazon EC2  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.1/ec2.sh && sudo bash ec2.sh",
            "title": "2.6.0 to 2.6.1"
        },
        {
            "location": "/server/updates/#250-to-260",
            "text": "The following will update your Coronium Core 2.5.0 server to version 2.6.0   Be sure to read the  Critical Update Notes  before installing this update.  Added    Password reset link that can be sent to a user with an email address using the server-side  users.sendPasswordResetLink  method, allowing a user to reset their password via online form. Supports custom email template messaging. See also the  Password Reset  guide.     Scope Permissions  for additional security, allowing a developer to control what client-side actions are allowed.    Server-side  users.sendConfirmationLink  to send a confirmation email for server-side created users. See also the  Confirmations  guide.     Server-side utility method  core.md5  which creates an MD5 digest of the given string.    Server-side command line tool to  disable/enable MongoDB  to gain some additional system resources in the event a developer is not using any MongoDB related functionality.    A bunch of new and updated documentation.    Updated    Client-side  users.login  method to support login by  email   or   username .    Server-side  users.getWithQuery  to query against a hashed password.    Coronium Core Corona Plugin to support version 2.6.0 or better servers.    Fixed    Archive projects action in the  System Info  section not downloading.    Server-side  users.getWithQuery  only working with the  active  key set.    User confirmation email send incorrectly reporting \"failed\" status.    Various minor issues.    API Changes   The client-side  core.init  method now requires a  version  parameter. See  Initialization .   Webmin 2.0.0    New  Scopes  section for viewing, and managing  Scope Permissions .    Auto Scroll Log  option added to the  Configuration  section.    Code completions updated for new methods.    Tons of tweaks, fixes, reorganization, and visual updates     Be sure to read the  Critical Update Notes  before installing this update.   Note: Close any open Webmin browser windows before updating.    DigitalOcean Updater   Root User Required  You must be logged in as the  root  user to run the updater or it may fail.  This update requires a server reboot .   Paste the following one-liner into your terminal to start the  DigitalOcean  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.0/do.sh && sudo bash do.sh     Amazon EC2 Updater   Ubuntu User Required  You must be logged in as the  ubuntu  user to run the updater or it may fail.  This update requires a server reboot .   Paste the following one-liner into your terminal to start the  Amazon EC2  update:  wget https://s3.amazonaws.com/coronium-core-update/v2.6.0/ec2.sh && sudo bash ec2.sh",
            "title": "2.5.0 to 2.6.0"
        },
        {
            "location": "/server/updates/#depreciated",
            "text": "",
            "title": "Depreciated"
        },
        {
            "location": "/server/updates/#241-to-250",
            "text": "Availability Notice  This version/update is no longer supported, but is available by request.   Added    Server-side  Jobs API  and service allowing you to run code periodically in the background for a variety of use cases. See the  Jobs Guide  for full usage information.    A server-side utility method  core.sleep  that allows one to pause code execution for a duration of time. Useful for tight work loops.    Server-side  core.timer  method for single-use or recurring timers.    Server-side  network.pipeline  method added to make sequential network calls to a host.    Ability to set a MySQL column to a valid  NULL  value when using the WHERE table syntax (see  here ).    Updated documentation for all new additions.    Fixed    An edge case that could cause a log file to stop loading properly in the Log Viewer.    mysql.selectCount  returning a string type as opposed to a number.    API Changes    Server-side  network.get  previously returned only the response body. It now correctly returns a response object similar to  network.request .    Server-side  network.post  previously returned only the response body. It now correctly returns a response object similar to  network.request .    Webmin 1.4.0    Jobs  section has been added to create, manage, and edit Jobs and the Job Service.    You can now manage log files in the  System Info  section.    Optional auto-reload added when viewing log files.    Server key moved back to the  Configuration  section.    More clean up, tweaks, and fixes.",
            "title": "2.4.1 to 2.5.0"
        },
        {
            "location": "/server/updates/#240-to-241",
            "text": "Availability Notice  This version/update is no longer supported, but is available by request.   Added   Userland  nginx  config directories for server add-ons (like PHP, etc).  Safety to make sure an update is applicable to the installed version.  Using AJAX with the Pages API  in the  documentation .   Updated   Nginx  config updated for better throughput at high loads.   Webmin 1.3.0   New  System  section added to show general system information.  New version alert added to show when a new version is available.  Safety to make sure unsaved code is not lost before leaving the code editor.  Unsaved code is automatically saved if the editor is left idle for more than 60 seconds.  You can now download a .zip archive of your current API projects in the  System  section.  Various cosmetic changes and updates.",
            "title": "2.4.0 to 2.4.1"
        },
        {
            "location": "/server/updates/#232-to-240",
            "text": "Availability Notice  This version/update is no longer supported, but is available by request.   Added    Server-side  Users  module, allowing for custom user logic and types. Includes new methods  getGroup ,  getWithQuery , and  getAndMerge  for advanced user queries, record associations, and more.    Server-side and client-side  OAuth API  which is a  Users  module extension to support OAuth client IDs, access tokens, and expirys from Facebook login, Google sign-in, etc.    MySQL module EZ Query method  mysql.selectMerge  to select from multiple databases and tables in a single call. See the client-side  selectMerge  or server-side  selectMerge  documentation for more details.     MySQL module EZ Query method  mysql.selectCount  to get records counts based on queries. See the client-side  selectCount  or server-side  selectCount  documentation for more details.     Server-side MySQL module  time based methods  can now accept a UNIX timestamp for conversion.    Server-side MySQL module  logQueries  method to enable logging of the raw queries being created under the hood for debugging purposes.    Modules that accept a  where  key can now benefit from a new special table type clause. See  The WHERE Key  for more information.    A new field in the  Users  module called  group  to help partition your users within a scope.    A new incoming parameter  scope  for use in custom server-side API methods (see  Input ).    Logging is now split into  api ,  pages , and  nginx  logs for less noise and more specificality.    Lots of new and revised documentation.    Fixed    Users module  Field 'extra' doesn't have a default value  error.    Administration database collation type inconsistencies.    Trigger privilege unavailable for external MySQL admin clients.    Updated    Client connection count increased significantly.    Almost all server-side methods now support error, and error status codes that can be returned to the client. See  Status Codes .    API Changes    mysql.selectBatch   key  parameter is now optional per entry. If not specified the table name will be used instead. Be sure to provide a  key  if multiple entries use the same table.    mysql.selectBatch  now returns a single record (similar to  mysql.selectOne ) if the  limit  for an entry is set to 1.    Webmin Update 1.2    Now supports multi-file server-side API projects.    New Webmin settings area in the  Config  section.    Log viewer updated to view newly split log files.     Log displays with (optional) colorized output. Increased line output.    Dark theme now available for the code editor.    New user keys  oauth  and  group  added to the user details page.    Filter by group added to the user search page.    Code editor completions for all new methods.    Lots of updates and fixes both under and over the hood.",
            "title": "2.3.2 to 2.4.0"
        },
        {
            "location": "/server/updates/#230-to-232",
            "text": "Availability Notice  This version/update is no longer supported, but is available by request.   The following will update your Coronium Core 2.3.0 or 2.3.1 server to version 2.3.2  Fixed   Locked down all module access to the administration database.  Provided enhanced security for client-side MySQL injections.   Updated   core.users   extra  storage increased significantly.",
            "title": "2.3.0 to 2.3.2"
        },
        {
            "location": "/server/updates/#220-to-230",
            "text": "Availability Notice  This version/update is no longer supported, but is available by request.   Added    The EZ Query MySQL module methods  selectBatch ,  insertBatch ,  updateMany ,  updateBatch ,  deleteMany , and  deleteBatch  have been added for optimized performance, reduced network calls, and simplification of code when working with multiple query entries; particularly on the client-side. See the client-side  MySQL module  documentation for more details. See also  Optimized Methods .    The server-side MySQL module methods  dbConnect ,  dbQuery , and  dbClose  have been added for advanced control over the database connection, allowing for highly performant queries. See  Advanced Methods  for more information.    The ability to fine tune the Coronium MySQL server configuration, which has been consolidated into a single file. See the  Configruation File  section in the MySQL server guide.    A client-side response event key named  tt , which shows the total trip time for the request. See  Response Events  for more details.    A number of system-wide tunings for better performance for high traffic.    Fixed   The  insertMany  MySQL module method now handles a single entry properly.   Updated   Nginx core updated to the latest version.  LuaJIT core updated to the latest version.  API request throttle has been slightly lowered.  Webmin code editor completions for new methods.   API Changes   The  insertMany  MySQL module response has been changed. Previously the response returned the number of records inserted. Now the response contains an array of tables with either the inserted id or error. Previously this method would error out if  any  of the inserts failed. Now all inserts are attempted and the error, if any, for the insert is returned in the response array. See the client-side  insertMany  or server-side  insertMany  documentation for more details.",
            "title": "2.2.0 to 2.3.0"
        },
        {
            "location": "/server/updates/#211-to-220",
            "text": "Availability Notice  This version/update is no longer supported, but is available by request.   Added    resendConfirmation  method added to the Users module, to resend a confirmation email.    Users \"extra\" metadata now supports boolean types.    Fixed   Documentation links in the Webmin now resolve properly.   API Changes  users.login  The client-side Users module  login  response has changed. See the  Logging In  section of the documentation for more information.  users.create  The client-side Users module  create  response has changed. See the  Creating  users section of the documentation for more information.",
            "title": "2.1.1 to 2.2.0"
        },
        {
            "location": "/server/updates/#210-to-211",
            "text": "Availability Notice  This version/update is no longer supported, but is available by request.   Added   Full support for multiple applications with separate scope for users and metrics.  Webmin \"Today\" view for global application usage metrics for the current day.",
            "title": "2.1.0 to 2.1.1"
        },
        {
            "location": "/server/updates/#203-to-210",
            "text": "Availability Notice  This version/update is no longer supported, but is available by request.   Added   Browser based web admin for informational data in regards to app usage, users, device metrics, minor administration, and more.  Browser based code editor for building server-side project APIs.  Client-side Users module for user registration, login tracking, and optional customizable email confirmations.  Client-side Analytics module to collect usage statistics and device metrics.  Server-side Email module for sending email via Mailgun.  Server-side Template module for resuable customized output.  CORS support for the Pages module.  MySQL EZ Query method  selectOne  added for simple single record retrieval.  MySQL EZ Query method  insertMany  added for optimized multi-record insertion.  Various date and time utility methods for the MySQL module.  Ability to adjust Corona network client-side timeout for large workloads.  Ability to adjust MySQL server-side timeout for large workloads.",
            "title": "2.0.3 to 2.1.0"
        },
        {
            "location": "/server/updates/#202-to-203",
            "text": "Availability Notice  This version/update is no longer supported, but is available by request.   Fixed   Temp cache body file now works properly for large payloads.  Pages  response  method returns a status properly when provided.   Added   Pages  status  convienence method added to quickly return a status code other than 200.  Server  coronium.body.conf  file which can be used to adjust the body cache for servers with large memory allocations.",
            "title": "2.0.2 to 2.0.3"
        },
        {
            "location": "/server/updates/#webmin-httpsssl",
            "text": "If your Coronium Core install was setup with HTTPS/SSL support, you will need to update the Webmin API host to work over HTTPS/SSL as well.   Important  If you've performed this step in a previous update, you  do not  need to do it again, unless you are having problems accessing your Webmin.   Log in as the  coronium  user, and from the command line, run the following, using your secure domain name:  sudo webmin-apihost https://<your.coronium.host>",
            "title": "Webmin HTTPS/SSL"
        },
        {
            "location": "/server/updates/#critical-update-notes",
            "text": "",
            "title": "Critical Update Notes"
        },
        {
            "location": "/server/updates/#260-update",
            "text": "Coronium Core version 2.6.0 introduces some major architectural changes to the underlying system to lay the groundwork for some current and future enhancements.  If at all possible it is reccomended to  run a fresh install  and import your data and projects. If this is not an option, be sure to carefully read the notes that follow so your update will go smoothly.  Live Apps  If you currently have live apps running on v2.5.0 you can still update your server, but you will be unable to use any of the new features until you redeploy your application with the new Coronium Core Plugin set to version 2 (see  core.init ). All of the following information needs to be understood as well before updating.  Users Data  Version 2.6.0 now supports  logins by email address .  This means that no two users in the same scope can have the same email address in the Users system .  If you currently have users in the same scope with the same email address, certain functionality like  users.sendPasswordReset , as well as, logging in by email address, will not work properly.  Other validation issues will also arise.   You will need to clean up Users that have this issue before updating . If you have questions on how to do this, visit the  support forum .  Scopes  With the addition of  Scope Permissions , scopes are being more fully intergrated into the Webmin system.   When you first update, you will need to visit the  Scopes  section in the Webmin and click the  Update Cache  button to import your current scopes. You will then be able to edit permissions on them, if needed.  More enhancements to scopes management are coming in future updates.  Plugin Version  Because the Corona plugin system does not support multiple plugin versions internally, you must now supply a  version  parameter to the client-side  core.init  method.   For server features included in v2.6.0 or better, you must set the plugin version number to  2 .  core . init ({ \n   version   =   2 , \n   server   =   \"https://<coronium-host-address>\" , \n   key   =   \"<coronium-server-key>\" , \n   scope   =   \"Space Race\"  })",
            "title": "2.6.0 Update"
        },
        {
            "location": "/server/updates/#270-update",
            "text": "Updater Notes  The underlying updating mechanism has changed. If you have edited core files (found in  /usr/local/coronium ) then you run the risk of losing whatever changes you may have made. Backup these files first if needed.  You should never change files in the core directory .  User ID Migration  Automatic Migration  The IDs used for the built-in Users system have been updated to current standards. This requires a migration of current IDs to the stronger versions.  The common way this works is that as a user logs in with the Users module -- and if an older ID version is detected -- it will  automatically  be migrated to the new ID type.  Manual Migration  If you want to manually update all the current user IDs to the new type all in one round, you will need to set up a server-side API script, and then call this endpoint from a local Coronium app.   Create a new server-side project called \"migration\".  In the  main.lua  project file add the following api function:   function   api . compat (   input   ) \n   local   compat   =   require ( \"coronium.compat\" ) \n   local   res ,   err   =   compat . ensureUserPasswords () \n   if   not   res   then \n     return   core . error ( err ) \n   end \n\n   return   res  end    Once this is set up, call the endpoint from a simple Corona project:   local   function   onResponse ( evt ) \n   core . debug ( evt )  end  core . api . compat ( onResponse )    If there are no major errors, you should receive the count of updated users.   All user IDs are updated, and more secure. Any future users will automatically start with the newer ID type, so there is little need to ever rerun the manual migration. Feel free to delete the \"migration\" project.  Global Guard  The addition of the global guard can have some side effects, mostly related to other external Lua modules -- such as LFS, etc. that still use some global values. You may see warnings regarding this, and at this time you will need to ignore them until LFS, and others, update thier respective modules.  Because a global could be crippling to your application, it has been mandated by the developers of the  ngx_lua  module that  global guard cannot be disabled  (though it is currently being debated).  Over the next few versions, Coronium Core is going to try and phase out any use of LFS. Unless they update it (not likely) first.",
            "title": "2.7.0 Update"
        },
        {
            "location": "/server/addons/",
            "text": "Various add-ons you can install on your server. Requires \nCoronium Core 2.4.1\n or higher.\n\n\nAll add-ons are unsupported beyond installation.\n\n\n PHP-FPM\n\n\nInstalls the PHP-FPM 7.x executable and some standard packages. \n\n\nInstallation\n\n\n\n\nRoot User Required\n\n\nYou must be logged in as \nroot\n on DigitalOcean or \nubuntu\n on Amazon EC2 to run the installer.\n\n\n\n\nPaste the following one-liner into your terminal to start the installation:\n\n\nwget https://s3.amazonaws.com/coronium-core-addons/php/php.sh && sudo bash php.sh\n\n\n\n\n\nUsage\n\n\nPlace \n.php\n files in the \n/home/coronium/php\n directory via SFTP as the \ncoronium\n user.\n\n\nPHP is only accessable internally via server-side API using the \ncore.run\n or \ncore.network.request\n methods.\n\n\nUsing \ncore.run\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\nphpinfo\n(\ninput\n)\n\n\n  \n--== Runs the PHP executable directly\n\n  \nlocal\n \nresp\n,\n \nerr\n \n=\n \ncore\n.\nrun\n(\n\"php /home/coronium/php/info.php\"\n)\n\n\n  \nif\n \nnot\n \nresp\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \nreturn\n \nresp\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nUsing \ncore.network.request\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\nphpinfo\n(\ninput\n)\n\n\n  \n--== Runs internal web server request\n\n  \nlocal\n \nresp\n,\n \nerr\n \n=\n \ncore\n.\nnetwork\n.\nrequest\n(\n\"http://127.0.0.1:80/info.php\"\n,\n \n{\n\n    \nmethod\n \n=\n \n\"GET\"\n\n  \n})\n\n\n  \nif\n \nnot\n \nresp\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \nreturn\n \nresp\n.\nbody\n\n\n\nend\n\n\n\nreturn\n \napi",
            "title": "Add-ons"
        },
        {
            "location": "/server/addons/#php-fpm",
            "text": "Installs the PHP-FPM 7.x executable and some standard packages.",
            "title": " PHP-FPM"
        },
        {
            "location": "/server/addons/#installation",
            "text": "Root User Required  You must be logged in as  root  on DigitalOcean or  ubuntu  on Amazon EC2 to run the installer.   Paste the following one-liner into your terminal to start the installation:  wget https://s3.amazonaws.com/coronium-core-addons/php/php.sh && sudo bash php.sh",
            "title": "Installation"
        },
        {
            "location": "/server/addons/#usage",
            "text": "Place  .php  files in the  /home/coronium/php  directory via SFTP as the  coronium  user.  PHP is only accessable internally via server-side API using the  core.run  or  core.network.request  methods.  Using  core.run  local   api   =   core . api ()  function   api . phpinfo ( input ) \n\n   --== Runs the PHP executable directly \n   local   resp ,   err   =   core . run ( \"php /home/coronium/php/info.php\" ) \n\n   if   not   resp   then \n     return   core . error ( err ) \n   end \n\n   return   resp  end  return   api   Using  core.network.request  local   api   =   core . api ()  function   api . phpinfo ( input ) \n\n   --== Runs internal web server request \n   local   resp ,   err   =   core . network . request ( \"http://127.0.0.1:80/info.php\" ,   { \n     method   =   \"GET\" \n   }) \n\n   if   not   resp   then \n     return   core . error ( err ) \n   end \n\n   return   resp . body  end  return   api",
            "title": "Usage"
        },
        {
            "location": "/extending/",
            "text": "Server Plugins\n\n\n\n\nRead Me\n\n\nWhat follows is an advanced subject. In almost all cases you should use the \nstandard project based API\n. A server plugin is useful if you need to access specific functionality within multiple api projects, create a plugin that is internal to your company, or share with the community.\n\n\n\n\nCustom built plugins can be used to extend the \nCoronium Core\n server. These plugins become available in the server-side \ncore\n namespace for use in server-side project API files.\n\n\nBecause of this, you must be careful in choosing the name of your plugin. If a name conflict exists, \nCoronium\n will always choose the internal module. \n\n\nCreating Plugins\n\n\nA custom plugin is simply a Lua module you place in a certain directory structure on your \nCoronium Core\n server.\n\n\nYour custom plugins live in the \n/home/coronium/plugins\n directory.\n\n\nMake sure to use the \ncoronium\n user when uploading your plugins via SFTP.\n\n\nExample Plugin\n\n\n\n\nCustom plugins have access to the \ncore\n namespace \nserver modules\n as well.\n\n\n\n\n--Basic plugin\n\n\nlocal\n \necho\n \n=\n \n{}\n\n\n\nfunction\n \necho\n.\nhello\n(\n \nname\n \n)\n\n  \nreturn\n \n\"Hello \"\n \n..\n \nname\n\n\nend\n\n\n\nreturn\n \necho\n\n\n\n\n\n\nNamespaces\n\n\nYour plugin should be placed in a unique directory to avoid conflicts with other developer plugins.\n\n\nExample\n\n\nplugins/\n  example/\n    echo.lua\n\n\n\n\n\nIn the example above the \necho\n plugin is placed inside the \nplugins/example\n directory.\n\n\nYou can use a developer nickname, company, etc. as the directory name. You can store multiple plugins you create in this folder for use; providing each plugin has a unique name.\n\n\nExample\n\n\nplugins/\n  develephant/\n    echo.lua\n    otherplugin.lua\n\n\n\n\n\nEnabling plugins\n\n\nTo enable a plugin, add an entry to the \n/home/coronium/plugins/plugins.lua\n file. Choose the \nkey\n the plugin will use, and then literally \nrequire\n it.\n\n\n\n\nWarning\n\n\nBe very careful when editing the \nplugins.lua\n file. If the syntax is incorrect the service will not be able to start correctly. Make sure to use the \ncoronium\n user when working with the \nplugins.lua\n via SFTP.\n\n\n\n\nExample\n\n\n--/home/coronium/plugins/plugins.lua\n\n\nlocal\n \nplugins\n \n=\n \n\n{\n\n  \n--enable the echo plugin implementation\n\n  \necho\n \n=\n \nrequire\n(\n\"develephant.echo\"\n)\n\n\n}\n\n\n\nreturn\n \nplugins\n\n\n\n\n\n\nRestart the \nCoronium\n service with \nsudo coronium restart\n.\n\n\nAccessing\n\n\nYour plugin is available in the \ncore\n server-side namespace as the key specified in the \nplugins.lua\n file for use in server-side project API files.\n\n\nServer API Example\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ntest\n(\n \ninput\n \n)\n\n  \n-- Using the custom `echo` plugin\n\n  \nlocal\n \nresp\n \n=\n \ncore\n.\necho\n.\nhello\n(\n \n\"Coronium\"\n \n)\n\n\n  \nreturn\n \nresp\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nThe response should be \"Hello Coronium\" when received by the client.",
            "title": "Extending"
        },
        {
            "location": "/extending/#server-plugins",
            "text": "Read Me  What follows is an advanced subject. In almost all cases you should use the  standard project based API . A server plugin is useful if you need to access specific functionality within multiple api projects, create a plugin that is internal to your company, or share with the community.   Custom built plugins can be used to extend the  Coronium Core  server. These plugins become available in the server-side  core  namespace for use in server-side project API files.  Because of this, you must be careful in choosing the name of your plugin. If a name conflict exists,  Coronium  will always choose the internal module.",
            "title": "Server Plugins"
        },
        {
            "location": "/extending/#creating-plugins",
            "text": "A custom plugin is simply a Lua module you place in a certain directory structure on your  Coronium Core  server.  Your custom plugins live in the  /home/coronium/plugins  directory.  Make sure to use the  coronium  user when uploading your plugins via SFTP.  Example Plugin   Custom plugins have access to the  core  namespace  server modules  as well.   --Basic plugin  local   echo   =   {}  function   echo . hello (   name   ) \n   return   \"Hello \"   ..   name  end  return   echo",
            "title": "Creating Plugins"
        },
        {
            "location": "/extending/#namespaces",
            "text": "Your plugin should be placed in a unique directory to avoid conflicts with other developer plugins.  Example  plugins/\n  example/\n    echo.lua  In the example above the  echo  plugin is placed inside the  plugins/example  directory.  You can use a developer nickname, company, etc. as the directory name. You can store multiple plugins you create in this folder for use; providing each plugin has a unique name.  Example  plugins/\n  develephant/\n    echo.lua\n    otherplugin.lua",
            "title": "Namespaces"
        },
        {
            "location": "/extending/#enabling-plugins",
            "text": "To enable a plugin, add an entry to the  /home/coronium/plugins/plugins.lua  file. Choose the  key  the plugin will use, and then literally  require  it.   Warning  Be very careful when editing the  plugins.lua  file. If the syntax is incorrect the service will not be able to start correctly. Make sure to use the  coronium  user when working with the  plugins.lua  via SFTP.   Example  --/home/coronium/plugins/plugins.lua  local   plugins   =   { \n   --enable the echo plugin implementation \n   echo   =   require ( \"develephant.echo\" )  }  return   plugins   Restart the  Coronium  service with  sudo coronium restart .",
            "title": "Enabling plugins"
        },
        {
            "location": "/extending/#accessing",
            "text": "Your plugin is available in the  core  server-side namespace as the key specified in the  plugins.lua  file for use in server-side project API files.  Server API Example  local   api   =   core . api ()  function   api . test (   input   ) \n   -- Using the custom `echo` plugin \n   local   resp   =   core . echo . hello (   \"Coronium\"   ) \n\n   return   resp  end  return   api   The response should be \"Hello Coronium\" when received by the client.",
            "title": "Accessing"
        },
        {
            "location": "/client/guide/",
            "text": "This guide outlines the client-side plugin setup and general usage.\n\n\nInstallation\n\n\nIf you don't already have it, get the \nCoronium Core Plugin\n from the \nCorona Marketplace\n.\n\n\nAdd the plugin\n\n\n\nAdd the plugin by adding an entry to the \nplugins\n table of \nbuild.settings\n file:\n\n\nsettings =\n{\n    plugins =\n    {\n        [\"plugin.coronium-core\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}\n\n\n\n\n\nRequire the plugin\n\n\n\nTo gain access to the plugins functionality, require it like so in your Lua file:\n\n\nlocal\n \ncore\n \n=\n \nrequire\n(\n\"plugin.coronium-core\"\n)\n\n\n\n\n\n\nYou're now ready to use the \nCoronium Core\n plugin.\n\n\nPlugin Overview\n\n\nThe Coronium Core client plugin provides an interface to your Coronium Core server. The client contains various data modules, a file transfer module, user management, and analytics module and the ability to call your own custom methods built with the server-side \nAPI\n module.\n\n\n\n\nCoronium Core Required\n\n\nYou will need a running \nCoronium Core\n server before being able to utilize the client plugin. You can install the server on \nDigitalOcean\n or \nAmazon EC2\n.\n\n\n\n\nBefore continuing, make sure you have read through the \nInstallation\n section.\n\n\nIn this example, we will use the \nmain.lua\n of a Corona project as a reference point, though you may require and use the client plugin in whichever file it is most useful.\n\n\nInitialization\n\n\nAfter you have required the Coronium Core plugin into your Corona project, you must initalize it using the \ncore.init\n method. You will provide the init method the following keys in a table.\n\n\nCore Init Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nThe Coronium Plugin revision. Set to \n2\n to support server features in v2.6.0 or better. Set to \n1\n for older versions.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\nserver\n\n\nThe Coronium Core server address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nkey\n\n\nThe Coronium Core \nserver key\n.\n\n\nString\n\n\nY\n\n\n\n\n\n\nscope\n\n\nA unique application name for your Corona project. See \nApplication Scope\n below.\n\n\nString\n\n\nY\n\n\n\n\n\n\napi\n\n\nThe server-side API Project name to run custom api methods against (see \nServer-side API\n).\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nApplication Scope\n\n\n\n\nScreencast Available\n\n\nLearn about application scopes in a screencast format by \nClicking here\n.\n\n\n\n\nEvery Corona project must provide a unique \"application scope\" to the Coronium Core initialization. This scope allows you to group users and metrics to each application so that you can visualize them individually via the \nWebmin\n, and for other purposes.\n\n\nIt is important to choose a short but descriptive application scope name that is unique from your other application scopes.\n \n\n\nProvide the application scope name to the \nscope\n parameter of the \ncore.init\n initialzation method.\n\n\nExample\n\n\nlocal\n \ncore\n \n=\n \nrequire\n(\n\"plugin.coronium-core\"\n)\n\n\n\ncore\n.\ninit\n({\n\n  \nversion\n \n=\n \n2\n,\n\n  \nserver\n \n=\n \n\"https://your.coronium.host\"\n,\n\n  \nkey\n \n=\n \n\"03624656-ca90-11e7-b8d4-fb59abeb4c03\"\n,\n\n  \nscope\n \n=\n \n\"Fun Run\"\n\n\n})\n\n\n\n\n\n\n\n\nDon't Change The Scope!\n\n\nOnce the scope is set, do not change it for that particular application. If you do, you will lose user and metric associations.\n\n\n\n\nEnabling Scopes\n\n\nYou must run at least one \nUser\n or \nAnalytics\n method for the scope to be available in the \nWebmin\n. If the scope is not visible in the Webmin, use the \nUpdate Cache\n option in the Webmin \nScopes\n section.\n\n\nScope Permissions\n\n\nAs an added layer of security, you can set permissions for client-side methods using Scope permissions. \n\n\nTo adjust permissions go to the \nScopes\n section of the \nWebmin\n and click on a scope name. Once you are on the scope detail page, there will be a \nScope Permissions\n section. \n\n\nPermissions are divided by module. Make sure to save permissions changes for each module section by clicking the \nSave\n button at the bottom of each section.\n\n\nCustom API Init\n\n\nTo utilize custom server-side api methods, first make sure you have a \nserver-side project\n set up. Provide the API Project name to the \napi\n parameter in the initialization. See the server-side \nAPI\n module for more information.\n\n\nExample\n\n\nlocal\n \ncore\n \n=\n \nrequire\n(\n\"plugin.coronium-core\"\n)\n\n\n\ncore\n.\ninit\n({\n\n  \nversion\n \n=\n \n2\n,\n\n  \nserver\n \n=\n \n\"https://your.coronium.host\"\n,\n\n  \nkey\n \n=\n \n\"03624656-ca90-11e7-b8d4-fb59abeb4c03\"\n,\n\n  \nscope\n \n=\n \n\"Fun Run\"\n,\n\n  \napi\n \n=\n \n\"funrun\"\n\n\n})\n\n\n\n\n\n\nResponse Events\n\n\nWhen calling a module or api method, you must supply a listener function to recieve the response event back from the server:\n\n\nBasic api listener\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n \n--contains error string, if any.\n\n  \nelse\n\n    \nlocal\n \nres\n \n=\n \nevt\n.\nresult\n \n--evt.result contains the server response\n\n  \nend\n\n\n  \nprint\n(\nevt\n.\ntt\n)\n \n--contains request round trip time\n\n\nend\n\n\n\n\n\n\nAll response events will contain either an \nerror\n key, or the successful response in the \nresult\n key.\n\n\nAll response events contain a \ntt\n key. See below for more details on this key.\n\n\n\n\nEvent Keys\n\n\nSome modules may have additional event keys. See each modules documentation for event responses.\n\n\n\n\nerror\n\n\nThe \nerror\n key will always be a string with the error message, or \nnil\n if no error is present. If there is an error, often there will also be a \nstatus\n key with a numeric code.\n\n\nresult\n\n\nThe \nresult\n key data depends on the module or api method. See each modules documentation to determine what the \nresult\n key might hold.\n\n\ntt\n\n\nThe \ntt\n key allows you to see the \"trip time\" for the request. This is the total round trip time in milliseconds from the start of the client network request, to the final client response. \n\n\n\n\nDebug Responses\n\n\nTo debug response events during development, use the \ncore.debug\n method (see below).\n\n\n\n\nDebug Responses\n\n\nSometimes it can be nice to see the full response (including errors) without have to write the full logic in the event listener.\n\n\nTo make this simpler, you can use the \ncore.debug\n method.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \ncore\n.\ndebug\n(\n \nevt\n \n)\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\n\n  \nusername\n \n=\n \n'Wordy'\n,\n\n  \npassword\n \n=\n \n'1234'\n\n\n},\n \napiResponse\n)\n\n\n\n\n\n\nThe following will be output to the \nCorona\n console:\n\n\nresult:\n  active: true\n  email: sleeptankxyz@gmail.com\n  group: foodies\n  scope: Space Race\n  user_id: c369637a-cb27-44ee-aeaf-ca263daa49d5\n  username: Wordy\n  validated: true\n  tt: 64.401\n\n\n\n\n\nAPI Methods\n\n\nDepending on the module you are addressing, use the following namespaces on the \ncore\n object.\n\n\n--Standard Client Side Module Methods\n\n\ncore\n.\n<\nmodule\n>\n.\n<\nmethod\n>\n([\ninput_params\n,]\n \nlistener\n)\n\n\n\n--Custom Server Side API Methods\n\n\ncore\n.\napi\n.\n<\nmethod\n>\n([\ninput_params\n,]\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ninput_params\n\n\nThe parameters to pass to the method.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nThe response listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\n\n\nSpecial Note\n\n\nIf a method does not require a \ninput_params\n table, you can either pass any empty table, or omit the parameter table all together, supplying just the listener.\n\n\n\n\nExamples\n\n\nClient side \ndata\n module\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n)\n \n--data object id\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\nsave\n({\n\n  \nsource\n \n=\n \n\"users\"\n,\n\n  \ndata\n \n=\n \n{\n\n    \nname\n \n=\n \n\"Tammy\"\n,\n\n    \nage\n \n=\n \n34\n,\n\n    \nactive\n \n=\n \ntrue\n\n  \n}\n\n\n},\n  \napiResponse\n)\n\n\n\n\n\n\nCustom server-side \napi\n method\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nname\n)\n \n-- Jimmy\n\n  \nend\n\n\nend\n\n\n\ncore\n.\napi\n.\necho\n({\nname\n=\n\"Jimmy\"\n},\n \napiResponse\n)\n\n\n\n\n\n\nSee each client-side module documentation for full usage instructions and examples.",
            "title": "Usage"
        },
        {
            "location": "/client/guide/#installation",
            "text": "If you don't already have it, get the  Coronium Core Plugin  from the  Corona Marketplace .",
            "title": "Installation"
        },
        {
            "location": "/client/guide/#plugin-overview",
            "text": "The Coronium Core client plugin provides an interface to your Coronium Core server. The client contains various data modules, a file transfer module, user management, and analytics module and the ability to call your own custom methods built with the server-side  API  module.   Coronium Core Required  You will need a running  Coronium Core  server before being able to utilize the client plugin. You can install the server on  DigitalOcean  or  Amazon EC2 .   Before continuing, make sure you have read through the  Installation  section.  In this example, we will use the  main.lua  of a Corona project as a reference point, though you may require and use the client plugin in whichever file it is most useful.",
            "title": "Plugin Overview"
        },
        {
            "location": "/client/guide/#initialization",
            "text": "After you have required the Coronium Core plugin into your Corona project, you must initalize it using the  core.init  method. You will provide the init method the following keys in a table.  Core Init Keys     Name  Description  Type  Required      version  The Coronium Plugin revision. Set to  2  to support server features in v2.6.0 or better. Set to  1  for older versions.  Number  Y    server  The Coronium Core server address.  String  Y    key  The Coronium Core  server key .  String  Y    scope  A unique application name for your Corona project. See  Application Scope  below.  String  Y    api  The server-side API Project name to run custom api methods against (see  Server-side API ).  String  N",
            "title": "Initialization"
        },
        {
            "location": "/client/guide/#application-scope",
            "text": "Screencast Available  Learn about application scopes in a screencast format by  Clicking here .   Every Corona project must provide a unique \"application scope\" to the Coronium Core initialization. This scope allows you to group users and metrics to each application so that you can visualize them individually via the  Webmin , and for other purposes.  It is important to choose a short but descriptive application scope name that is unique from your other application scopes.    Provide the application scope name to the  scope  parameter of the  core.init  initialzation method.  Example  local   core   =   require ( \"plugin.coronium-core\" )  core . init ({ \n   version   =   2 , \n   server   =   \"https://your.coronium.host\" , \n   key   =   \"03624656-ca90-11e7-b8d4-fb59abeb4c03\" , \n   scope   =   \"Fun Run\"  })    Don't Change The Scope!  Once the scope is set, do not change it for that particular application. If you do, you will lose user and metric associations.",
            "title": "Application Scope"
        },
        {
            "location": "/client/guide/#enabling-scopes",
            "text": "You must run at least one  User  or  Analytics  method for the scope to be available in the  Webmin . If the scope is not visible in the Webmin, use the  Update Cache  option in the Webmin  Scopes  section.",
            "title": "Enabling Scopes"
        },
        {
            "location": "/client/guide/#scope-permissions",
            "text": "As an added layer of security, you can set permissions for client-side methods using Scope permissions.   To adjust permissions go to the  Scopes  section of the  Webmin  and click on a scope name. Once you are on the scope detail page, there will be a  Scope Permissions  section.   Permissions are divided by module. Make sure to save permissions changes for each module section by clicking the  Save  button at the bottom of each section.",
            "title": "Scope Permissions"
        },
        {
            "location": "/client/guide/#custom-api-init",
            "text": "To utilize custom server-side api methods, first make sure you have a  server-side project  set up. Provide the API Project name to the  api  parameter in the initialization. See the server-side  API  module for more information.  Example  local   core   =   require ( \"plugin.coronium-core\" )  core . init ({ \n   version   =   2 , \n   server   =   \"https://your.coronium.host\" , \n   key   =   \"03624656-ca90-11e7-b8d4-fb59abeb4c03\" , \n   scope   =   \"Fun Run\" , \n   api   =   \"funrun\"  })",
            "title": "Custom API Init"
        },
        {
            "location": "/client/guide/#response-events",
            "text": "When calling a module or api method, you must supply a listener function to recieve the response event back from the server:  Basic api listener  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error )   --contains error string, if any. \n   else \n     local   res   =   evt . result   --evt.result contains the server response \n   end \n\n   print ( evt . tt )   --contains request round trip time  end   All response events will contain either an  error  key, or the successful response in the  result  key.  All response events contain a  tt  key. See below for more details on this key.   Event Keys  Some modules may have additional event keys. See each modules documentation for event responses.",
            "title": "Response Events"
        },
        {
            "location": "/client/guide/#error",
            "text": "The  error  key will always be a string with the error message, or  nil  if no error is present. If there is an error, often there will also be a  status  key with a numeric code.",
            "title": "error"
        },
        {
            "location": "/client/guide/#result",
            "text": "The  result  key data depends on the module or api method. See each modules documentation to determine what the  result  key might hold.",
            "title": "result"
        },
        {
            "location": "/client/guide/#tt",
            "text": "The  tt  key allows you to see the \"trip time\" for the request. This is the total round trip time in milliseconds from the start of the client network request, to the final client response.    Debug Responses  To debug response events during development, use the  core.debug  method (see below).",
            "title": "tt"
        },
        {
            "location": "/client/guide/#debug-responses",
            "text": "Sometimes it can be nice to see the full response (including errors) without have to write the full logic in the event listener.  To make this simpler, you can use the  core.debug  method.  Example  local   function   apiResponse (   evt   ) \n   core . debug (   evt   )  end  core . users . login ({ \n   username   =   'Wordy' , \n   password   =   '1234'  },   apiResponse )   The following will be output to the  Corona  console:  result:\n  active: true\n  email: sleeptankxyz@gmail.com\n  group: foodies\n  scope: Space Race\n  user_id: c369637a-cb27-44ee-aeaf-ca263daa49d5\n  username: Wordy\n  validated: true\n  tt: 64.401",
            "title": "Debug Responses"
        },
        {
            "location": "/client/guide/#api-methods",
            "text": "Depending on the module you are addressing, use the following namespaces on the  core  object.  --Standard Client Side Module Methods  core . < module > . < method > ([ input_params ,]   listener )  --Custom Server Side API Methods  core . api . < method > ([ input_params ,]   listener )   Parameters     Name  Description  Type  Required      input_params  The parameters to pass to the method.  Table  N    listener  The response listener callback function.  Function  Y      Special Note  If a method does not require a  input_params  table, you can either pass any empty table, or omit the parameter table all together, supplying just the listener.   Examples  Client side  data  module  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result )   --data object id \n   end  end  core . data . save ({ \n   source   =   \"users\" , \n   data   =   { \n     name   =   \"Tammy\" , \n     age   =   34 , \n     active   =   true \n   }  },    apiResponse )   Custom server-side  api  method  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . name )   -- Jimmy \n   end  end  core . api . echo ({ name = \"Jimmy\" },   apiResponse )   See each client-side module documentation for full usage instructions and examples.",
            "title": "API Methods"
        },
        {
            "location": "/client/modules/analytics/",
            "text": "Collects various application and device metrics. Analytics are stored within application scopes. Please see \nApplication Scope\n in the \nClient Guide\n for more information.\n\n\n\n\nScreencast Available\n\n\nLearn about collecting metrics in a screencast format by \nClicking here\n.\n\n\n\n\nWhen using the \nappOpened\n method (see below), a number of pieces of information are collected about the environment in which the application is running in. It also tracks each time the application is accessed per device and application scope.\n\n\nappOpened\n\n\nLogs an \"opened\" event and auto-populates application meta data.\n\n\ncore\n.\nanalytics\n.\nappOpened\n([\nlistener\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nlistener\n\n\nAn optional listener callback function.\n\n\nFunction\n\n\nN\n\n\n\n\n\n\n\n\nCollected Meta Data\n\n\nThe \nappOpened\n method automatically collects the following meta data and stores it in the \nanalytics\n database.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe application name as reported by Corona\n\n\nFunRun\n\n\n\n\n\n\ncountry_code\n\n\nThe originating country code, if any.\n\n\nUS\n\n\n\n\n\n\nmodel\n\n\nThe device model the application is running on.\n\n\niPhone\n\n\n\n\n\n\nplatform\n\n\nThe platform the application is running on.\n\n\nios\n\n\n\n\n\n\nplatform_ver\n\n\nThe platform version the application is running on.\n\n\n10.12.6\n\n\n\n\n\n\nversion\n\n\nThe application version string as reported by Corona.\n\n\ncom.app.funrun\n\n\n\n\n\n\nmanufacturer\n\n\nThe device manufacturer the application is running on.\n\n\nApple\n\n\n\n\n\n\nscreen_h\n\n\nThe screen pixel height as reported by Corona.\n\n\n480\n\n\n\n\n\n\nscreen_w\n\n\nThe screen pixel width as reported by Corona.\n\n\n320\n\n\n\n\n\n\ncorona_build\n\n\nThe Corona build the application is running on.\n\n\n2017.3126\n\n\n\n\n\n\nadded\n\n\nThe timestamp of when the application was opened in UTC format.\n\n\n2017-01-01 12:00:00\n\n\n\n\n\n\n\n\nViewing Analytics\n\n\nYou can view both the access and device statistics in the \nWebmin\n.",
            "title": "Analytics"
        },
        {
            "location": "/client/modules/analytics/#appopened",
            "text": "Logs an \"opened\" event and auto-populates application meta data.  core . analytics . appOpened ([ listener ])   Parameters     Name  Description  Type  Required      listener  An optional listener callback function.  Function  N     Collected Meta Data  The  appOpened  method automatically collects the following meta data and stores it in the  analytics  database.     Name  Description  Example      name  The application name as reported by Corona  FunRun    country_code  The originating country code, if any.  US    model  The device model the application is running on.  iPhone    platform  The platform the application is running on.  ios    platform_ver  The platform version the application is running on.  10.12.6    version  The application version string as reported by Corona.  com.app.funrun    manufacturer  The device manufacturer the application is running on.  Apple    screen_h  The screen pixel height as reported by Corona.  480    screen_w  The screen pixel width as reported by Corona.  320    corona_build  The Corona build the application is running on.  2017.3126    added  The timestamp of when the application was opened in UTC format.  2017-01-01 12:00:00",
            "title": "appOpened"
        },
        {
            "location": "/client/modules/analytics/#viewing-analytics",
            "text": "You can view both the access and device statistics in the  Webmin .",
            "title": "Viewing Analytics"
        },
        {
            "location": "/client/modules/api/",
            "text": "Provides access to your server-side project api methods. To learn how to create server-side api methods, see the server-side \nAPI\n module.\n\n\n\n\nScreencast Available\n\n\nLearn how to use the Client API in a screencast format by \nClicking here\n.\n\n\n\n\nUse the \ncore.init\n method to set the server-side project to call the methods against.\n\n\napi\n\n\ncore\n.\napi\n.\n<\nmethod\n-\nname\n>\n([\ninput_params\n,]\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ninput_params\n\n\nParameters to pass to the api method.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nThe response listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\n\n\nSpecial Note\n\n\nIf a method does not require a \ninput_params\n table, you can either pass any empty table, or omit the parameter table all together, supplying just the listener.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain any values that are passed back from the server-side api method.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nmessage\n)\n \n-- Hello\n\n  \nend\n\n\nend\n\n\n\n-- Assuming you have an \"test\" server-side method\n\n\ncore\n.\napi\n.\ntest\n({\nmessage\n=\n\"Hello\"\n},\n \napiListener\n)\n\n\n\n\n\n\nNetwork Timeout\n\n\nThough rare, very large workloads may cause the Corona client to throw a network timeout error before you receive a reponse from the server. In these cases you can add a \ntimeout\n parameter to the \ninput_params\n table.\n\n\nThe Corona default network timeout is 30 seconds. \nThis is an optional parameter\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \n...\n\n\nend\n\n\n\ncore\n.\napi\n.\ntest\n({\nmessage\n=\n\"Hello\"\n,\n \ntimeout\n=\n60\n},\n \napiListener\n)",
            "title": "API"
        },
        {
            "location": "/client/modules/api/#api",
            "text": "core . api . < method - name > ([ input_params ,]   listener )   Parameters     Name  Description  Type  Required      input_params  Parameters to pass to the api method.  Table  N    listener  The response listener callback function.  Function  Y      Special Note  If a method does not require a  input_params  table, you can either pass any empty table, or omit the parameter table all together, supplying just the listener.   Event Response  On success, the  result  will contain any values that are passed back from the server-side api method.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . message )   -- Hello \n   end  end  -- Assuming you have an \"test\" server-side method  core . api . test ({ message = \"Hello\" },   apiListener )",
            "title": "api"
        },
        {
            "location": "/client/modules/api/#network-timeout",
            "text": "Though rare, very large workloads may cause the Corona client to throw a network timeout error before you receive a reponse from the server. In these cases you can add a  timeout  parameter to the  input_params  table.  The Corona default network timeout is 30 seconds.  This is an optional parameter .",
            "title": "Network Timeout"
        },
        {
            "location": "/client/modules/api/#example",
            "text": "local   function   apiListener (   evt   ) \n   ...  end  core . api . test ({ message = \"Hello\" ,   timeout = 60 },   apiListener )",
            "title": "Example"
        },
        {
            "location": "/client/modules/core/",
            "text": "Provides methods to configure the client-side plugin.\n\n\ninit\n\n\nInitialize the client.\n\n\ncore\n.\ninit\n(\n \nconfig_tbl\n \n)\n\n\n\n\n\n\nConfig Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nThe Coronium Plugin revision. Set to \n2\n to support server features in v2.6.0 or better. Set to \n1\n for older versions.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\nserver\n\n\nThe Coronium Core server address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nkey\n\n\nThe Coronium Core \nserver key\n.\n\n\nString\n\n\nY\n\n\n\n\n\n\nscope\n\n\nA unique application name for your Corona project. See \nApplication Scope\n in the client guide.\n\n\nString\n\n\nY\n\n\n\n\n\n\napi\n\n\nThe server-side API Project name to run api methods against (see \nServer-side API\n).\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nCoronium Core 2.6.0 or better\n\n\ncore\n.\ninit\n({\n\n  \nversion\n \n=\n \n2\n,\n\n  \nserver\n \n=\n \n\"https://<coronium-host-address>\"\n,\n\n  \nkey\n \n=\n \n\"<coronium-server-key>\"\n,\n\n  \nscope\n \n=\n \n\"Space Race\"\n\n\n})\n\n\n\n\n\n\nCoronium Core 2.5.0 or earlier\n\n\ncore\n.\ninit\n({\n\n  \nversion\n \n=\n \n1\n,\n\n  \nserver\n \n=\n \n\"https://<coronium-host-address>\"\n,\n\n  \nkey\n \n=\n \n\"<coronium-server-key>\"\n,\n\n  \nscope\n \n=\n \n\"Space Race\"\n\n\n})\n\n\n\n\n\n\n\n\nInitialization\n\n\nFor detailed initialization instructions, see the \nInitialization\n section of the \nClient Guide\n.\n\n\n\n\nuseProject\n\n\nChange the server-side project to run api methods against.\n\n\ncore\n.\nuseProject\n(\n \nproject\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nproject\n\n\nThe project name to run api methods against.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\ncore\n.\nuseProject\n(\n\"default\"\n)\n\n\n\n\n\n\ndebug\n\n\nPretty print the response event to the console. Useful for debugging.\n\n\ncore\n.\ndebug\n(\nresponse_event\n)\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \ncore\n.\ndebug\n(\n \nevt\n \n)\n\n\n  \n...\n\n\nend",
            "title": "Core"
        },
        {
            "location": "/client/modules/core/#init",
            "text": "Initialize the client.  core . init (   config_tbl   )   Config Table Keys     Name  Description  Type  Required      version  The Coronium Plugin revision. Set to  2  to support server features in v2.6.0 or better. Set to  1  for older versions.  Number  Y    server  The Coronium Core server address.  String  Y    key  The Coronium Core  server key .  String  Y    scope  A unique application name for your Corona project. See  Application Scope  in the client guide.  String  Y    api  The server-side API Project name to run api methods against (see  Server-side API ).  String  N     Example  Coronium Core 2.6.0 or better  core . init ({ \n   version   =   2 , \n   server   =   \"https://<coronium-host-address>\" , \n   key   =   \"<coronium-server-key>\" , \n   scope   =   \"Space Race\"  })   Coronium Core 2.5.0 or earlier  core . init ({ \n   version   =   1 , \n   server   =   \"https://<coronium-host-address>\" , \n   key   =   \"<coronium-server-key>\" , \n   scope   =   \"Space Race\"  })    Initialization  For detailed initialization instructions, see the  Initialization  section of the  Client Guide .",
            "title": "init"
        },
        {
            "location": "/client/modules/core/#useproject",
            "text": "Change the server-side project to run api methods against.  core . useProject (   project   )   Parameters     Name  Description  Type  Required      project  The project name to run api methods against.  String  Y     Example  core . useProject ( \"default\" )",
            "title": "useProject"
        },
        {
            "location": "/client/modules/core/#debug",
            "text": "Pretty print the response event to the console. Useful for debugging.  core . debug ( response_event )   Example  local   function   apiResponse (   evt   ) \n   core . debug (   evt   ) \n\n   ...  end",
            "title": "debug"
        },
        {
            "location": "/client/modules/data/",
            "text": "Provides a client-side api to the server-side \nData\n module. The \ndata\n module is a simple interface to the Mongo database. For more complex data handling, you must provide an \napi\n on the server-side.\n\n\nget\n\n\nGet a data object from the Mongo database.\n\n\ncore\n.\ndata\n.\nget\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nThe data source to run against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nquery\n\n\nA query table or string id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\ndb\n\n\nA specific database. Default: \"_app\".\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the data object as a \ntable\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \ncore\n.\ndebug\n(\nevt\n.\nresult\n)\n \n-- result holds the data object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\nget\n({\nsource\n=\n\"users\"\n,\n \nquery\n=\n\"id1234\"\n},\n \napiListener\n)\n\n\n\n\n\n\n\n\nMultiple Objects\n\n\nTo retrieve multiple data objects, see the \ngetPage\n method.\n\n\n\n\nsave\n\n\nCreate a new, or update an existing, data object and save it in the Mongo database.\n\n\ncore\n.\ndata\n.\nsave\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nThe data source to run against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndata\n\n\nA data object to save.\n\n\nTable\n\n\nY\n\n\n\n\n\n\ndb\n\n\nA specific database. Default: \"_app\".\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain the \nid\n of the newly created object as a \nstring\n.\n\n\nExample\n\n\nSaving a new data object\n\n\n\n\nWarning\n\n\nDo not add an \n_id\n key to the object, it will be generated automatically on the server-side.\n\n\n\n\nlocal\n \ndataObj\n \n=\n \n{\n\n  \nname\n \n=\n \n\"Sally\"\n,\n\n  \nage\n \n=\n \n32\n,\n\n  \nactive\n \n=\n \ntrue\n,\n\n  \ncolors\n \n=\n \n{\n\"blue\"\n,\n \n\"gold\"\n}\n\n\n}\n\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n)\n \n--the object id\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\nsave\n({\nsource\n=\n\"users\"\n,\n \ndata\n=\ndataObj\n},\n \napiListener\n)\n\n\n\n\n\n\nUpdating an existing object\n\n\n\n\nInfo\n\n\nTo update an existing object, first retrieve it using \ncore.data.get\n.\n\n\n\n\nlocal\n \nobj\n \n=\n \n--an object from core.data.get\n\n\n\nobj\n.\nscore\n \n=\n \n200\n \n--add or update key value\n\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \n--listener code (see above)\n\n\nend\n\n\n\ncore\n.\ndata\n.\nsave\n({\nsource\n=\n\"users\"\n,\n \ndata\n=\nobj\n},\n \napiListener\n)\n\n\n\n\n\n\n\n\nWarning\n\n\nDo not change the \n_id\n key in the object you wish to update.\n\n\n\n\ndelete\n\n\nDelete a data object from the Mongo database.\n\n\ncore\n.\ndata\n.\ndelete\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nThe data source to run against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nid\n\n\nThe data object id string.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndb\n\n\nA specific database. Default: \"_app\".\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\n\n\nObject IDs\n\n\nYou can get an object id from any data object. See the \ncore.data.get\n example above.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will be \ntrue\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"deleted\"\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\ndelete\n({\nsource\n=\n\"users\"\n,\n \nid\n=\n\"id1234\"\n},\n \napiListener\n)\n\n\n\n\n\n\n\n\nSpecial Note\n\n\nWhile passing an id string is the most consistent way to delete an object, you can also pass the entire object to the \nid\n key. Example: \n{source = \"users\", id = obj}\n. The object must contain a valid \n_id\n field for this to work.\n\n\n\n\nPagination\n\n\ngetPage\n\n\nGet multiple data objects from the Mongo database based on a specific criteria.\n\n\ncore\n.\ndata\n.\ngetPage\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nThe data source to run against.\n\n\nnone\n\n\nString\n\n\nY\n\n\n\n\n\n\npage\n\n\nThe page number to return.\n\n\nnone\n\n\nNumber\n\n\nY\n\n\n\n\n\n\nperPage\n\n\nThe number of objects per page.\n\n\n20\n\n\nNumber\n\n\nN\n\n\n\n\n\n\nsort\n\n\nSort constant or sorting table.\n\n\ncore.ASC\n\n\nConst\n or \nTable\n\n\nN\n\n\n\n\n\n\nquery\n\n\nSpecialized query table.\n\n\n{ } (all records)\n\n\nTable\n\n\nN\n\n\n\n\n\n\ndb\n\n\nSpecify a different database.\n\n\n\"_app\"\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nSort Constants\n\n\n\n\n\n\n\n\nEnum\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncore.ASC\n\n\nSort in an ascending order.\n\n\n\n\n\n\ncore.DESC\n\n\nSort in a descending order.\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold a \ntable\n array of data objects.\n\n\nExample\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nsource\n \n=\n \n\"users\"\n,\n\n  \npage\n \n=\n \n1\n,\n\n  \nperPage\n \n=\n \n10\n\n\n}\n\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \n--evt.result holds array of objects\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nprint\n(\nevt\n.\nresult\n[\ni\n].\n_id\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\ngetPage\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\nNetwork Timeout\n\n\nThough rare, very large workloads may cause the Corona client to throw a network timeout error before you receive a reponse from the server. In these cases you can add a \ntimeout\n parameter to the \ndata_params\n table.\n\n\nThe Corona default network timeout is 30 seconds. \nThis is an optional parameter\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \n...\n\n\nend\n\n\n\ncore\n.\ndata\n.\nget\n({\nsource\n=\n\"users\"\n,\n \nquery\n=\n\"id1234\"\n,\n \ntimeout\n=\n60\n},\n \napiListener\n)",
            "title": "Data"
        },
        {
            "location": "/client/modules/data/#get",
            "text": "Get a data object from the Mongo database.  core . data . get ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      source  The data source to run against.  String  Y    query  A query table or string id.  Table  or  String  Y    db  A specific database. Default: \"_app\".  String  N     Event Response  On success, the  result  will hold the data object as a  table .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     core . debug ( evt . result )   -- result holds the data object \n   end  end  core . data . get ({ source = \"users\" ,   query = \"id1234\" },   apiListener )    Multiple Objects  To retrieve multiple data objects, see the  getPage  method.",
            "title": "get"
        },
        {
            "location": "/client/modules/data/#save",
            "text": "Create a new, or update an existing, data object and save it in the Mongo database.  core . data . save ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      source  The data source to run against.  String  Y    data  A data object to save.  Table  Y    db  A specific database. Default: \"_app\".  String  N     Event Response  On success, the  result  will contain the  id  of the newly created object as a  string .  Example  Saving a new data object   Warning  Do not add an  _id  key to the object, it will be generated automatically on the server-side.   local   dataObj   =   { \n   name   =   \"Sally\" , \n   age   =   32 , \n   active   =   true , \n   colors   =   { \"blue\" ,   \"gold\" }  }  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result )   --the object id \n   end  end  core . data . save ({ source = \"users\" ,   data = dataObj },   apiListener )   Updating an existing object   Info  To update an existing object, first retrieve it using  core.data.get .   local   obj   =   --an object from core.data.get  obj . score   =   200   --add or update key value  local   function   apiListener (   evt   ) \n   --listener code (see above)  end  core . data . save ({ source = \"users\" ,   data = obj },   apiListener )    Warning  Do not change the  _id  key in the object you wish to update.",
            "title": "save"
        },
        {
            "location": "/client/modules/data/#delete",
            "text": "Delete a data object from the Mongo database.  core . data . delete ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      source  The data source to run against.  String  Y    id  The data object id string.  String  Y    db  A specific database. Default: \"_app\".  String  N      Object IDs  You can get an object id from any data object. See the  core.data.get  example above.   Event Response  On success, the  result  will be  true .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"deleted\" ) \n   end  end  core . data . delete ({ source = \"users\" ,   id = \"id1234\" },   apiListener )    Special Note  While passing an id string is the most consistent way to delete an object, you can also pass the entire object to the  id  key. Example:  {source = \"users\", id = obj} . The object must contain a valid  _id  field for this to work.",
            "title": "delete"
        },
        {
            "location": "/client/modules/data/#pagination",
            "text": "",
            "title": "Pagination"
        },
        {
            "location": "/client/modules/data/#getpage",
            "text": "Get multiple data objects from the Mongo database based on a specific criteria.  core . data . getPage ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Default  Type  Required      source  The data source to run against.  none  String  Y    page  The page number to return.  none  Number  Y    perPage  The number of objects per page.  20  Number  N    sort  Sort constant or sorting table.  core.ASC  Const  or  Table  N    query  Specialized query table.  { } (all records)  Table  N    db  Specify a different database.  \"_app\"  String  N     Sort Constants     Enum  Description      core.ASC  Sort in an ascending order.    core.DESC  Sort in a descending order.     Event Response  On success, the  result  will hold a  table  array of data objects.  Example  local   params   =   { \n   source   =   \"users\" , \n   page   =   1 , \n   perPage   =   10  }  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     --evt.result holds array of objects \n     for   i = 1 ,   # evt . result   do \n       print ( evt . result [ i ]. _id ) \n     end \n   end  end  core . data . getPage ( params ,   apiListener )",
            "title": "getPage"
        },
        {
            "location": "/client/modules/data/#network-timeout",
            "text": "Though rare, very large workloads may cause the Corona client to throw a network timeout error before you receive a reponse from the server. In these cases you can add a  timeout  parameter to the  data_params  table.  The Corona default network timeout is 30 seconds.  This is an optional parameter .",
            "title": "Network Timeout"
        },
        {
            "location": "/client/modules/data/#example",
            "text": "local   function   apiListener (   evt   ) \n   ...  end  core . data . get ({ source = \"users\" ,   query = \"id1234\" ,   timeout = 60 },   apiListener )",
            "title": "Example"
        },
        {
            "location": "/client/modules/email/",
            "text": "Send email messages using the \nMailgun\n messaging service.\n\n\nAt this time email can only be sent using the server-side \nEmail\n module.\n\n\nTo initiate an email from the client-side you must add a server-side API method using the \nAPI\n module.",
            "title": "Email"
        },
        {
            "location": "/client/modules/files/",
            "text": "This module allows you to transfer files to and from your \nCoronium Core\n server. Files are stored on the server in the \n/home/coronium/files\n directory.\n\n\nSee also the special note about the \nfiles/public\n directory.\n\n\n\n\nUsing S3\n\n\nIf you'd like to transfer files using \nAmazon S3\n take a look at the \nS3 Lite\n plugin for Corona.\n\n\n\n\nupload\n\n\nUpload a file to the server.\n\n\ncore\n.\nfiles\n.\nupload\n(\nsrcFilePath\n,\n \nbaseDir\n,\n \ndestFilePath\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcFilePath\n\n\nLocal source file path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbaseDir\n\n\nA Corona directory constant.\n\n\nConst\n\n\nY\n\n\n\n\n\n\ndestFilePath\n\n\nRemote destination path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe upload listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nSee \nUpload Options\n below.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nUpload Options\n\n\nThe upload options table supports the following \noptional\n keys:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsafe\n\n\nDo not overwrite existing files.\n\n\nBoolean\n\n\nfalse\n\n\n\n\n\n\nunique\n\n\nGenerate a unique file name for the file.\n\n\nBoolean\n\n\nfalse\n\n\n\n\n\n\ntimeout\n\n\nAdjust the Corona client network timeout.\n\n\nNumber\n\n\n30 Secs\n\n\n\n\n\n\n\n\nEvent Response\n\n\nWhile uploading, a \nprogress\n key will be available.\n\n\nWhen the upload is complete, the \nresult\n will contain the following keys:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe server-side directory path to the file.\n\n\nString\n\n\n\n\n\n\nfile\n\n\nThe server-side file name with extension.\n\n\nString\n\n\n\n\n\n\n\n\nUpload Listener\n\n\nlocal\n \nfunction\n \nuploadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\n \nevt\n.\nerror\n \n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n \nevt\n.\nprogress\n \n)\n\n    \nelse\n\n      \nprint\n(\n\"file upload complete\"\n)\n\n      \nprint\n(\n\"filePath: \"\n,\n \nevt\n.\nresult\n.\npath\n)\n\n      \nprint\n(\n\"fileName: \"\n,\n \nevt\n.\nresult\n.\nfile\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nExample\n\n\ncore\n.\nfiles\n.\nupload\n(\n \n  \n\"image.png\"\n,\n \n  \nsystem\n.\nDocumentsDirectory\n,\n \n  \n\"imgs/image001.png\"\n,\n \n  \nuploadListener\n)\n\n\n\n\n\n\nUpload Progress\n\n\nBy default the listener event returns a \nprogress\n key with the current upload progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.\n\n\nIf you don't care about the progress, you can write the listener function like so:\n\n\nlocal\n \nfunction\n \nuploadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nnot\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n\"file upload complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\ndownload\n\n\nDownload files from the server.\n\n\ncore\n.\nfiles\n.\ndownload\n(\nsrcFilePath\n,\n \ndestFilePath\n,\n \nbaseDir\n,\n \nlistener\n[,\n \ntransform\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcFilePath\n\n\nRemote source file path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndestFilePath\n\n\nLocal destination path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbaseDir\n\n\nA Corona system directory constant.\n\n\nConst\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe download listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\ntransform\n\n\nSee \nImage Transforms\n below.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nEvent Response\n\n\nWhile downloading, a \nprogress\n key will be available.\n\n\nWhen the download is complete, the file will be available in the directory set in the \nbaseDir\n parameter.\n\n\nDownload Listener\n\n\nlocal\n \nfunction\n \ndownloadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\n \nevt\n.\nerror\n \n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n \nevt\n.\nprogress\n \n)\n\n    \nelse\n\n      \nprint\n(\n\"file download complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nExample\n\n\ncore\n.\nfiles\n.\ndownload\n(\n\n  \n\"imgs/image001.png\"\n,\n\n  \n\"image.png\"\n,\n\n  \nsystem\n.\nDocumentsDirectory\n,\n\n  \ndownloadListener\n)\n\n\n\n\n\n\nDownload Progress\n\n\nBy default the listener event returns a \nprogress\n key with the current download progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.\n\n\nIf you don't care about the progress, you can write the listener function like so:\n\n\nlocal\n \nfunction\n \ndownloadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nnot\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n\"file download complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nImage Transforms\n\n\nImage transformations are proportional. For example, when setting the \nwidth\n key, the image will be resized to the width provided, and the height will be resized \nin proportion\n to the width. The same holds true when setting the \nheight\n key; the width will be resized in proportion to the height.\n\n\nWhen setting both the \nwidth\n and \nheight\n keys together, the image is resized to fit proportionally \nwithin\n the key values provided. This can be useful for display lists.\n\n\nThe \nsharpen\n key runs a \"sharpness\" filter on the final transformed image. If this key is not provided, no sharpening takes place.\n\n\n\n\nFile Types\n\n\nTransforms only work with \nPNG\n, \nJPG\n, and \nGIF\n file types.\n\n\n\n\nTransform Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nwidth\n\n\nProportionally resize image based on width.\n\n\nNumber\n\n\nnil\n\n\n\n\n\n\nheight\n\n\nProportionally resize image based on height.\n\n\nNumber\n\n\nnil\n\n\n\n\n\n\nsharpen\n\n\nIncreases sharpness of the final image (0-255).\n\n\nNumber\n\n\n0\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ntransform\n \n=\n \n{\n\n  \nwidth\n \n=\n \n100\n,\n\n  \nheight\n \n=\n \n100\n,\n\n  \nsharpen\n \n=\n \n50\n\n\n}\n\n\n\ncore\n.\nfiles\n.\ndownload\n(\n\n  \n\"imgs/image001.png\"\n,\n\n  \n\"image.png\"\n,\n\n  \nsystem\n.\nDocumentsDirectory\n,\n\n  \ndownloadListener\n,\n\n  \ntransform\n)\n\n\n\n\n\n\nlist\n\n\nList the files in the specified directory path.\n\n\ncore\n.\nfiles\n.\nlist\n(\ndirpath\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndirpath\n\n\nThe directory on the server to list.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n key will contain a \ntable\n array with the items found in the directory, if any.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonList\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nprint\n(\nevt\n.\nresult\n[\ni\n])\n \n--file name\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nfiles\n.\nlist\n(\n\"imgs\"\n,\n \nonList\n)\n\n\n\n\n\n\n\n\nSpecial Note\n\n\nThis method will only list the \nfiles\n in the directory, not any directories. If no files are present, it will return an empty table.\n\n\n\n\nremove\n\n\nDelete a file from the server. \nOnce deleted the file is not recoverable.\n\n\ncore\n.\nfiles\n.\nremove\n(\nsrcFilePath\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcFilePath\n\n\nRemote source file path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n key will be \ntrue\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \ndeleteListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"Deleted\"\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nfiles\n.\nremove\n(\n\"imgs/image001.png\"\n,\n \ndeleteListener\n)\n\n\n\n\n\n\nAndroid file restrictions\n\n\nWhen working with Android, make sure you understand the file restrictions. You can find more information in the Corona documentation by \nclicking here\n.\n\n\nIn the documentaion, there is a reference to a \ncopyFile\n method. As a convenience, this method is available in the Coronium Core plugin and can be accessed like so:\n\n\ncore\n.\nutils\n.\ncopyFile\n(\nsrcName\n,\n \nsrcPath\n,\n \ndstName\n,\n \ndstPath\n,\n \noverwrite\n)",
            "title": "Files"
        },
        {
            "location": "/client/modules/files/#upload",
            "text": "Upload a file to the server.  core . files . upload ( srcFilePath ,   baseDir ,   destFilePath ,   listener )   Parameters     Name  Description  Type  Required      srcFilePath  Local source file path with extension.  String  Y    baseDir  A Corona directory constant.  Const  Y    destFilePath  Remote destination path with extension.  String  Y    listener  The upload listener callback function.  Function  Y    options  See  Upload Options  below.  Table  N     Upload Options  The upload options table supports the following  optional  keys:     Name  Description  Type  Default      safe  Do not overwrite existing files.  Boolean  false    unique  Generate a unique file name for the file.  Boolean  false    timeout  Adjust the Corona client network timeout.  Number  30 Secs     Event Response  While uploading, a  progress  key will be available.  When the upload is complete, the  result  will contain the following keys:     Name  Description  Type      path  The server-side directory path to the file.  String    file  The server-side file name with extension.  String     Upload Listener  local   function   uploadListener (   evt   ) \n   if   evt . error   then \n     print (   evt . error   ) \n   else \n     if   evt . progress   then \n       print (   evt . progress   ) \n     else \n       print ( \"file upload complete\" ) \n       print ( \"filePath: \" ,   evt . result . path ) \n       print ( \"fileName: \" ,   evt . result . file ) \n     end \n   end  end   Example  core . files . upload (  \n   \"image.png\" ,  \n   system . DocumentsDirectory ,  \n   \"imgs/image001.png\" ,  \n   uploadListener )   Upload Progress  By default the listener event returns a  progress  key with the current upload progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.  If you don't care about the progress, you can write the listener function like so:  local   function   uploadListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     if   not   evt . progress   then \n       print ( \"file upload complete\" ) \n     end \n   end  end",
            "title": "upload"
        },
        {
            "location": "/client/modules/files/#download",
            "text": "Download files from the server.  core . files . download ( srcFilePath ,   destFilePath ,   baseDir ,   listener [,   transform ])   Parameters     Name  Description  Type  Required      srcFilePath  Remote source file path with extension.  String  Y    destFilePath  Local destination path with extension.  String  Y    baseDir  A Corona system directory constant.  Const  Y    listener  The download listener callback function.  Function  Y    transform  See  Image Transforms  below.  Table  N     Event Response  While downloading, a  progress  key will be available.  When the download is complete, the file will be available in the directory set in the  baseDir  parameter.  Download Listener  local   function   downloadListener (   evt   ) \n   if   evt . error   then \n     print (   evt . error   ) \n   else \n     if   evt . progress   then \n       print (   evt . progress   ) \n     else \n       print ( \"file download complete\" ) \n     end \n   end  end   Example  core . files . download ( \n   \"imgs/image001.png\" , \n   \"image.png\" , \n   system . DocumentsDirectory , \n   downloadListener )   Download Progress  By default the listener event returns a  progress  key with the current download progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.  If you don't care about the progress, you can write the listener function like so:  local   function   downloadListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     if   not   evt . progress   then \n       print ( \"file download complete\" ) \n     end \n   end  end",
            "title": "download"
        },
        {
            "location": "/client/modules/files/#image-transforms",
            "text": "Image transformations are proportional. For example, when setting the  width  key, the image will be resized to the width provided, and the height will be resized  in proportion  to the width. The same holds true when setting the  height  key; the width will be resized in proportion to the height.  When setting both the  width  and  height  keys together, the image is resized to fit proportionally  within  the key values provided. This can be useful for display lists.  The  sharpen  key runs a \"sharpness\" filter on the final transformed image. If this key is not provided, no sharpening takes place.   File Types  Transforms only work with  PNG ,  JPG , and  GIF  file types.   Transform Keys     Name  Description  Type  Default      width  Proportionally resize image based on width.  Number  nil    height  Proportionally resize image based on height.  Number  nil    sharpen  Increases sharpness of the final image (0-255).  Number  0     Example  local   transform   =   { \n   width   =   100 , \n   height   =   100 , \n   sharpen   =   50  }  core . files . download ( \n   \"imgs/image001.png\" , \n   \"image.png\" , \n   system . DocumentsDirectory , \n   downloadListener , \n   transform )",
            "title": "Image Transforms"
        },
        {
            "location": "/client/modules/files/#list",
            "text": "List the files in the specified directory path.  core . files . list ( dirpath ,   listener )   Parameters     Name  Description  Type  Required      dirpath  The directory on the server to list.  String  Y    listener  The listener callback function.  Function  Y     Event Response  On success, the  result  key will contain a  table  array with the items found in the directory, if any.  Example  local   function   onList ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       print ( evt . result [ i ])   --file name \n     end \n   end  end  core . files . list ( \"imgs\" ,   onList )    Special Note  This method will only list the  files  in the directory, not any directories. If no files are present, it will return an empty table.",
            "title": "list"
        },
        {
            "location": "/client/modules/files/#remove",
            "text": "Delete a file from the server.  Once deleted the file is not recoverable.  core . files . remove ( srcFilePath ,   listener )   Parameters     Name  Description  Type  Required      srcFilePath  Remote source file path with extension.  String  Y    listener  The listener callback function.  Function  Y     Event Response  On success, the  result  key will be  true .  Example  local   function   deleteListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"Deleted\" ) \n   end  end  core . files . remove ( \"imgs/image001.png\" ,   deleteListener )",
            "title": "remove"
        },
        {
            "location": "/client/modules/files/#android-file-restrictions",
            "text": "When working with Android, make sure you understand the file restrictions. You can find more information in the Corona documentation by  clicking here .  In the documentaion, there is a reference to a  copyFile  method. As a convenience, this method is available in the Coronium Core plugin and can be accessed like so:  core . utils . copyFile ( srcName ,   srcPath ,   dstName ,   dstPath ,   overwrite )",
            "title": "Android file restrictions"
        },
        {
            "location": "/client/modules/mysql/",
            "text": "Provides a client-side api to the \nEZ query methods\n of the server-side MySQL module. For more complex data handling, you must provide an \napi\n on the server-side.\n\n\n\n\nDatabase Required\n\n\nBefore you can use the MySQL module, you will need to create a MySQL database. See the \nAdministration\n section for more information on connecting to your database.\n\n\n\n\nselect\n\n\nSelect multiple records from a database table.\n\n\ncore\n.\nmysql\n.\nselect\n(\nquery_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery_tbl\n\n\nThe query parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\ncolumns\n\n\nArray of columns to select as strings.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nwhere\n\n\nAny additional WHERE clause to apply.\n\n\nString\n or \nTable\n\n\nN\n\n\n\n\n\n\norderby\n\n\nThe sorting attributes. See \nOrderby\n below.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlimit\n\n\nLimit the records returned. See \nLimit\n below.\n\n\nNumber\n or \nTable\n\n\nN\n\n\n\n\n\n\ndistinct\n\n\nFilter out duplicate column values. Default: false\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nOrderby\n\n\nThe \norderby\n key should be a table filled with \ncolumn = direction\n pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order.\n\n\nLimit\n\n\nTo limit the rows returned, supply a \nnumber\n value to the \nlimit\n key. To \noffset\n the limit, supply a \ntable\n array of \nnumber\n values. For example, to return rows 6-15: \nlimit = {5, 10}\n.\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain a \ntable\n array of records.\n\n\nExample\n\n\nUsing the \"app\" database, select all records from the \"users\" table.\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nprint\n(\nevt\n.\nresult\n[\ni\n].\nid\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nselect\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\n\n\nMore Examples\n\n\nSee the server-side \ncore.mysql.select\n method for more examples.\n\n\n\n\nselectOne\n\n\nSelect and return a single record from a database table.\n\n\ncore\n.\nmysql\n.\nselectOne\n(\nquery_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery_tbl\n\n\nThe query parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nThe WHERE clause to apply.\n\n\nString\n or \nTable\n\n\nY\n\n\n\n\n\n\ncolumns\n\n\nArray of columns to select as strings.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain a \ntable\n.\n\n\n\n\nSpecial Response\n\n\nUnlike the \nselect\n method, the result is returned as a single record as opposed to an array of records.\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nname\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n,\n\n  \nwhere\n \n=\n \n{\n \nuser_id\n \n=\n \n20\n \n},\n\n  \ncolumns\n \n=\n \n{\n \n\"name\"\n \n}\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nselectOne\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\nselectBatch\n\n\nQuery multiple tables of a database and return the individual results in a keyed response.\n\n\ncore\n.\nmysql\n.\nselectBatch\n(\nbatch_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbatch_tbl\n\n\nThe batch parameters for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nBatch Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbatch\n\n\nA table array of EZ Query select tables, \nexcluding the db key\n. (see \nselect\n). Each select table must also include a \nkey\n property for the result response (see example below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will be a keyed \ntable\n with the results of each select query as a table array of records. If \nlimit\n in any of the query entries is set to 1, then a single table with the record data is returned (not an array).\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \nbikes\n \n=\n \nevt\n.\nresult\n.\nbikes\n \n--Array of \"Bike\" records\n\n    \nlocal\n \nshoes\n \n=\n \nevt\n.\nresult\n.\nshoes\n \n--Array of \"Shoe\" records\n\n    \nlocal\n \nstore\n \n=\n \nevt\n.\nresult\n.\nstore\n \n--Table \"Store\" record\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nbatch_select\n \n=\n \n{\n\n  \n{\n\n    \ntbl\n \n=\n \n\"products\"\n,\n\n    \nwhere\n \n=\n \n{\n \ntype\n \n=\n \n\"Bike\"\n \n},\n\n    \nkey\n \n=\n \n\"bikes\"\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"products\"\n,\n\n    \nwhere\n \n=\n \n{\n \ntype\n \n=\n \n\"Shoes\"\n \n},\n\n    \nkey\n \n=\n \n\"shoes\"\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"locations\"\n,\n\n    \nwhere\n \n=\n \n{\n \nname\n \n=\n \n\"Happy Toys\"\n \n},\n\n    \nlimit\n \n=\n \n1\n,\n \n--Return as non-array record\n\n    \nkey\n \n=\n \n\"store\"\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"store\"\n,\n\n  \nbatch\n \n=\n \nbatch_select\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nselectBatch\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\nQuery Errors\n\n\nIf any of the queries in the batch result in an error, the results key for that particular query will contain an \nerror\n key. Best practice is to check for this key before accessing the results.\n\n\n-- Assuming batch call as shown in the example above\n\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nresult\n.\nbikes\n.\nerror\n \nthen\n\n      \n--an error occurred on this particular query\n\n      \nprint\n(\nevt\n.\nresult\n.\nbikes\n.\nerror\n)\n\n    \nelse\n\n      \n--loop over the records\n\n      \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n.\nbikes\n \ndo\n\n        \nprint\n(\nevt\n.\nresult\n.\nbikes\n[\ni\n].\nname\n)\n\n      \nend\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nselectMerge\n\n\nSelect from multiple databases and tables and return the results in a keyed table.\n\n\ncore\n.\nmysql\n.\nselectMerge\n(\nmerge_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmerge_tbl\n\n\nThe merge parameters for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nMerge Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmerge\n\n\nA table array of EZ Query select tables. (see \nselect\n). Each select table should also include a \nkey\n property for the result table (see example below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will be a keyed \ntable\n with the results of each select query. If \nlimit\n in any of the query entries is set to 1, then a single table with the record data is returned (not an array). See \nErrors\n below.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \nlocs\n \n=\n \nevt\n.\nresult\n.\nlocs\n\n\n    \n--check for errors\n\n    \nif\n \nevt\n.\nresult\n.\nerrors\n \nthen\n\n      \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresults\n.\nerrors\n \ndo\n\n        \nlocal\n \nerr_tbl\n \n=\n \nevt\n.\nresults\n.\nerror\n[\ni\n]\n\n        \nprint\n(\nerr_tbl\n.\ndb\n,\n \nerr_tbl\n.\nerror\n,\n \nerr_tbl\n.\nindex\n)\n\n      \nend\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nmerge_dbs\n \n=\n \n{\n\n  \n{\n\n    \ndb\n \n=\n \n\"locations\"\n,\n\n    \ntbl\n \n=\n \n\"spots\"\n,\n\n    \nkey\n \n=\n \n\"locs\"\n\n  \n},\n\n  \n{\n\n    \ndb\n \n=\n \n\"products\"\n,\n\n    \ntbl\n \n=\n \n\"parts\"\n,\n\n    \nwhere\n \n=\n \n{\n \npart_id\n \n=\n \n20\n \n},\n\n    \nkey\n \n=\n \n\"part\"\n\n  \n},\n\n  \n{\n\n    \ndb\n \n=\n \n\"stores\"\n,\n\n    \ntbl\n \n=\n \n\"toy\"\n,\n\n    \nlimit\n \n=\n \n1\n,\n \n--Return as non-array record\n\n    \nwhere\n \n=\n \n{\n \nname\n \n=\n \n\"Happy Toys\"\n \n},\n\n    \nkey\n \n=\n \n\"store\"\n\n  \n}\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nselectMerge\n({\n \nmerge\n \n=\n \nmerge_dbs\n \n},\n \napiListener\n)\n\n\n\n\n\n\nErrors\n\n\nIf any of the database queries fail, the successful queries will still be returned in their respective key names. On failed queries, the result will also contain an \nerrors\n key, containing a table array describing any errors.\n\n\nExample Debug Response\n\n\nresult:\n  errors:\n  1:\n    db: products\n    error: Table 'products.parts' doesn't exist\n    index: 2\n    status: 1146\n  locs:\n  1:\n    id: 1\n    latitude: 80\n    longitude: 200\n    user_id: d23b8738-4d28-41ed-a967-98e83e855a38\n  2:\n    id: 3\n    latitude: -64\n    longitude: 200\n    user_id: d23b8738-4d28-41ed-a967-98e83e855a39\n  store:\n    name = Happy Toys\n    city = San Diego\n\n\n\n\n\nselectCount\n\n\nGet a record count based on passed in query.\n\n\ncore\n.\nmysql\n.\nselectCount\n(\ncount_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncount_tbl\n\n\nThe count parameters for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nCount Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the count query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate with.\n\n\nString\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nThe WHERE clause to apply.\n\n\nString\n or \nTable\n\n\nN\n\n\n\n\n\n\ncolumn\n\n\nThe column to use as the counting key. Defaults to \"id\".\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nIf the \nwhere\n key is not included, the result is the total records in the provided table.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \ncount\n \n=\n \nevt\n.\nresult\n.\ncount\n\n    \nprint\n(\n\"Total red toys:\"\n,\n \ncount\n)\n\n\nend\n\n\n\ncore\n.\nmysql\n.\nselectCount\n({\n\n  \ndb\n \n=\n \n\"products\"\n,\n\n  \ntbl\n \n=\n \n\"toys\"\n,\n\n  \nwhere\n \n=\n \n{\n \ncolor\n \n=\n \n\"Red\"\n \n}\n\n\n},\n \napiListener\n)\n\n\n\n\n\n\ninsert\n\n\nInsert a single record into a database table.\n\n\ncore\n.\nmysql\n.\ninsert\n(\nquery_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery_tbl\n\n\nThe query parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA table of \ncolumn = value\n pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nStrings in the \nvalues\n tables are run through the \nmysql.escape\n method. Do not double-escape values.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain the inserted record id as a \nnumber\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"insert id:\"\n,\n \nevt\n.\nresult\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n,\n\n  \nvalues\n \n=\n \n{\n\n    \nname\n \n=\n \n\"Bobby\"\n,\n\n    \nage\n \n=\n \n34\n\n  \n},\n\n\n}\n\n\n\ncore\n.\nmysql\n.\ninsert\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\ninsertMany\n\n\nInsert records into a single table of a database in an optimized way.\n\n\ncore\n.\nmysql\n.\ninsertMany\n(\ninsert_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ninsert_tbl\n\n\nThe insert parameters table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nInsert Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the inserts against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nrecords\n\n\nA table array of \nvalues\n tables from the \ninsert\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nStrings in the \nvalues\n tables are run through the \nmysql.escape\n method. Do not double-escape values.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold an indexed table array of tables containing either an \nid\n key; with the id of the newly created record, or an \nerror\n key; containing the error string.\n\n\nThe response table is indexed the same order as the records table that was sent to the server.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nlocal\n \nentry\n \n=\n \nevt\n.\nresult\n[\ni\n]\n\n\n      \nif\n \nentry\n.\nerror\n \nthen\n\n        \nprint\n(\n\"error in insert entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n      \nelse\n\n        \nprint\n(\n\"inserted record with id: \"\n..\nentry\n.\nid\n..\n\" for entry #\"\n..\ni\n)\n\n      \nend\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \ntoys\n \n=\n \n{\n\n  \n{\n\n    \nname\n \n=\n \n\"Car\"\n,\n\n    \ncolor\n \n=\n \n\"red\"\n\n  \n},\n\n  \n{\n\n    \nname\n \n=\n \n\"Teddy Bear\"\n,\n\n    \ncolor\n \n=\n \n\"brown\"\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"products\"\n,\n\n  \ntbl\n \n=\n \n\"toys\"\n,\n\n  \nrecords\n \n=\n \ntoys\n\n\n}\n\n\n\ncore\n.\nmysql\n.\ninsertMany\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\ninsertBatch\n\n\nInsert records into multiple tables of a database in an optimized way.\n\n\ncore\n.\nmysql\n.\ninsertBatch\n(\nbatch_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbatch_tbl\n\n\nThe batch parameters table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nBatch Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the batch against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbatch\n\n\nA table array of tables with the \ntbl\n and \nvalues\n keys from the \ninsert\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nStrings in the \nvalues\n tables are run through the \nmysql.escape\n method. Do not double-escape values.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold an indexed table array of tables containing either an \nid\n key; with the id of the newly created record, or an \nerror\n key; containing the error string.\n\n\nThe response table is indexed the same order as the batch table that was sent to the server.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nlocal\n \nentry\n \n=\n \nevt\n.\nresult\n[\ni\n]\n\n\n      \nif\n \nentry\n.\nerror\n \nthen\n\n        \nprint\n(\n\"error in insert entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n      \nelse\n\n        \nprint\n(\n\"inserted record with id: \"\n..\nentry\n.\nid\n..\n\" for entry #\"\n..\ni\n)\n\n      \nend\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nbatch_insert\n \n=\n \n{\n\n  \n{\n\n    \ntbl\n \n=\n \n\"shoes\"\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Adidas\"\n,\n\n      \nsize\n \n=\n \n12\n\n    \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Car\"\n,\n\n      \nage_group\n \n=\n \n10\n\n    \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Bear\"\n,\n\n      \nage_group\n \n=\n \n5\n,\n\n      \ncolor\n \n=\n \n\"Brown\"\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"products\"\n,\n\n  \nbatch\n \n=\n \nbatch_insert\n\n\n}\n\n\n\ncore\n.\nmysql\n.\ninsertBatch\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\nupdate\n\n\nUpdate record(s) in a database table.\n\n\ncore\n.\nmysql\n.\nupdate\n(\nquery_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery_tbl\n\n\nThe query parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA table of \ncolumn = value\n pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nWhere the columns should be updated.\n\n\nString\n or \nTable\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nStrings in the \nvalues\n tables are run through the \nmysql.escape\n method. Do not double-escape values.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain the amount of records updated as a \nnumber\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"updated:\"\n,\n \nevt\n.\nresult\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n,\n\n  \nvalues\n \n=\n \n{\n\n    \nname\n \n=\n \n\"Paco\"\n\n  \n},\n\n  \nwhere\n \n=\n \n{\n \nname\n \n=\n \n\"Bobby\"\n \n}\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nupdate\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\nupdateMany\n\n\nUpdate records in a single table of a database in an optimized way.\n\n\ncore\n.\nmysql\n.\nupdateMany\n(\nupdate_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nupdate_tbl\n\n\nThe update parameters table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nUpdate Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the updates against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nupdate\n\n\nA table array of tables with the \nvalues\n and \nwhere\n keys from the \nupdate\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nStrings in the \nvalues\n tables are run through the \nmysql.escape\n method. Do not double-escape values.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold an indexed table array of tables containing either an \nupdated\n key; with the number of records updated, or an \nerror\n key; containing the error string.\n\n\nThe response table is indexed the same order as the update table that was sent to the server.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nlocal\n \nentry\n \n=\n \nevt\n.\nresult\n[\ni\n]\n\n\n      \nif\n \nentry\n.\nerror\n \nthen\n\n        \nprint\n(\n\"error in update entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n      \nelse\n\n        \nprint\n(\n\"updated \"\n..\nentry\n.\nupdated\n..\n\" records for entry #\"\n..\ni\n)\n\n      \nend\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nupdate_tbl\n \n=\n \n{\n\n  \n{\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Nike\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nname\n \n=\n \n\"Adidas\"\n \n}\n\n  \n},\n\n  \n{\n\n    \nvalues\n \n=\n \n{\n\n      \ncost\n \n=\n \n\"1.99\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n3\n \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"products\"\n,\n\n  \ntbl\n \n=\n \n\"shoes\"\n,\n\n  \nupdate\n \n=\n \nupdate_tbl\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nupdateMany\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\nupdateBatch\n\n\nUpdate records in multiple tables of a database in an optimized way.\n\n\ncore\n.\nmysql\n.\nupdateBatch\n(\nbatch_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbatch_tbl\n\n\nThe batch parameters table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nBatch Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the batch against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbatch\n\n\nA table array of tables with the \ntbl\n, \nvalues\n and \nwhere\n keys from the \nupdate\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nStrings in the \nvalues\n tables are run through the \nmysql.escape\n method. Do not double-escape values.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold an indexed table array of tables containing either an \nupdated\n key; with the number of records updated, or an \nerror\n key; containing the error string.\n\n\nThe response table is indexed the same order as the batch table that was sent to the server.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nlocal\n \nentry\n \n=\n \nevt\n.\nresult\n[\ni\n]\n\n\n      \nif\n \nentry\n.\nerror\n \nthen\n\n        \nprint\n(\n\"error in update entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n      \nelse\n\n        \nprint\n(\n\"updated \"\n..\nentry\n.\nupdated\n..\n\" records for entry #\"\n..\ni\n)\n\n      \nend\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nbatch_update\n \n=\n \n{\n\n  \n{\n\n    \ntbl\n \n=\n \n\"shoes\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Adidas\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n3\n \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \nname\n \n=\n \n\"Raggedy Ann\"\n,\n\n      \ngender\n \n=\n \n\"female\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nname\n \n=\n \n\"Raggedy Andy\"\n \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nvalues\n \n=\n \n{\n\n      \ncompany\n \n=\n \n\"Tonka\"\n\n    \n},\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n4\n \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"products\"\n,\n\n  \nbatch\n \n=\n \nbatch_update\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nupdateBatch\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\ndelete\n\n\nDelete record(s) from a database table.\n\n\ncore\n.\nmysql\n.\ndelete\n(\nquery_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery_tbl\n\n\nThe query parameters table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nA WHERE clause to limit deletions to.\n\n\nString\n or \nTable\n\n\nN\n\n\n\n\n\n\nforce\n\n\nDisables safety check for missing \nwhere\n key.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\n\n\nForce Delete\n\n\nTo run the delete command without a \nwhere\n clause, you must set \nforce\n to true.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain the amount of records deleted as a \nnumber\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"deleted:\"\n,\n \nevt\n.\nresult\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n,\n\n  \nwhere\n \n=\n \n{\n \nid\n \n=\n \n10\n \n}\n\n\n}\n\n\n\ncore\n.\nmysql\n.\ndelete\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee the server-side \ncore.mysql.delete\n method for more examples.\n\n\n\n\ndeleteMany\n\n\nDelete records from a single table in a database in an optimized way.\n\n\ncore\n.\nmysql\n.\ndeleteMany\n(\ndelete_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndelete_tbl\n\n\nThe delete parameters table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nDelete Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the deletes against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndelete\n\n\nA table array of tables with the \nwhere\n key from the \ndelete\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold an indexed table array of tables containing either a \ndeleted\n key; with the number of records deleted, or an \nerror\n key; containing the error string.\n\n\nThe response table is indexed the same order as the delete table that was sent to the server.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nlocal\n \nentry\n \n=\n \nevt\n.\nresult\n[\ni\n]\n\n\n      \nif\n \nentry\n.\nerror\n \nthen\n\n        \nprint\n(\n\"error in delete entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n      \nelse\n\n        \nprint\n(\n\"deleted \"\n..\nentry\n.\ndeleted\n..\n\" records for entry #\"\n..\ni\n)\n\n      \nend\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \ndelete_tbl\n \n=\n \n{\n\n  \n{\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n34\n \n}\n\n  \n},\n\n  \n{\n\n    \nwhere\n \n=\n \n{\n \ncolor\n \n=\n \n\"Red\"\n \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"products\"\n,\n\n  \ntbl\n \n=\n \n\"shoes\"\n,\n\n  \ndelete\n \n=\n \ndelete_tbl\n\n\n}\n\n\n\ncore\n.\nmysql\n.\ndeleteMany\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\ndeleteBatch\n\n\nDelete records from multiple tables of a database in an optimized way.\n\n\ncore\n.\nmysql\n.\ndeleteBatch\n(\nbatch_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbatch_tbl\n\n\nThe batch parameters table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nBatch Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the batch against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbatch\n\n\nA table array of tables with the \ntbl\n and \nwhere\n keys from the \ndelete\n method.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold an indexed table array of tables containing either a \ndeleted\n key; with the number of records deleted, or an \nerror\n key; containing the error string.\n\n\nThe response table is indexed the same order as the batch table that was sent to the server.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nlocal\n \nentry\n \n=\n \nevt\n.\nresult\n[\ni\n]\n\n\n      \nif\n \nentry\n.\nerror\n \nthen\n\n        \nprint\n(\n\"error in delete entry #\"\n..\ni\n..\n\": \"\n..\nentry\n.\nerror\n)\n\n      \nelse\n\n        \nprint\n(\n\"deleted \"\n..\nentry\n.\ndeleted\n..\n\" records for entry #\"\n..\ni\n)\n\n      \nend\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\nlocal\n \nbatch_delete\n \n=\n \n{\n\n  \n{\n\n    \ntbl\n \n=\n \n\"toys\"\n,\n\n    \nwhere\n \n=\n \n{\n \nid\n \n=\n \n2\n \n}\n\n  \n},\n\n  \n{\n\n    \ntbl\n \n=\n \n\"shoes\"\n,\n\n    \nwhere\n \n=\n \n{\n \ntype\n \n=\n \n\"running\"\n \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"products\"\n,\n\n  \nbatch\n \n=\n \nbatch_delete\n\n\n}\n\n\n\ncore\n.\nmysql\n.\ndeleteBatch\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\nThe WHERE Key\n\n\nMany of the MySQL (and other) modules use a \nwhere\n key to specify the \"WHERE\" clause for a database query. Depending on what data type and structure you provide this key, a couple different things can happen automagically.\n\n\nString Based\n\n\nWhen passing a string to the \nwhere\n key, you are on your own to create a valid MySQL query string. The query string is interpreted as-is. \n\n\nYou never include the literal \"WHERE\" in the \nwhere\n key value.\n\n\nExamples\n\n\nwhere = \"`color`='Red'\"\n\n\n\n\n\nwhere = \"`kind`='Truck' AND `color`='Red'\"\n\n\n\n\n\nwhere = \"`kind`='Truck' OR `kind`='Car'\"\n\n\n\n\n\nTable Based\n\n\nThe advantage of using a table based \nwhere\n key is that all of the values are properly formatted to make a valid and type-safe MySQL query.\n\n\n\n\nImportant\n\n\nString values are automatically run through \nmysql.escape\n. Do not double-escape values.\n\n\n\n\nTo reproduce the three string based examples above as table based:\n\n\nwhere\n \n=\n \n{\n \ncolor\n \n=\n \n\"Red\"\n \n}\n\n\n\n\n\n\nwhere\n \n=\n \n{\n \nkind\n \n=\n \n\"Truck\"\n,\n \ncolor\n \n=\n \n\"Red\"\n \n}\n \n--AND\n\n\n\n\n\n\nwhere\n \n=\n \n{\n \nkind\n \n=\n \n{\n \n\"Truck\"\n,\n \n\"Car\"\n \n}\n \n}\n \n--OR\n\n\n\n\n\n\nOrdered Table Queries\n\n\nWith \"ordered\" query tables you can replicate some more complex queries:\n\n\nwhere = \"`color='Red' AND `model`='Ford' AND kind='Truck' OR kind='Car'\"\n\n\n\n\n\nTo reproduce the query above, put the entries in a table array (order matters):\n\n\nwhere\n \n=\n \n{\n\n  \n{\n \ncolor\n \n=\n \n\"Red\"\n,\n \nmodel\n \n=\n \n\"Ford\"\n \n},\n\n  \n{\n \nkind\n \n=\n \n{\n \n\"Truck\"\n,\n \n\"Car\"\n \n}\n \n}\n\n\n}\n\n\n\n\n\n\nFor an all OR query like:\n\n\nwhere = \"`color='Red' OR `model`='Ford' OR kind='Truck' OR kind='Car'\"\n\n\n\n\n\nYou can use an ordered table with a single entry:\n\n\nwhere\n \n=\n \n{\n\n  \n{\n \ncolor\n \n=\n \n{\n \n\"Red\"\n \n},\n \nmodel\n \n=\n \n{\n \n\"Ford\"\n \n},\n \nkind\n \n=\n \n{\n \n\"Truck\"\n,\n \n\"Car\"\n \n}\n \n}\n\n\n}\n\n\n\n\n\n\nAt this time multiple entries in an \"ordered\" \nwhere\n table are combined using 'AND', which may cause problems with more complicated queries, so you'll need to fall back to the string method.\n\n\nTable type queries also do not support conditionals, so the following cannot be replicated with a table based query:\n\n\nwhere = \"`score` > 100\"\n\n\n\n\n\nOptimized Methods\n\n\nWhen working with multiple entries per query, try to choose an optimized query method. The reason for this is due to the fact that each Coronium Client network request to the server requires opening a new database connection per call.\n\n\nBy using the optimized query methods, the Coronium Core server can take advantage of using cached database connections, providing lower overhead and better performance.\n\n\nMost optimized query methods also make it easier to program your application logic, by grouping results and using less calls.\n\n\nThe following are optimized MySQL module methods:\n\n\n\n\nselectBatch\n\n\nselectMerge\n\n\ninsertMany\n\n\ninsertBatch\n\n\nupdateMany\n\n\nupdateBatch\n\n\ndeleteMany\n\n\ndeleteBatch\n\n\n\n\nNetwork Timeout\n\n\nThough rare, very large workloads may cause the Corona client to throw a network timeout error before you receive a reponse from the server. In these cases you can add a \ntimeout\n parameter to the \nquery_tbl\n table.\n\n\nThe Corona default network timeout is 30 seconds. \nThis is an optional parameter\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \n...\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n,\n\n  \ntimeout\n \n=\n \n60\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nselect\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\n\n\nServer-Side Timeout\n\n\nTo adjust the MySQL server timeout for large queries, see \nMySQL Timeout\n.",
            "title": "MySQL"
        },
        {
            "location": "/client/modules/mysql/#select",
            "text": "Select multiple records from a database table.  core . mysql . select ( query_tbl ,   listener )   Parameters     Name  Description  Type  Required      query_tbl  The query parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Query Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    tbl  Name of the table to operate on.  String  Y    columns  Array of columns to select as strings.  Table  N    where  Any additional WHERE clause to apply.  String  or  Table  N    orderby  The sorting attributes. See  Orderby  below.  Table  N    limit  Limit the records returned. See  Limit  below.  Number  or  Table  N    distinct  Filter out duplicate column values. Default: false  Boolean  N     Orderby  The  orderby  key should be a table filled with  column = direction  pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order.  Limit  To limit the rows returned, supply a  number  value to the  limit  key. To  offset  the limit, supply a  table  array of  number  values. For example, to return rows 6-15:  limit = {5, 10} .  Event Response  On success, the  result  will contain a  table  array of records.  Example  Using the \"app\" database, select all records from the \"users\" table.  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       print ( evt . result [ i ]. id ) \n     end \n   end  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\"  }  core . mysql . select ( params ,   apiListener )    More Examples  See the server-side  core.mysql.select  method for more examples.",
            "title": "select"
        },
        {
            "location": "/client/modules/mysql/#selectone",
            "text": "Select and return a single record from a database table.  core . mysql . selectOne ( query_tbl ,   listener )   Parameters     Name  Description  Type  Required      query_tbl  The query parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Query Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    tbl  Name of the table to operate on.  String  Y    where  The WHERE clause to apply.  String  or  Table  Y    columns  Array of columns to select as strings.  Table  N     Event Response  On success, the  result  will contain a  table .   Special Response  Unlike the  select  method, the result is returned as a single record as opposed to an array of records.   Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . name ) \n   end  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\" , \n   where   =   {   user_id   =   20   }, \n   columns   =   {   \"name\"   }  }  core . mysql . selectOne ( params ,   apiListener )",
            "title": "selectOne"
        },
        {
            "location": "/client/modules/mysql/#selectbatch",
            "text": "Query multiple tables of a database and return the individual results in a keyed response.  core . mysql . selectBatch ( batch_tbl ,   listener )   Parameters     Name  Description  Type  Required      batch_tbl  The batch parameters for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Batch Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    batch  A table array of EZ Query select tables,  excluding the db key . (see  select ). Each select table must also include a  key  property for the result response (see example below).  Table  Y     Event Response  On success, the  result  will be a keyed  table  with the results of each select query as a table array of records. If  limit  in any of the query entries is set to 1, then a single table with the record data is returned (not an array).  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   bikes   =   evt . result . bikes   --Array of \"Bike\" records \n     local   shoes   =   evt . result . shoes   --Array of \"Shoe\" records \n     local   store   =   evt . result . store   --Table \"Store\" record \n   end  end  local   batch_select   =   { \n   { \n     tbl   =   \"products\" , \n     where   =   {   type   =   \"Bike\"   }, \n     key   =   \"bikes\" \n   }, \n   { \n     tbl   =   \"products\" , \n     where   =   {   type   =   \"Shoes\"   }, \n     key   =   \"shoes\" \n   }, \n   { \n     tbl   =   \"locations\" , \n     where   =   {   name   =   \"Happy Toys\"   }, \n     limit   =   1 ,   --Return as non-array record \n     key   =   \"store\" \n   }  }  local   params   =   { \n   db   =   \"store\" , \n   batch   =   batch_select  }  core . mysql . selectBatch ( params ,   apiListener )   Query Errors  If any of the queries in the batch result in an error, the results key for that particular query will contain an  error  key. Best practice is to check for this key before accessing the results.  -- Assuming batch call as shown in the example above  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     if   evt . result . bikes . error   then \n       --an error occurred on this particular query \n       print ( evt . result . bikes . error ) \n     else \n       --loop over the records \n       for   i = 1 ,   # evt . result . bikes   do \n         print ( evt . result . bikes [ i ]. name ) \n       end \n     end \n   end  end",
            "title": "selectBatch"
        },
        {
            "location": "/client/modules/mysql/#selectmerge",
            "text": "Select from multiple databases and tables and return the results in a keyed table.  core . mysql . selectMerge ( merge_tbl ,   listener )   Parameters     Name  Description  Type  Required      merge_tbl  The merge parameters for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Merge Table Keys     Name  Description  Type  Required      merge  A table array of EZ Query select tables. (see  select ). Each select table should also include a  key  property for the result table (see example below).  Table  Y     Event Response  On success, the  result  will be a keyed  table  with the results of each select query. If  limit  in any of the query entries is set to 1, then a single table with the record data is returned (not an array). See  Errors  below.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   locs   =   evt . result . locs \n\n     --check for errors \n     if   evt . result . errors   then \n       for   i = 1 ,   # evt . results . errors   do \n         local   err_tbl   =   evt . results . error [ i ] \n         print ( err_tbl . db ,   err_tbl . error ,   err_tbl . index ) \n       end \n     end \n   end  end  local   merge_dbs   =   { \n   { \n     db   =   \"locations\" , \n     tbl   =   \"spots\" , \n     key   =   \"locs\" \n   }, \n   { \n     db   =   \"products\" , \n     tbl   =   \"parts\" , \n     where   =   {   part_id   =   20   }, \n     key   =   \"part\" \n   }, \n   { \n     db   =   \"stores\" , \n     tbl   =   \"toy\" , \n     limit   =   1 ,   --Return as non-array record \n     where   =   {   name   =   \"Happy Toys\"   }, \n     key   =   \"store\" \n   }  }  core . mysql . selectMerge ({   merge   =   merge_dbs   },   apiListener )   Errors  If any of the database queries fail, the successful queries will still be returned in their respective key names. On failed queries, the result will also contain an  errors  key, containing a table array describing any errors.  Example Debug Response  result:\n  errors:\n  1:\n    db: products\n    error: Table 'products.parts' doesn't exist\n    index: 2\n    status: 1146\n  locs:\n  1:\n    id: 1\n    latitude: 80\n    longitude: 200\n    user_id: d23b8738-4d28-41ed-a967-98e83e855a38\n  2:\n    id: 3\n    latitude: -64\n    longitude: 200\n    user_id: d23b8738-4d28-41ed-a967-98e83e855a39\n  store:\n    name = Happy Toys\n    city = San Diego",
            "title": "selectMerge"
        },
        {
            "location": "/client/modules/mysql/#selectcount",
            "text": "Get a record count based on passed in query.  core . mysql . selectCount ( count_tbl ,   listener )   Parameters     Name  Description  Type  Required      count_tbl  The count parameters for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Count Table Keys     Name  Description  Type  Required      db  The database to run the count query against.  String  Y    tbl  Name of the table to operate with.  String  Y    where  The WHERE clause to apply.  String  or  Table  N    column  The column to use as the counting key. Defaults to \"id\".  String  N     If the  where  key is not included, the result is the total records in the provided table.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   count   =   evt . result . count \n     print ( \"Total red toys:\" ,   count )  end  core . mysql . selectCount ({ \n   db   =   \"products\" , \n   tbl   =   \"toys\" , \n   where   =   {   color   =   \"Red\"   }  },   apiListener )",
            "title": "selectCount"
        },
        {
            "location": "/client/modules/mysql/#insert",
            "text": "Insert a single record into a database table.  core . mysql . insert ( query_tbl ,   listener )   Parameters     Name  Description  Type  Required      query_tbl  The query parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Query Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    tbl  Name of the table to operate on.  String  Y    values  A table of  column = value  pairs.  Table  Y      Important  Strings in the  values  tables are run through the  mysql.escape  method. Do not double-escape values.   Event Response  On success, the  result  will contain the inserted record id as a  number .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"insert id:\" ,   evt . result ) \n   end  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\" , \n   values   =   { \n     name   =   \"Bobby\" , \n     age   =   34 \n   },  }  core . mysql . insert ( params ,   apiListener )",
            "title": "insert"
        },
        {
            "location": "/client/modules/mysql/#insertmany",
            "text": "Insert records into a single table of a database in an optimized way.  core . mysql . insertMany ( insert_tbl ,   listener )   Parameters     Name  Description  Type  Required      insert_tbl  The insert parameters table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Insert Table Keys     Name  Description  Type  Required      db  The database to run the inserts against.  String  Y    tbl  Name of the table to operate on.  String  Y    records  A table array of  values  tables from the  insert  method.  Table  Y      Important  Strings in the  values  tables are run through the  mysql.escape  method. Do not double-escape values.   Event Response  On success, the  result  will hold an indexed table array of tables containing either an  id  key; with the id of the newly created record, or an  error  key; containing the error string.  The response table is indexed the same order as the records table that was sent to the server.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       local   entry   =   evt . result [ i ] \n\n       if   entry . error   then \n         print ( \"error in insert entry #\" .. i .. \": \" .. entry . error ) \n       else \n         print ( \"inserted record with id: \" .. entry . id .. \" for entry #\" .. i ) \n       end \n     end \n   end  end  local   toys   =   { \n   { \n     name   =   \"Car\" , \n     color   =   \"red\" \n   }, \n   { \n     name   =   \"Teddy Bear\" , \n     color   =   \"brown\" \n   }  }  local   params   =   { \n   db   =   \"products\" , \n   tbl   =   \"toys\" , \n   records   =   toys  }  core . mysql . insertMany ( params ,   apiListener )",
            "title": "insertMany"
        },
        {
            "location": "/client/modules/mysql/#insertbatch",
            "text": "Insert records into multiple tables of a database in an optimized way.  core . mysql . insertBatch ( batch_tbl ,   listener )   Parameters     Name  Description  Type  Required      batch_tbl  The batch parameters table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Batch Table Keys     Name  Description  Type  Required      db  The database to run the batch against.  String  Y    batch  A table array of tables with the  tbl  and  values  keys from the  insert  method.  Table  Y      Important  Strings in the  values  tables are run through the  mysql.escape  method. Do not double-escape values.   Event Response  On success, the  result  will hold an indexed table array of tables containing either an  id  key; with the id of the newly created record, or an  error  key; containing the error string.  The response table is indexed the same order as the batch table that was sent to the server.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       local   entry   =   evt . result [ i ] \n\n       if   entry . error   then \n         print ( \"error in insert entry #\" .. i .. \": \" .. entry . error ) \n       else \n         print ( \"inserted record with id: \" .. entry . id .. \" for entry #\" .. i ) \n       end \n     end \n   end  end  local   batch_insert   =   { \n   { \n     tbl   =   \"shoes\" \n     values   =   { \n       name   =   \"Adidas\" , \n       size   =   12 \n     } \n   }, \n   { \n     tbl   =   \"toys\" , \n     values   =   { \n       name   =   \"Car\" , \n       age_group   =   10 \n     } \n   }, \n   { \n     tbl   =   \"toys\" , \n     values   =   { \n       name   =   \"Bear\" , \n       age_group   =   5 , \n       color   =   \"Brown\" \n     } \n   }  }  local   params   =   { \n   db   =   \"products\" , \n   batch   =   batch_insert  }  core . mysql . insertBatch ( params ,   apiListener )",
            "title": "insertBatch"
        },
        {
            "location": "/client/modules/mysql/#update",
            "text": "Update record(s) in a database table.  core . mysql . update ( query_tbl ,   listener )   Parameters     Name  Description  Type  Required      query_tbl  The query parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Query Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    tbl  The name of the table to operate on.  String  Y    values  A table of  column = value  pairs.  Table  Y    where  Where the columns should be updated.  String  or  Table  N      Important  Strings in the  values  tables are run through the  mysql.escape  method. Do not double-escape values.   Event Response  On success, the  result  will contain the amount of records updated as a  number .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"updated:\" ,   evt . result ) \n   end  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\" , \n   values   =   { \n     name   =   \"Paco\" \n   }, \n   where   =   {   name   =   \"Bobby\"   }  }  core . mysql . update ( params ,   apiListener )",
            "title": "update"
        },
        {
            "location": "/client/modules/mysql/#updatemany",
            "text": "Update records in a single table of a database in an optimized way.  core . mysql . updateMany ( update_tbl ,   listener )   Parameters     Name  Description  Type  Required      update_tbl  The update parameters table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Update Table Keys     Name  Description  Type  Required      db  The database to run the updates against.  String  Y    tbl  Name of the table to operate on.  String  Y    update  A table array of tables with the  values  and  where  keys from the  update  method.  Table  Y      Important  Strings in the  values  tables are run through the  mysql.escape  method. Do not double-escape values.   Event Response  On success, the  result  will hold an indexed table array of tables containing either an  updated  key; with the number of records updated, or an  error  key; containing the error string.  The response table is indexed the same order as the update table that was sent to the server.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       local   entry   =   evt . result [ i ] \n\n       if   entry . error   then \n         print ( \"error in update entry #\" .. i .. \": \" .. entry . error ) \n       else \n         print ( \"updated \" .. entry . updated .. \" records for entry #\" .. i ) \n       end \n     end \n   end  end  local   update_tbl   =   { \n   { \n     values   =   { \n       name   =   \"Nike\" \n     }, \n     where   =   {   name   =   \"Adidas\"   } \n   }, \n   { \n     values   =   { \n       cost   =   \"1.99\" \n     }, \n     where   =   {   id   =   3   } \n   }  }  local   params   =   { \n   db   =   \"products\" , \n   tbl   =   \"shoes\" , \n   update   =   update_tbl  }  core . mysql . updateMany ( params ,   apiListener )",
            "title": "updateMany"
        },
        {
            "location": "/client/modules/mysql/#updatebatch",
            "text": "Update records in multiple tables of a database in an optimized way.  core . mysql . updateBatch ( batch_tbl ,   listener )   Parameters     Name  Description  Type  Required      batch_tbl  The batch parameters table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Batch Table Keys     Name  Description  Type  Required      db  The database to run the batch against.  String  Y    batch  A table array of tables with the  tbl ,  values  and  where  keys from the  update  method.  Table  Y      Important  Strings in the  values  tables are run through the  mysql.escape  method. Do not double-escape values.   Event Response  On success, the  result  will hold an indexed table array of tables containing either an  updated  key; with the number of records updated, or an  error  key; containing the error string.  The response table is indexed the same order as the batch table that was sent to the server.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       local   entry   =   evt . result [ i ] \n\n       if   entry . error   then \n         print ( \"error in update entry #\" .. i .. \": \" .. entry . error ) \n       else \n         print ( \"updated \" .. entry . updated .. \" records for entry #\" .. i ) \n       end \n     end \n   end  end  local   batch_update   =   { \n   { \n     tbl   =   \"shoes\" , \n     values   =   { \n       name   =   \"Adidas\" \n     }, \n     where   =   {   id   =   3   } \n   }, \n   { \n     tbl   =   \"toys\" , \n     values   =   { \n       name   =   \"Raggedy Ann\" , \n       gender   =   \"female\" \n     }, \n     where   =   {   name   =   \"Raggedy Andy\"   } \n   }, \n   { \n     tbl   =   \"toys\" , \n     values   =   { \n       company   =   \"Tonka\" \n     }, \n     where   =   {   id   =   4   } \n   }  }  local   params   =   { \n   db   =   \"products\" , \n   batch   =   batch_update  }  core . mysql . updateBatch ( params ,   apiListener )",
            "title": "updateBatch"
        },
        {
            "location": "/client/modules/mysql/#delete",
            "text": "Delete record(s) from a database table.  core . mysql . delete ( query_tbl ,   listener )   Parameters     Name  Description  Type  Required      query_tbl  The query parameters table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Query Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    tbl  The name of the table to operate on.  String  Y    where  A WHERE clause to limit deletions to.  String  or  Table  N    force  Disables safety check for missing  where  key.  Boolean  N      Force Delete  To run the delete command without a  where  clause, you must set  force  to true.   Event Response  On success, the  result  will contain the amount of records deleted as a  number .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"deleted:\" ,   evt . result ) \n   end  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\" , \n   where   =   {   id   =   10   }  }  core . mysql . delete ( params ,   apiListener )    Tip  See the server-side  core.mysql.delete  method for more examples.",
            "title": "delete"
        },
        {
            "location": "/client/modules/mysql/#deletemany",
            "text": "Delete records from a single table in a database in an optimized way.  core . mysql . deleteMany ( delete_tbl ,   listener )   Parameters     Name  Description  Type  Required      delete_tbl  The delete parameters table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Delete Table Keys     Name  Description  Type  Required      db  The database to run the deletes against.  String  Y    tbl  Name of the table to operate on.  String  Y    delete  A table array of tables with the  where  key from the  delete  method.  Table  Y     Event Response  On success, the  result  will hold an indexed table array of tables containing either a  deleted  key; with the number of records deleted, or an  error  key; containing the error string.  The response table is indexed the same order as the delete table that was sent to the server.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       local   entry   =   evt . result [ i ] \n\n       if   entry . error   then \n         print ( \"error in delete entry #\" .. i .. \": \" .. entry . error ) \n       else \n         print ( \"deleted \" .. entry . deleted .. \" records for entry #\" .. i ) \n       end \n     end \n   end  end  local   delete_tbl   =   { \n   { \n     where   =   {   id   =   34   } \n   }, \n   { \n     where   =   {   color   =   \"Red\"   } \n   }  }  local   params   =   { \n   db   =   \"products\" , \n   tbl   =   \"shoes\" , \n   delete   =   delete_tbl  }  core . mysql . deleteMany ( params ,   apiListener )",
            "title": "deleteMany"
        },
        {
            "location": "/client/modules/mysql/#deletebatch",
            "text": "Delete records from multiple tables of a database in an optimized way.  core . mysql . deleteBatch ( batch_tbl ,   listener )   Parameters     Name  Description  Type  Required      batch_tbl  The batch parameters table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Batch Table Keys     Name  Description  Type  Required      db  The database to run the batch against.  String  Y    batch  A table array of tables with the  tbl  and  where  keys from the  delete  method.  Table  Y     Event Response  On success, the  result  will hold an indexed table array of tables containing either a  deleted  key; with the number of records deleted, or an  error  key; containing the error string.  The response table is indexed the same order as the batch table that was sent to the server.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       local   entry   =   evt . result [ i ] \n\n       if   entry . error   then \n         print ( \"error in delete entry #\" .. i .. \": \" .. entry . error ) \n       else \n         print ( \"deleted \" .. entry . deleted .. \" records for entry #\" .. i ) \n       end \n     end \n   end  end  local   batch_delete   =   { \n   { \n     tbl   =   \"toys\" , \n     where   =   {   id   =   2   } \n   }, \n   { \n     tbl   =   \"shoes\" , \n     where   =   {   type   =   \"running\"   } \n   }  }  local   params   =   { \n   db   =   \"products\" , \n   batch   =   batch_delete  }  core . mysql . deleteBatch ( params ,   apiListener )",
            "title": "deleteBatch"
        },
        {
            "location": "/client/modules/mysql/#the-where-key",
            "text": "Many of the MySQL (and other) modules use a  where  key to specify the \"WHERE\" clause for a database query. Depending on what data type and structure you provide this key, a couple different things can happen automagically.",
            "title": "The WHERE Key"
        },
        {
            "location": "/client/modules/mysql/#string-based",
            "text": "When passing a string to the  where  key, you are on your own to create a valid MySQL query string. The query string is interpreted as-is.   You never include the literal \"WHERE\" in the  where  key value.  Examples  where = \"`color`='Red'\"  where = \"`kind`='Truck' AND `color`='Red'\"  where = \"`kind`='Truck' OR `kind`='Car'\"",
            "title": "String Based"
        },
        {
            "location": "/client/modules/mysql/#table-based",
            "text": "The advantage of using a table based  where  key is that all of the values are properly formatted to make a valid and type-safe MySQL query.   Important  String values are automatically run through  mysql.escape . Do not double-escape values.   To reproduce the three string based examples above as table based:  where   =   {   color   =   \"Red\"   }   where   =   {   kind   =   \"Truck\" ,   color   =   \"Red\"   }   --AND   where   =   {   kind   =   {   \"Truck\" ,   \"Car\"   }   }   --OR   Ordered Table Queries  With \"ordered\" query tables you can replicate some more complex queries:  where = \"`color='Red' AND `model`='Ford' AND kind='Truck' OR kind='Car'\"  To reproduce the query above, put the entries in a table array (order matters):  where   =   { \n   {   color   =   \"Red\" ,   model   =   \"Ford\"   }, \n   {   kind   =   {   \"Truck\" ,   \"Car\"   }   }  }   For an all OR query like:  where = \"`color='Red' OR `model`='Ford' OR kind='Truck' OR kind='Car'\"  You can use an ordered table with a single entry:  where   =   { \n   {   color   =   {   \"Red\"   },   model   =   {   \"Ford\"   },   kind   =   {   \"Truck\" ,   \"Car\"   }   }  }   At this time multiple entries in an \"ordered\"  where  table are combined using 'AND', which may cause problems with more complicated queries, so you'll need to fall back to the string method.  Table type queries also do not support conditionals, so the following cannot be replicated with a table based query:  where = \"`score` > 100\"",
            "title": "Table Based"
        },
        {
            "location": "/client/modules/mysql/#optimized-methods",
            "text": "When working with multiple entries per query, try to choose an optimized query method. The reason for this is due to the fact that each Coronium Client network request to the server requires opening a new database connection per call.  By using the optimized query methods, the Coronium Core server can take advantage of using cached database connections, providing lower overhead and better performance.  Most optimized query methods also make it easier to program your application logic, by grouping results and using less calls.  The following are optimized MySQL module methods:   selectBatch  selectMerge  insertMany  insertBatch  updateMany  updateBatch  deleteMany  deleteBatch",
            "title": "Optimized Methods"
        },
        {
            "location": "/client/modules/mysql/#network-timeout",
            "text": "Though rare, very large workloads may cause the Corona client to throw a network timeout error before you receive a reponse from the server. In these cases you can add a  timeout  parameter to the  query_tbl  table.  The Corona default network timeout is 30 seconds.  This is an optional parameter .",
            "title": "Network Timeout"
        },
        {
            "location": "/client/modules/mysql/#example",
            "text": "local   function   apiListener (   evt   ) \n   ...  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\" , \n   timeout   =   60  }  core . mysql . select ( params ,   apiListener )    Server-Side Timeout  To adjust the MySQL server timeout for large queries, see  MySQL Timeout .",
            "title": "Example"
        },
        {
            "location": "/client/modules/users/api/",
            "text": "Provides methods to register, login, and track users for your applications. \n\n\nFor more detailed information on working with users, see the \nCreating\n, \nUpdating\n, \nLogging In\n, and \nConfirmation\n sections.\n\n\nSee also the \nOAuth API\n for managing users with OAuth capabilities.\n\n\ncreate\n\n\nCreate a new user, and optionally request an email confirmation.\n\n\n\n\nSee also: \nCreating\n users, and \nConfirmation\n using email.\n\n\n\n\ncore\n.\nusers\n.\ncreate\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nThe preferred username.\n\n\nString\n\n\nY\n\n\n\n\n\n\npassword\n\n\nThe users password.\n\n\nString\n\n\nY\n\n\n\n\n\n\nemail\n\n\nThe users email. \nUser email is required if using email confirmation.\n See \nconfirmation\n parameter below.\n\n\nString\n\n\nN\n\n\n\n\n\n\ngroup\n\n\nA custom string used to partition this user within the scope.\n\n\nString\n\n\nN\n\n\n\n\n\n\nextra\n\n\nA custom data table of key/value pairs to store with the user. Can be of type \nString\n, \nNumber\n, or \nBoolean\n only.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nconfirmation\n\n\nParameters for \noptional\n email confirmation. See the \nConfirmation\n section for detailed usage.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nPasswords are hashed before being sent to the server. Do not try to hash the password yourself.\n\n\n\n\n\n\nOAuth Users\n\n\nTo add OAuth provider information to a user, see the \naddAuthProvider\n method.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the created users unique identifier in the \nuser_id\n key.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserCreate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n-- holds the users id\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\ncreate\n({\n\n  \nusername\n=\n\"tiny\"\n,\n \n  \npassword\n=\n\"abcd1234\"\n\n\n},\n \nonUserCreate\n)\n\n\n\n\n\n\nlogin\n\n\nRetrieves the users basic data, and marks a \nlogin event\n in the \nusers\n database. \n\n\nYou can log a user in with either a \nusername\n \nor\n \nemail\n (if the user has provided one).\n\n\n\n\nSee also: \nLogging In\n users, and \nOAuth Login\n.\n\n\n\n\ncore\n.\nusers\n.\nlogin\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params (Username Login)\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nThe registered username.\n\n\nString\n\n\nY\n\n\n\n\n\n\npassword\n\n\nThe users password.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nData Params (Email Login)\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nemail\n\n\nThe registered email.\n\n\nString\n\n\nY\n\n\n\n\n\n\npassword\n\n\nThe users password.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\n\n\nOAuth Login Parameters\n\n\nTo log in a user with an OAuth provider, see \nOAuth Login\n.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold a basic login object as a \ntable\n. See the \nLogging In\n section for more details.\n\n\nExample\n\n\nUsername login\n\n\nlocal\n \nfunction\n \nonUserLogin\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n-- result holds the login object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\nusername\n=\n\"tiny\"\n,\n \npassword\n=\n\"abcd1234\"\n},\n \nonUserLogin\n)\n\n\n\n\n\n\nEmail login\n\n\nlocal\n \nfunction\n \nonUserLogin\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n-- result holds the login object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\nemail\n=\n\"tina@home.com\"\n,\n \npassword\n=\n\"abcd1234\"\n},\n \nonUserLogin\n)\n\n\n\n\n\n\nget\n\n\nGet a users full data record. This method \ndoes not\n mark a \nlogin event\n for the user. See \nlogin\n.\n\n\ncore\n.\nusers\n.\nget\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the user object as a \ntable\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserGet\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n-- result holds the user object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nget\n({\nuser_id\n=\n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n},\n \nonUserGet\n)\n\n\n\n\n\n\nupdate\n\n\nUpdate a users data in the database.\n\n\n\n\nSee also: \nUpdating\n users.\n\n\n\n\ncore\n.\nusers\n.\nupdate\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nupdate\n\n\nThe user data to update as key/value pairs. See the \nUpdating\n section for detailed usage.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nOAuth Users\n\n\nTo update a users OAuth provider information, see the \nupdateAuthProvider\n method.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the updated user object as a \ntable\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserUpdate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n-- result is the updated user object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdate\n({\n\n  \nuser_id\n \n=\n \n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n,\n\n  \nupdate\n \n=\n \n{\n\n    \nemail\n \n=\n \n\"some@email.com\"\n,\n\n    \npassword\n \n=\n \n\"abcd\"\n\n  \n}\n\n\n},\n \nonUserUpdate\n)\n\n\n\n\n\n\ndelete\n\n\nDelete a users record from the \nusers\n database.\n\n\ncore\n.\nusers\n.\ndelete\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\n\n\nOAuth Users\n\n\nTo delete a users OAuth provider information, see the \nremoveAuthProvider\n method.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the records removed as a \nnumber\n. Generally a \n1\n or \n0\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserDelete\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n)\n \n-- 1 or 0\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\ndelete\n({\nuser_id\n=\n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n},\n \nonUserDelete\n)\n\n\n\n\n\n\nresendConfirmation\n\n\nResend the user confirmation email. See \nResending Confirmation\n.\n\n\ncore\n.\nusers\n.\nresendConfirmation\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the users unique identifier as a \nstring\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonResend\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n)\n \n-- result holds the users id\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nresendConfirmation\n({\n\n  \nuser_id\n=\n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n\n\n},\n \nonResend\n)\n\n\n\n\n\n\nConstants\n\n\nNULL\n\n\nUsed to remove a key from the users \nextra\n metadata (see \ncreate\n). Can only be used with the \nupdate\n method.\n\n\ncore\n.\nusers\n.\nNULL\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserUpdate\n(\n \nevt\n \n)\n\n  \n...\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdate\n({\n\n  \nuser_id\n \n=\n \n\"<user_id>\"\n,\n\n  \nupdate\n \n=\n \n{\n\n    \nextra\n \n=\n \n{\n\n      \ncolor\n \n=\n \ncore\n.\nusers\n.\nNULL\n \n--remove the `color` key\n\n    \n}\n\n  \n}\n\n\n},\n \nonUserUpdate\n)\n\n\n\n\n\n\nViewing Users\n\n\nYou can perform some simple administration and view user statistics in the \nWebmin\n.",
            "title": "Users API"
        },
        {
            "location": "/client/modules/users/api/#create",
            "text": "Create a new user, and optionally request an email confirmation.   See also:  Creating  users, and  Confirmation  using email.   core . users . create ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      username  The preferred username.  String  Y    password  The users password.  String  Y    email  The users email.  User email is required if using email confirmation.  See  confirmation  parameter below.  String  N    group  A custom string used to partition this user within the scope.  String  N    extra  A custom data table of key/value pairs to store with the user. Can be of type  String ,  Number , or  Boolean  only.  Table  N    confirmation  Parameters for  optional  email confirmation. See the  Confirmation  section for detailed usage.  Table  N      Important  Passwords are hashed before being sent to the server. Do not try to hash the password yourself.    OAuth Users  To add OAuth provider information to a user, see the  addAuthProvider  method.   Event Response  On success, the  result  will hold the created users unique identifier in the  user_id  key.  Example  local   function   onUserCreate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id )   -- holds the users id \n   end  end  core . users . create ({ \n   username = \"tiny\" ,  \n   password = \"abcd1234\"  },   onUserCreate )",
            "title": "create"
        },
        {
            "location": "/client/modules/users/api/#login",
            "text": "Retrieves the users basic data, and marks a  login event  in the  users  database.   You can log a user in with either a  username   or   email  (if the user has provided one).   See also:  Logging In  users, and  OAuth Login .   core . users . login ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params (Username Login)     Name  Description  Type  Required      username  The registered username.  String  Y    password  The users password.  String  Y     Data Params (Email Login)     Name  Description  Type  Required      email  The registered email.  String  Y    password  The users password.  String  Y      OAuth Login Parameters  To log in a user with an OAuth provider, see  OAuth Login .   Event Response  On success, the  result  will hold a basic login object as a  table . See the  Logging In  section for more details.  Example  Username login  local   function   onUserLogin (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id )   -- result holds the login object \n   end  end  core . users . login ({ username = \"tiny\" ,   password = \"abcd1234\" },   onUserLogin )   Email login  local   function   onUserLogin (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id )   -- result holds the login object \n   end  end  core . users . login ({ email = \"tina@home.com\" ,   password = \"abcd1234\" },   onUserLogin )",
            "title": "login"
        },
        {
            "location": "/client/modules/users/api/#get",
            "text": "Get a users full data record. This method  does not  mark a  login event  for the user. See  login .  core . users . get ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y     Event Response  On success, the  result  will hold the user object as a  table .  Example  local   function   onUserGet (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id )   -- result holds the user object \n   end  end  core . users . get ({ user_id = \"289bc36e-0df7-44df-99b1-a6543c6f45eb\" },   onUserGet )",
            "title": "get"
        },
        {
            "location": "/client/modules/users/api/#update",
            "text": "Update a users data in the database.   See also:  Updating  users.   core . users . update ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    update  The user data to update as key/value pairs. See the  Updating  section for detailed usage.  Table  Y      OAuth Users  To update a users OAuth provider information, see the  updateAuthProvider  method.   Event Response  On success, the  result  will hold the updated user object as a  table .  Example  local   function   onUserUpdate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id )   -- result is the updated user object \n   end  end  core . users . update ({ \n   user_id   =   \"289bc36e-0df7-44df-99b1-a6543c6f45eb\" , \n   update   =   { \n     email   =   \"some@email.com\" , \n     password   =   \"abcd\" \n   }  },   onUserUpdate )",
            "title": "update"
        },
        {
            "location": "/client/modules/users/api/#delete",
            "text": "Delete a users record from the  users  database.  core . users . delete ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y      OAuth Users  To delete a users OAuth provider information, see the  removeAuthProvider  method.   Event Response  On success, the  result  will hold the records removed as a  number . Generally a  1  or  0 .  Example  local   function   onUserDelete (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result )   -- 1 or 0 \n   end  end  core . users . delete ({ user_id = \"289bc36e-0df7-44df-99b1-a6543c6f45eb\" },   onUserDelete )",
            "title": "delete"
        },
        {
            "location": "/client/modules/users/api/#resendconfirmation",
            "text": "Resend the user confirmation email. See  Resending Confirmation .  core . users . resendConfirmation ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y     Event Response  On success, the  result  will hold the users unique identifier as a  string .  Example  local   function   onResend (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result )   -- result holds the users id \n   end  end  core . users . resendConfirmation ({ \n   user_id = \"289bc36e-0df7-44df-99b1-a6543c6f45eb\"  },   onResend )",
            "title": "resendConfirmation"
        },
        {
            "location": "/client/modules/users/api/#constants",
            "text": "",
            "title": "Constants"
        },
        {
            "location": "/client/modules/users/api/#null",
            "text": "Used to remove a key from the users  extra  metadata (see  create ). Can only be used with the  update  method.  core . users . NULL   Example  local   function   onUserUpdate (   evt   ) \n   ...  end  core . users . update ({ \n   user_id   =   \"<user_id>\" , \n   update   =   { \n     extra   =   { \n       color   =   core . users . NULL   --remove the `color` key \n     } \n   }  },   onUserUpdate )",
            "title": "NULL"
        },
        {
            "location": "/client/modules/users/api/#viewing-users",
            "text": "You can perform some simple administration and view user statistics in the  Webmin .",
            "title": "Viewing Users"
        },
        {
            "location": "/client/modules/users/oauth/",
            "text": "The OAuth API is an extension of the \nUsers API\n and provides methods to manage OAuth information for a client-side created user. \n\n\nLinking an OAuth provider allows you to log in a user with either a username and password, or OAuth credentials.\n\n\nThe main use cases for the OAuth API are \nFacebook Login\n, \nGoogle Sign-In\n, and \nDevices as Users\n.\n\n\naddAuthProvider\n\n\nLink OAuth provider information to a user.\n\n\ncore\n.\nusers\n.\naddAuthProvider\n(\nauth_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nauth_tbl\n\n\nThe auth table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nAuth Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\nauth\n\n\nTable of the provider information in key/value format (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nAuth Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nclient_id\n\n\nThe immutable ID provided by the OAuth provider.\n\n\nString\n\n\nY\n\n\n\n\n\n\naccess_token\n\n\nOAuth provider access token, if any.\n\n\nString\n\n\nN\n\n\n\n\n\n\naccess_token_expiry\n\n\nThe lifetime of the access token as a UNIX timestamp, if any.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the added provider information as a \ntable\n.\n\n\nThe returned table contains the following keys:\n\n\n\n\nclient_id\n (\nstring\n)\n\n\naccess_token\n (\nstring\n)\n\n\naccess_token_expiry\n (\nnumber\n)\n\n\naccess_token_expired\n (\nboolean\n)\n\n\nprovider\n (\nstring\n)\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \noauth_info\n \n=\n \nevt\n.\nresult\n \n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\naddAuthProvider\n({\n\n  \nuser_id\n \n=\n \n\"aad3eba3...\"\n,\n\n  \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n,\n\n  \nauth\n \n=\n \n{\n\n    \nclient_id\n \n=\n \n\"fb-id-1234\"\n,\n\n    \naccess_token\n \n=\n \n\"1234abcd\"\n,\n\n    \naccess_token_expiry\n \n=\n \n1516647155\n\n  \n}\n\n\n},\n \napiResponse\n)\n\n\n\n\n\n\ngetAuthProvider\n\n\nGet OAuth provider information for a user.\n\n\ncore\n.\nusers\n.\ngetAuthProvider\n(\nauth_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nauth_tbl\n\n\nThe auth table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nAuth Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the provider information as a \ntable\n.\n\n\nThe returned table contains the following keys\n\n\n\n\nclient_id\n (\nstring\n)\n\n\naccess_token\n (\nstring\n)\n\n\naccess_token_expiry\n (\nnumber\n)\n\n\naccess_token_expired\n (\nboolean\n)\n\n\nprovider\n (\nstring\n)\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \noauth_info\n \n=\n \nevt\n.\nresult\n \n\n    \n--maybe check for expired token\n\n    \nif\n \noauth_info\n.\naccess_token_expired\n \nthen\n\n      \n--token expired\n\n    \nelse\n\n      \n--token valid\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\ngetAuthProvider\n({\n\n  \nuser_id\n \n=\n \n\"aad3eba3...\"\n,\n\n  \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n\n\n},\n \napiResponse\n)\n\n\n\n\n\n\nupdateAuthProvider\n\n\nUpdate OAuth provider information for a user.\n\n\ncore\n.\nusers\n.\nupdateAuthProvider\n(\nauth_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nauth_tbl\n\n\nThe auth table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nAuth Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\nupdate\n\n\nA table of key/value pairs of provider information.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nThe following keys are updatable:\n\n\n\n\nclient_id\n (\nstring\n)\n\n\naccess_token\n (\nstring\n)\n\n\naccess_token_expiry\n (\nnumber\n)\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the updated provider information as a \ntable\n (see \ngetAuthProvider\n).\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \noauth_info\n \n=\n \nevt\n.\nresult\n \n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdateAuthProvider\n({\n\n  \nuser_id\n \n=\n \n\"aad3eba3...\"\n,\n\n  \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n,\n\n  \nupdate\n \n=\n \n{\n\n    \naccess_token\n \n=\n \n\"1234abcd\"\n,\n\n    \naccess_token_expiry\n \n=\n \n1516647155\n\n  \n}\n\n\n},\n \napiResponse\n)\n\n\n\n\n\n\nremoveAuthProvider\n\n\nRemove an OAuth provider from a user.\n\n\ncore\n.\nusers\n.\nremoveAuthProvider\n(\nauth_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nauth_tbl\n\n\nThe auth table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nAuth Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the \nuser_id\n key as a \nstring\n value.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \nuser_id\n \n=\n \nevt\n.\nresult\n.\nuser_id\n \n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nremoveAuthProvider\n({\n\n  \nuser_id\n \n=\n \n\"aad3eba3...\"\n,\n\n  \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n\n\n},\n \napiResponse\n)\n\n\n\n\n\n\naccessTokenExpired\n\n\nConditionally check if a users access token has expired for the specified provider.\n\n\ncore\n.\nusers\n.\naccessTokenExpired\n(\nauth_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nauth_tbl\n\n\nThe auth table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nAuth Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the \nexpired\n key as a \nboolean\n value.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nresult\n.\nexpired\n \nthen\n\n      \n--token is expired\n\n    \nelse\n\n      \n--token is valid\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\naccessTokenExpired\n({\n\n  \nuser_id\n \n=\n \n\"aad3eba3...\"\n,\n\n  \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n\n\n},\n \napiResponse\n)\n\n\n\n\n\n\nupdateTokenExpiry\n\n\nUpdate the provider token expiration time. This is a convenience method, see also \nupdateAuthProvider\n.\n\n\ncore\n.\nusers\n.\nupdateTokenExpiry\n(\nauth_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nauth_tbl\n\n\nThe auth table for the call (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nAuth Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\nY\n\n\n\n\n\n\nprovider\n\n\nThe OAuth provider constant (see \nOAuth Constants\n).\n\n\nConst\n\n\nY\n\n\n\n\n\n\nexpiry\n\n\nThe new access token expiration time as a UNIX timestamp.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\ntoken\n\n\nOptionally update the access token string as well.\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the updated provider information as a \ntable\n (see \ngetAuthProvider\n).\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \noauth_info\n \n=\n \nevt\n.\nresult\n \n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdateTokenExpiry\n({\n\n  \nuser_id\n \n=\n \n\"aad3eba3...\"\n,\n\n  \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n,\n\n  \nexpiry\n \n=\n \n1516647155\n\n\n},\n \napiResponse\n)\n\n\n\n\n\n\nOAuth Constants\n\n\nUsed for the \nprovider\n parameter in OAuth methods.\n\n\n\n\n\n\n\n\nConstant\n\n\nDescription\n\n\nSee Also\n\n\n\n\n\n\n\n\n\n\ncore.FACEBOOK\n\n\nMarks a provider as Facebook.\n\n\nFacebook Login\n\n\n\n\n\n\ncore.GOOGLE\n\n\nMarks a provider as Google.\n\n\nGoogle Sign-In\n\n\n\n\n\n\ncore.OPENUDID\n\n\nMarks a provider as OpenUDID\n\n\nDevices As Users",
            "title": "OAuth API"
        },
        {
            "location": "/client/modules/users/oauth/#addauthprovider",
            "text": "Link OAuth provider information to a user.  core . users . addAuthProvider ( auth_tbl ,   listener )   Parameters     Name  Description  Type  Required      auth_tbl  The auth table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Auth Table Keys     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y    auth  Table of the provider information in key/value format (see below).  Table  Y     Auth Table Keys     Name  Description  Type  Required      client_id  The immutable ID provided by the OAuth provider.  String  Y    access_token  OAuth provider access token, if any.  String  N    access_token_expiry  The lifetime of the access token as a UNIX timestamp, if any.  Number  N     Event Response  On success, the  result  will hold the added provider information as a  table .  The returned table contains the following keys:   client_id  ( string )  access_token  ( string )  access_token_expiry  ( number )  access_token_expired  ( boolean )  provider  ( string )   Example  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   oauth_info   =   evt . result  \n   end  end  core . users . addAuthProvider ({ \n   user_id   =   \"aad3eba3...\" , \n   provider   =   core . FACEBOOK , \n   auth   =   { \n     client_id   =   \"fb-id-1234\" , \n     access_token   =   \"1234abcd\" , \n     access_token_expiry   =   1516647155 \n   }  },   apiResponse )",
            "title": "addAuthProvider"
        },
        {
            "location": "/client/modules/users/oauth/#getauthprovider",
            "text": "Get OAuth provider information for a user.  core . users . getAuthProvider ( auth_tbl ,   listener )   Parameters     Name  Description  Type  Required      auth_tbl  The auth table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Auth Table Keys     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y     Event Response  On success, the  result  will hold the provider information as a  table .  The returned table contains the following keys   client_id  ( string )  access_token  ( string )  access_token_expiry  ( number )  access_token_expired  ( boolean )  provider  ( string )   Example  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   oauth_info   =   evt . result  \n\n     --maybe check for expired token \n     if   oauth_info . access_token_expired   then \n       --token expired \n     else \n       --token valid \n     end \n   end  end  core . users . getAuthProvider ({ \n   user_id   =   \"aad3eba3...\" , \n   provider   =   core . FACEBOOK  },   apiResponse )",
            "title": "getAuthProvider"
        },
        {
            "location": "/client/modules/users/oauth/#updateauthprovider",
            "text": "Update OAuth provider information for a user.  core . users . updateAuthProvider ( auth_tbl ,   listener )   Parameters     Name  Description  Type  Required      auth_tbl  The auth table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Auth Table Keys     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y    update  A table of key/value pairs of provider information.  Table  Y     The following keys are updatable:   client_id  ( string )  access_token  ( string )  access_token_expiry  ( number )   Event Response  On success, the  result  will hold the updated provider information as a  table  (see  getAuthProvider ).  Example  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   oauth_info   =   evt . result  \n   end  end  core . users . updateAuthProvider ({ \n   user_id   =   \"aad3eba3...\" , \n   provider   =   core . FACEBOOK , \n   update   =   { \n     access_token   =   \"1234abcd\" , \n     access_token_expiry   =   1516647155 \n   }  },   apiResponse )",
            "title": "updateAuthProvider"
        },
        {
            "location": "/client/modules/users/oauth/#removeauthprovider",
            "text": "Remove an OAuth provider from a user.  core . users . removeAuthProvider ( auth_tbl ,   listener )   Parameters     Name  Description  Type  Required      auth_tbl  The auth table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Auth Table Keys     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y     Event Response  On success, the  result  will hold the  user_id  key as a  string  value.  Example  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   user_id   =   evt . result . user_id  \n   end  end  core . users . removeAuthProvider ({ \n   user_id   =   \"aad3eba3...\" , \n   provider   =   core . FACEBOOK  },   apiResponse )",
            "title": "removeAuthProvider"
        },
        {
            "location": "/client/modules/users/oauth/#accesstokenexpired",
            "text": "Conditionally check if a users access token has expired for the specified provider.  core . users . accessTokenExpired ( auth_tbl ,   listener )   Parameters     Name  Description  Type  Required      auth_tbl  The auth table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Auth Table Keys     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y     Event Response  On success, the  result  will hold the  expired  key as a  boolean  value.  Example  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     if   evt . result . expired   then \n       --token is expired \n     else \n       --token is valid \n     end \n   end  end  core . users . accessTokenExpired ({ \n   user_id   =   \"aad3eba3...\" , \n   provider   =   core . FACEBOOK  },   apiResponse )",
            "title": "accessTokenExpired"
        },
        {
            "location": "/client/modules/users/oauth/#updatetokenexpiry",
            "text": "Update the provider token expiration time. This is a convenience method, see also  updateAuthProvider .  core . users . updateTokenExpiry ( auth_tbl ,   listener )   Parameters     Name  Description  Type  Required      auth_tbl  The auth table for the call (see below).  Table  Y    listener  The api listener callback function.  Function  Y     Auth Table Keys     Name  Description  Type  Required      user_id  The users unique identifier.  String  Y    provider  The OAuth provider constant (see  OAuth Constants ).  Const  Y    expiry  The new access token expiration time as a UNIX timestamp.  Number  Y    token  Optionally update the access token string as well.  String  N     Event Response  On success, the  result  will hold the updated provider information as a  table  (see  getAuthProvider ).  Example  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   oauth_info   =   evt . result  \n   end  end  core . users . updateTokenExpiry ({ \n   user_id   =   \"aad3eba3...\" , \n   provider   =   core . FACEBOOK , \n   expiry   =   1516647155  },   apiResponse )",
            "title": "updateTokenExpiry"
        },
        {
            "location": "/client/modules/users/oauth/#oauth-constants",
            "text": "Used for the  provider  parameter in OAuth methods.     Constant  Description  See Also      core.FACEBOOK  Marks a provider as Facebook.  Facebook Login    core.GOOGLE  Marks a provider as Google.  Google Sign-In    core.OPENUDID  Marks a provider as OpenUDID  Devices As Users",
            "title": "OAuth Constants"
        },
        {
            "location": "/client/modules/users/creating/",
            "text": "What follows are a number of different user creation styles and example code.\n\n\nBasic\n\n\nTo create a user without email confirmation, a minimum of a \nusername\n and \npassword\n is required.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserCreate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\ncreate\n({\n\n  \nusername\n \n=\n \n\"Donna\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n\n\n},\n \nonUserCreate\n)\n\n\n\n\n\n\nYou can optionally add an \nemail\n address:\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserCreate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\ncreate\n({\n\n  \nusername\n \n=\n \n\"Donna\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n,\n\n  \nemail\n \n=\n \n\"me@home.com\"\n\n\n},\n \nonUserCreate\n)\n\n\n\n\n\n\nBasic w/ Extra\n\n\nWhen creating a user, you can optionally add an \nextra\n table of metadata to associate with the user. The \nextra\n table can only contain \nString\n, \nNumber\n, and \nBoolean\n data types.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserCreate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\ncreate\n({\n\n  \nusername\n \n=\n \n\"Donna\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n\n  \nextra\n \n=\n \n{\n\n    \ncolor\n \n=\n \n\"Blue\"\n,\n\n    \nage\n \n=\n \n24\n,\n\n    \nwinner\n \n=\n \ntrue\n\n  \n}\n\n\n},\n \nonUserCreate\n)\n\n\n\n\n\n\nEmail Confirmation\n\n\nTo send an email confirmation the \nemail\n and \nconfirmation\n keys are required. See the \nConfirmation\n section for more information.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserCreate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\ncreate\n({\n\n  \nusername\n \n=\n \n\"Donna\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n,\n\n  \nemail\n \n=\n \n\"me@home.com\"\n,\n\n  \nconfirmation\n \n=\n \n{\n\n    \nfrom_email\n \n=\n \n\"app@domain.com\"\n,\n\n    \nsubject\n \n=\n \n\"Thanks for signing up!\"\n\n  \n}\n\n\n},\n \nonUserCreate\n)\n\n\n\n\n\n\nResponse Event\n\n\nWhen creating a user with email confirmation, the response \nresult\n will be a table containing the newly registered users \nuser_id\n, and a \nconfirmation\n key.\n\n\nThe \nconfirmation\n key will contain the email sent state as a string with a value of 'pending' on success, or 'failed' otherwise.\n\n\nWith OAuth Provider\n\n\nYou can add OAuth provider information (using the Facebook login for example) after the user has been created, by using the \naddAuthProvider\n method.\n\n\nExample\n\n\n-- First gather the client_id, access_token, etc. from the Facebook login.\n\n\n\n--A method to call after user has been created\n\n\nlocal\n \nfunction\n \naddOAuthInfo\n(\nuser_id\n)\n\n\n  \n--== Link auth provider to the user\n\n  \nlocal\n \nfunction\n \nonAuthAdded\n(\n \nevt\n \n)\n\n    \nif\n \nevt\n.\nerror\n \nthen\n\n      \nprint\n(\nevt\n.\nerror\n)\n\n    \nelse\n\n      \nprint\n(\n\"Auth provider has been added!\"\n)\n\n    \nend\n\n  \nend\n\n\n  \ncore\n.\nusers\n.\naddAuthProvider\n({\n\n    \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n,\n\n    \nclient_id\n \n=\n \nfb\n.\nclient_id\n,\n\n    \naccess_token\n \n=\n \nfb\n.\naccess_token\n,\n\n    \naccess_token_expiry\n \n=\n \nfb\n.\naccess_token_expiration\n\n  \n},\n \nonAuthAdded\n)\n\n\nend\n\n\n\n--== Create the user\n\n\nlocal\n \nfunction\n \nonUserCreated\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \n--we have a successful user creation\n\n    \naddOAuthInfo\n(\nevt\n.\nresult\n.\nuser_id\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\ncreate\n({\n\n  \nusername\n \n=\n \n'Timmy'\n,\n\n  \npassword\n \n=\n \n'1234'\n,\n\n  \nemail\n \n=\n \n'my@email.com'\n,\n\n  \ngroup\n \n=\n \n'cadets'\n,\n\n  \nextra\n \n=\n \n{\n\n    \ncolor\n \n=\n \n'blue'\n\n  \n}\n\n\n},\n \nonUserCreated\n)\n\n\n\n\n\n\nYou can now log in the user normally, with \nusername\n and \npassword\n or using the OAuth information (see \nOAuth Login\n).\n\n\nDevices As Users\n\n\nIf you don't plan on having traditional users for your app, there is still an interesting use case for using the actual device as the user. This allows one to capture additional statistics that can be viewed in the \nWebmin\n.\n\n\nWhile the \nappOpened\n analytics method tracks each time an application is opened on a device, it doesn't capture how many unique devices are actually running the app. \n\n\nBy co-opting the user system, we can track how many unique devices have \"joined\" your app, as well as, how many times a specific device has \"logged\" in to your app.\n\n\nThis also opens up the ability to store meta data specific to a device \"user\", or provide time limited \"tokens\" that can trigger special events.\n\n\nRegister a Device\n\n\nTo use a device as a user, we can use the \nOpenUDID Plugin\n provided freely by \nCorona\n for iOS. \n\n\nFor Android we can use the Corona method \nsystem.getInfo(\"deviceID\")\n (see below for how to get a consistent \nAndroid UDID\n). We then use the device ID as our OAuth client ID. \n\n\nWe'll also need to create a server-side API method to login/register the device from the client-side. See the server-side \nAPI\n documentation for more information on creating server-side APIs.\n\n\nServer-Side API Module\n\n\nThe following module and method will attempt to login the \"device\" or register it into the user system.\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ncheckInDevice\n(\ninput\n,\n \nscope\n)\n\n\n  \nlocal\n \nudid\n \n=\n \ninput\n.\nudid\n\n  \nlocal\n \nuser_id\n \n=\n \nnil\n\n\n  \n--first check if a device ID exists by trying to log in\n\n  \nlocal\n \nres\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\nlogin\n({\n\n    \nclient_id\n \n=\n \nudid\n,\n\n    \nprovider\n \n=\n \ncore\n.\nOPENUDID\n,\n\n    \nscope\n \n=\n \nscope\n\n  \n})\n\n\n  \nif\n \nnot\n \nres\n \nthen\n\n    \n--a \"user\" with this udid does not\n\n    \n--exist, so create an anonymous one\n\n    \nuser_id\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\nregister\n(\nnil\n,\n \nnil\n,\n \nscope\n,\n \n{\n\n      \nmeta\n \n=\n \n{\n\n        \ndevice_id\n \n=\n \nudid\n,\n\n        \ngroup\n \n=\n \n'device'\n,\n\n        \nlogin\n \n=\n \ntrue\n \n--mark this as a login event also\n\n      \n}\n\n    \n})\n\n    \n--check for error\n\n    \nif\n \nnot\n \nuser_id\n \nthen\n\n      \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n    \nend\n\n\n    \n--link the device \"user\" to an OPENUDID auth provider\n\n    \nlocal\n \noauth\n,\n \nerr\n \n=\n \ncore\n.\nusers\n.\naddAuthProvider\n(\nuser_id\n,\n \ncore\n.\nOPENUDID\n,\n \n{\n\n      \nclient_id\n \n=\n \nudid\n\n    \n})\n\n    \n--check for error\n\n    \nif\n \nnot\n \noauth\n \nthen\n\n      \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n    \nend\n\n\n    \n--device \"user\" has been registered, pass a creation flag\n\n    \nreturn\n \n\"created\"\n\n\n  \nelse\n\n    \n--OR we successfully logged in, pass back the device \"user\" data\n\n    \nreturn\n \nres\n\n  \nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nClient Side Usage\n\n\nNow each time our application opens we call the \ncheckInDevice\n server-side method at which point we will start to gather statistics about each device \"join\" and \"login\" events that can be viewed in the \nWebmin\n.\n\n\n-- require the OpenUDID plugin\n\n\nlocal\n \nopenudid\n \n=\n \nrequire\n(\n\"plugin.openudid\"\n)\n\n\nlocal\n \ncore\n \n=\n \nrequire\n(\n\"plugin.coronium-core\"\n)\n\n\n\n--========================================\n\n\n--== Coronium intialization goes here\n\n\n--========================================\n\n\n\nlocal\n \nudid\n\n\nlocal\n \nplatform\n \n=\n \nsystem\n.\ngetInfo\n(\n\"platform\"\n)\n\n\n\nif\n \nplatform\n \n==\n \n'ios'\n \nthen\n\n  \nudid\n \n=\n \nopenudid\n.\ngetValue\n()\n\n\nelseif\n \nplatform\n \n==\n \n'android'\n \nthen\n\n  \nudid\n \n=\n \nsystem\n.\ngetInfo\n(\n\"deviceID\"\n)\n \n--== See Android UDID notes below\n\n\nend\n\n\n\n--== Set up the response listener\n\n\nlocal\n \nfunction\n \nonDeviceCheckIn\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"Device checked in\"\n)\n\n    \n--optionally get the device record\n\n    \nif\n \nevt\n.\nresult\n \n~=\n \n\"created\"\n \nthen\n\n      \nlocal\n \ndevice_record\n \n=\n \nevt\n.\nresult\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n--== Check-in the device\n\n\ncore\n.\napi\n.\ncheckInDevice\n({\n\n  \nudid\n \n=\n \nudid\n\n\n},\n \nonDeviceCheckIn\n)\n\n\n\n\n\n\nSee also \nCustom API Init\n.\n\n\nAndroid UDID\n\n\nTo make sure you get a consistent Android UDID see the \nsystem.getInfo(\"deviceID\")\n Corona documentation on the subject.",
            "title": "Creating"
        },
        {
            "location": "/client/modules/users/creating/#basic",
            "text": "To create a user without email confirmation, a minimum of a  username  and  password  is required.  Example  local   function   onUserCreate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id ) \n   end  end  core . users . create ({ \n   username   =   \"Donna\" , \n   password   =   \"1234\"  },   onUserCreate )   You can optionally add an  email  address:  Example  local   function   onUserCreate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id ) \n   end  end  core . users . create ({ \n   username   =   \"Donna\" , \n   password   =   \"1234\" , \n   email   =   \"me@home.com\"  },   onUserCreate )",
            "title": "Basic"
        },
        {
            "location": "/client/modules/users/creating/#basic-w-extra",
            "text": "When creating a user, you can optionally add an  extra  table of metadata to associate with the user. The  extra  table can only contain  String ,  Number , and  Boolean  data types.  Example  local   function   onUserCreate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id ) \n   end  end  core . users . create ({ \n   username   =   \"Donna\" , \n   password   =   \"1234\" \n   extra   =   { \n     color   =   \"Blue\" , \n     age   =   24 , \n     winner   =   true \n   }  },   onUserCreate )",
            "title": "Basic w/ Extra"
        },
        {
            "location": "/client/modules/users/creating/#email-confirmation",
            "text": "To send an email confirmation the  email  and  confirmation  keys are required. See the  Confirmation  section for more information.  Example  local   function   onUserCreate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id ) \n   end  end  core . users . create ({ \n   username   =   \"Donna\" , \n   password   =   \"1234\" , \n   email   =   \"me@home.com\" , \n   confirmation   =   { \n     from_email   =   \"app@domain.com\" , \n     subject   =   \"Thanks for signing up!\" \n   }  },   onUserCreate )",
            "title": "Email Confirmation"
        },
        {
            "location": "/client/modules/users/creating/#response-event",
            "text": "When creating a user with email confirmation, the response  result  will be a table containing the newly registered users  user_id , and a  confirmation  key.  The  confirmation  key will contain the email sent state as a string with a value of 'pending' on success, or 'failed' otherwise.",
            "title": "Response Event"
        },
        {
            "location": "/client/modules/users/creating/#with-oauth-provider",
            "text": "You can add OAuth provider information (using the Facebook login for example) after the user has been created, by using the  addAuthProvider  method.  Example  -- First gather the client_id, access_token, etc. from the Facebook login.  --A method to call after user has been created  local   function   addOAuthInfo ( user_id ) \n\n   --== Link auth provider to the user \n   local   function   onAuthAdded (   evt   ) \n     if   evt . error   then \n       print ( evt . error ) \n     else \n       print ( \"Auth provider has been added!\" ) \n     end \n   end \n\n   core . users . addAuthProvider ({ \n     provider   =   core . FACEBOOK , \n     client_id   =   fb . client_id , \n     access_token   =   fb . access_token , \n     access_token_expiry   =   fb . access_token_expiration \n   },   onAuthAdded )  end  --== Create the user  local   function   onUserCreated (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     --we have a successful user creation \n     addOAuthInfo ( evt . result . user_id ) \n   end  end  core . users . create ({ \n   username   =   'Timmy' , \n   password   =   '1234' , \n   email   =   'my@email.com' , \n   group   =   'cadets' , \n   extra   =   { \n     color   =   'blue' \n   }  },   onUserCreated )   You can now log in the user normally, with  username  and  password  or using the OAuth information (see  OAuth Login ).",
            "title": "With OAuth Provider"
        },
        {
            "location": "/client/modules/users/creating/#devices-as-users",
            "text": "If you don't plan on having traditional users for your app, there is still an interesting use case for using the actual device as the user. This allows one to capture additional statistics that can be viewed in the  Webmin .  While the  appOpened  analytics method tracks each time an application is opened on a device, it doesn't capture how many unique devices are actually running the app.   By co-opting the user system, we can track how many unique devices have \"joined\" your app, as well as, how many times a specific device has \"logged\" in to your app.  This also opens up the ability to store meta data specific to a device \"user\", or provide time limited \"tokens\" that can trigger special events.",
            "title": "Devices As Users"
        },
        {
            "location": "/client/modules/users/creating/#register-a-device",
            "text": "To use a device as a user, we can use the  OpenUDID Plugin  provided freely by  Corona  for iOS.   For Android we can use the Corona method  system.getInfo(\"deviceID\")  (see below for how to get a consistent  Android UDID ). We then use the device ID as our OAuth client ID.   We'll also need to create a server-side API method to login/register the device from the client-side. See the server-side  API  documentation for more information on creating server-side APIs.  Server-Side API Module  The following module and method will attempt to login the \"device\" or register it into the user system.  local   api   =   core . api ()  function   api . checkInDevice ( input ,   scope ) \n\n   local   udid   =   input . udid \n   local   user_id   =   nil \n\n   --first check if a device ID exists by trying to log in \n   local   res ,   err   =   core . users . login ({ \n     client_id   =   udid , \n     provider   =   core . OPENUDID , \n     scope   =   scope \n   }) \n\n   if   not   res   then \n     --a \"user\" with this udid does not \n     --exist, so create an anonymous one \n     user_id ,   err   =   core . users . register ( nil ,   nil ,   scope ,   { \n       meta   =   { \n         device_id   =   udid , \n         group   =   'device' , \n         login   =   true   --mark this as a login event also \n       } \n     }) \n     --check for error \n     if   not   user_id   then \n       return   core . error ( err ) \n     end \n\n     --link the device \"user\" to an OPENUDID auth provider \n     local   oauth ,   err   =   core . users . addAuthProvider ( user_id ,   core . OPENUDID ,   { \n       client_id   =   udid \n     }) \n     --check for error \n     if   not   oauth   then \n       return   core . error ( err ) \n     end \n\n     --device \"user\" has been registered, pass a creation flag \n     return   \"created\" \n\n   else \n     --OR we successfully logged in, pass back the device \"user\" data \n     return   res \n   end  return   api",
            "title": "Register a Device"
        },
        {
            "location": "/client/modules/users/creating/#client-side-usage",
            "text": "Now each time our application opens we call the  checkInDevice  server-side method at which point we will start to gather statistics about each device \"join\" and \"login\" events that can be viewed in the  Webmin .  -- require the OpenUDID plugin  local   openudid   =   require ( \"plugin.openudid\" )  local   core   =   require ( \"plugin.coronium-core\" )  --========================================  --== Coronium intialization goes here  --========================================  local   udid  local   platform   =   system . getInfo ( \"platform\" )  if   platform   ==   'ios'   then \n   udid   =   openudid . getValue ()  elseif   platform   ==   'android'   then \n   udid   =   system . getInfo ( \"deviceID\" )   --== See Android UDID notes below  end  --== Set up the response listener  local   function   onDeviceCheckIn (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"Device checked in\" ) \n     --optionally get the device record \n     if   evt . result   ~=   \"created\"   then \n       local   device_record   =   evt . result \n     end \n   end  end  --== Check-in the device  core . api . checkInDevice ({ \n   udid   =   udid  },   onDeviceCheckIn )   See also  Custom API Init .",
            "title": "Client Side Usage"
        },
        {
            "location": "/client/modules/users/creating/#android-udid",
            "text": "To make sure you get a consistent Android UDID see the  system.getInfo(\"deviceID\")  Corona documentation on the subject.",
            "title": "Android UDID"
        },
        {
            "location": "/client/modules/users/updating/",
            "text": "To update a users data, you must pass a \nuser_id\n and an \nupdate\n table with the values you wish to update. On a successful update, you will recieve the newly updated record in the event response.\n\n\n\n\nNote\n\n\nYou can update multiple values in the update table of the method.\n\n\n\n\nThe following keys can be updated on the users record:\n\n\n\n\nusername\n (\nstring\n)\n\n\npassword\n (\nstring\n)\n\n\nemail\n (\nstring\n)\n\n\ngroup\n (\nstring\n)\n\n\nextra\n (\ntable\n)\n\n\nactive\n (\nboolean\n)\n\n\n\n\n\n\nOAuth Users\n\n\nTo update a users OAuth provider information, see the \nupdateAuthProvider\n method.\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserUpdate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n--result contains updated object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdate\n({\n\n  \nuser_id\n \n=\n \n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n,\n\n  \nupdate\n \n=\n \n{\n\n    \nemail\n \n=\n \n\"app@email.com\"\n\n  \n}\n\n\n},\n \nonUserUpdate\n)\n\n\n\n\n\n\nUsername\n\n\nTo update a users name, pass the \nusername\n key to the \nupdate\n table. If a user with the same name already exists in the same application scope, the record will not be updated and an error will be returned with a status of 600.\n\n\nlocal\n \nfunction\n \nonUserUpdate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nif\n \nevt\n.\nstatus\n \n==\n \n600\n \nthen\n\n      \n--user exists, handle appropriately\n\n    \nelse\n\n      \nprint\n(\nevt\n.\nerror\n)\n\n    \nend\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdate\n({\n\n  \nuser_id\n \n=\n \n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n,\n\n  \nupdate\n \n=\n \n{\n\n    \nusername\n \n=\n \n\"Sammy\"\n\n  \n}\n\n\n},\n \nonUserUpdate\n)\n\n\n\n\n\n\nPassword\n\n\nTo update a users password, pass the \npassword\n key to the \nupdate\n table. \n\n\n\n\nImportant\n\n\nPasswords are automatically hashed, do not hash the password yourself.\n\n\n\n\nlocal\n \nfunction\n \nonUserUpdate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdate\n({\n\n  \nuser_id\n \n=\n \n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n,\n\n  \nupdate\n \n=\n \n{\n\n    \npassword\n \n=\n \n\"abcd\"\n\n  \n}\n\n\n},\n \nonUserUpdate\n)\n\n\n\n\n\n\nExtra Metadata\n\n\nTo add, update, or remove a users \"extra\" metadata, pass the \nextra\n table to the \nupdate\n table.\n\n\n\n\nTip\n\n\nYou can add, update, and remove multiple keys in the same call.\n\n\n\n\nUpdate/Add Key\n\n\nlocal\n \nfunction\n \nonUserUpdate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdate\n({\n\n  \nuser_id\n \n=\n \n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n,\n\n  \nupdate\n \n=\n \n{\n\n    \nextra\n \n=\n \n{\n\n      \ncolor\n \n=\n \n\"Red\"\n,\n\n      \nwinner\n \n=\n \ntrue\n\n    \n}\n\n  \n}\n\n\n},\n \nonUserUpdate\n)\n\n\n\n\n\n\nRemoving a Key\n\n\nTo clear and remove a key from the users \"extra\" metadata, you must pass the \ncore.users.NULL\n constant to the key.\n\n\nlocal\n \nfunction\n \nonUserUpdate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdate\n({\n\n  \nuser_id\n \n=\n \n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n,\n\n  \nupdate\n \n=\n \n{\n\n    \nextra\n \n=\n \n{\n\n      \nwinner\n \n=\n \ncore\n.\nusers\n.\nNULL\n \n--remove 'winner' key\n\n    \n}\n\n  \n}\n\n\n},\n \nonUserUpdate\n)\n\n\n\n\n\n\nActive State\n\n\nTo change the \"active\" status of a user, pass the \nactive\n key as a boolean value.\n\n\nlocal\n \nfunction\n \nonUserUpdate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nupdate\n({\n\n  \nuser_id\n \n=\n \n\"289bc36e-0df7-44df-99b1-a6543c6f45eb\"\n,\n\n  \nupdate\n \n=\n \n{\n\n    \nactive\n \n=\n \nfalse\n\n  \n}\n\n\n},\n \nonUserUpdate\n)",
            "title": "Updating"
        },
        {
            "location": "/client/modules/users/updating/#username",
            "text": "To update a users name, pass the  username  key to the  update  table. If a user with the same name already exists in the same application scope, the record will not be updated and an error will be returned with a status of 600.  local   function   onUserUpdate (   evt   ) \n   if   evt . error   then \n     if   evt . status   ==   600   then \n       --user exists, handle appropriately \n     else \n       print ( evt . error ) \n     end \n   else \n     print ( evt . result . user_id ) \n   end  end  core . users . update ({ \n   user_id   =   \"289bc36e-0df7-44df-99b1-a6543c6f45eb\" , \n   update   =   { \n     username   =   \"Sammy\" \n   }  },   onUserUpdate )",
            "title": "Username"
        },
        {
            "location": "/client/modules/users/updating/#password",
            "text": "To update a users password, pass the  password  key to the  update  table.    Important  Passwords are automatically hashed, do not hash the password yourself.   local   function   onUserUpdate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id ) \n   end  end  core . users . update ({ \n   user_id   =   \"289bc36e-0df7-44df-99b1-a6543c6f45eb\" , \n   update   =   { \n     password   =   \"abcd\" \n   }  },   onUserUpdate )",
            "title": "Password"
        },
        {
            "location": "/client/modules/users/updating/#extra-metadata",
            "text": "To add, update, or remove a users \"extra\" metadata, pass the  extra  table to the  update  table.   Tip  You can add, update, and remove multiple keys in the same call.",
            "title": "Extra Metadata"
        },
        {
            "location": "/client/modules/users/updating/#updateadd-key",
            "text": "local   function   onUserUpdate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id ) \n   end  end  core . users . update ({ \n   user_id   =   \"289bc36e-0df7-44df-99b1-a6543c6f45eb\" , \n   update   =   { \n     extra   =   { \n       color   =   \"Red\" , \n       winner   =   true \n     } \n   }  },   onUserUpdate )",
            "title": "Update/Add Key"
        },
        {
            "location": "/client/modules/users/updating/#removing-a-key",
            "text": "To clear and remove a key from the users \"extra\" metadata, you must pass the  core.users.NULL  constant to the key.  local   function   onUserUpdate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id ) \n   end  end  core . users . update ({ \n   user_id   =   \"289bc36e-0df7-44df-99b1-a6543c6f45eb\" , \n   update   =   { \n     extra   =   { \n       winner   =   core . users . NULL   --remove 'winner' key \n     } \n   }  },   onUserUpdate )",
            "title": "Removing a Key"
        },
        {
            "location": "/client/modules/users/updating/#active-state",
            "text": "To change the \"active\" status of a user, pass the  active  key as a boolean value.  local   function   onUserUpdate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result ) \n   end  end  core . users . update ({ \n   user_id   =   \"289bc36e-0df7-44df-99b1-a6543c6f45eb\" , \n   update   =   { \n     active   =   false \n   }  },   onUserUpdate )",
            "title": "Active State"
        },
        {
            "location": "/client/modules/users/login/",
            "text": "Once a user has been registered in the system, you can log them in to your application by using the \nlogin\n method. A \"login\" provides you with the users basic information and state, allowing you to work with the user. \n\n\nIn addition, a successful login of an active user marks a special login event to help track your application logins per user, which can be viewed in the \nWebmin user section\n.\n\n\nYou can log a user in with either a \nusername\n \nor\n \nemail\n (if the user has provided one).\n\n\nLogin Object\n\n\nOn a successful log in, the \nresult\n will hold a basic login object as a \ntable\n, with the following keys:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nactive\n\n\nWhether the user is in an active state.\n\n\nBoolean\n\n\n\n\n\n\nconfirmation\n\n\nIf using email confirmation, will hold sent status.\n\n\nString\n or \nNil\n\n\n\n\n\n\nemail\n\n\nThe email address associated with the user, if any.\n\n\nString\n or \nNil\n\n\n\n\n\n\ngroup\n\n\nThe user group this user belongs to, if any.\n\n\nString\n\n\n\n\n\n\nextra\n\n\nAny extra meta data associated with the user, if any.\n\n\nTable\n or \nNil\n\n\n\n\n\n\noauth\n\n\nIf logged in using an OAuth provider, will contain provider information.\n\n\nTable\n or \nNil\n\n\n\n\n\n\nscope\n\n\nThe application scope for this user.\n\n\nString\n\n\n\n\n\n\nuser_id\n\n\nThe users unique identifier.\n\n\nString\n\n\n\n\n\n\nusername\n\n\nThe users chosen username.\n\n\nString\n\n\n\n\n\n\nvalidated\n\n\nWhether the user is active and confirmed (if using email confirmation).\n\n\nBoolean\n\n\n\n\n\n\n\n\nExample\n\n\nUsername login\n\n\nlocal\n \nfunction\n \nonUserLogin\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n--result is a login object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\n\n  \nusername\n \n=\n \n\"Donna\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n\n\n},\n \nonUserLogin\n)\n\n\n\n\n\n\nEmail login\n\n\nlocal\n \nfunction\n \nonUserLogin\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n--result is a login object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\n\n  \nemail\n \n=\n \n\"tina@home.com\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n\n\n},\n \nonUserLogin\n)\n\n\n\n\n\n\nOAuth Login\n\n\nIf you want to login a user that you have linked with an OAuth provider, you can log them in with different parameters. See \naddAuthProvider\n for information on adding a provider.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserLogin\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n--result is a login object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\n\n  \nclient_id\n \n=\n \n\"fb-id-1234abcd\"\n,\n\n  \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n\n\n},\n \nonUserLogin\n)\n\n\n\n\n\n\nOn a successful login, you will have a additional key in the user record called \noauth\n with the provider information as a \ntable\n.\n\n\nThe \noauth\n table will contain the following keys:\n\n\n\n\nclient_id\n (\nstring\n)\n\n\naccess_token\n (\nstring\n)\n\n\naccess_token_expiry\n (\nnumber\n)\n\n\naccess_token_expired\n (\nboolean\n)\n\n\nprovider\n (\nstring\n)\n\n\n\n\nThe access token expiration is calculated on the server-side. You can check if the access token is expired on login like so:\n\n\nlocal\n \nonLogIn\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \nuser\n \n=\n \nevt\n.\nresult\n\n\n    \nif\n \nuser\n.\noauth\n.\naccess_token_expired\n \nthen\n\n      \n--token expired\n\n    \nelse\n\n      \n--token valid\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\n\n  \nclient_id\n \n=\n \n\"fb-id-1234abcd\"\n,\n\n  \nprovider\n \n=\n \ncore\n.\nFACEBOOK\n\n\n},\n \nonLogIn\n)\n\n\n\n\n\n\nSee also the \naccessTokenExpired\n and \nupdateTokenExpiry\n methods.\n\n\nChecking State\n\n\nUsing the various \"state\" keys returned with the login object, you can determine the status of a user and make decisions in your application logic accordingly. \n\n\nvalidated\n\n\nThe \nvalidated\n key is a convenience state that allows you to check if the user is in both an \"active\" and \"confirmed\" state (if using email confirmation). You can use this value to quickly validate a user for access to your application.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserLogin\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nresult\n.\nvalidated\n \nthen\n\n      \n--user is cleared for application usage\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\n\n  \nusername\n \n=\n \n\"Donna\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n\n\n},\n \nonUserLogin\n)\n\n\n\n\n\n\nactive\n\n\nTo check if the user is in an \"active\" state, you can check the \nactive\n key. If using email confirmation, a user will not be active until the confirmation has been acknowledged.\n\n\nThe active state allows you to mark a user disabled or enabled. You can change the active state of a user using the \nupdate\n method.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserLogin\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nresult\n.\nactive\n \nthen\n\n      \n--user is in an active state \n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\n\n  \nusername\n \n=\n \n\"Donna\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n\n\n},\n \nonUserLogin\n)\n\n\n\n\n\n\n\n\nNote\n\n\nWhile you can log in an \"inactive\" user, a login event \nis not\n stored.\n\n\n\n\nconfirmation\n\n\nWhen using email confirmation, the login object will contain a \nconfirmation\n key with the sent status of the confirmation email. \n\n\nThe key will contain a string value of either 'pending' if the email was sent successfully, or 'failed' on error. If the user has already acknowledged the confirmation email this key will be \nNil\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUserLogin\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \nconfirm\n \n=\n \nevt\n.\nresult\n.\nconfirmation\n\n    \nif\n \nconfirm\n \nand\n \nconfirm\n.\nconfirmation\n \n==\n \n'pending'\n \nthen\n\n      \n--confirmation email was sent successfully, but not ackowledged\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\nlogin\n({\n\n  \nusername\n \n=\n \n\"Donna\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n\n\n},\n \nonUserLogin\n)\n\n\n\n\n\n\nLogging Out\n\n\nThe login functionality itself does nothing special as far as setting any type of \"token\" or similar. Because of this, there is no special \"logout\" functionality. You as the developer determine when a user is logged out of your application.",
            "title": "Logging In"
        },
        {
            "location": "/client/modules/users/login/#login-object",
            "text": "On a successful log in, the  result  will hold a basic login object as a  table , with the following keys:     Name  Description  Type      active  Whether the user is in an active state.  Boolean    confirmation  If using email confirmation, will hold sent status.  String  or  Nil    email  The email address associated with the user, if any.  String  or  Nil    group  The user group this user belongs to, if any.  String    extra  Any extra meta data associated with the user, if any.  Table  or  Nil    oauth  If logged in using an OAuth provider, will contain provider information.  Table  or  Nil    scope  The application scope for this user.  String    user_id  The users unique identifier.  String    username  The users chosen username.  String    validated  Whether the user is active and confirmed (if using email confirmation).  Boolean     Example  Username login  local   function   onUserLogin (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id )   --result is a login object \n   end  end  core . users . login ({ \n   username   =   \"Donna\" , \n   password   =   \"1234\"  },   onUserLogin )   Email login  local   function   onUserLogin (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id )   --result is a login object \n   end  end  core . users . login ({ \n   email   =   \"tina@home.com\" , \n   password   =   \"1234\"  },   onUserLogin )",
            "title": "Login Object"
        },
        {
            "location": "/client/modules/users/login/#oauth-login",
            "text": "If you want to login a user that you have linked with an OAuth provider, you can log them in with different parameters. See  addAuthProvider  for information on adding a provider.  Example  local   function   onUserLogin (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . user_id )   --result is a login object \n   end  end  core . users . login ({ \n   client_id   =   \"fb-id-1234abcd\" , \n   provider   =   core . FACEBOOK  },   onUserLogin )   On a successful login, you will have a additional key in the user record called  oauth  with the provider information as a  table .  The  oauth  table will contain the following keys:   client_id  ( string )  access_token  ( string )  access_token_expiry  ( number )  access_token_expired  ( boolean )  provider  ( string )   The access token expiration is calculated on the server-side. You can check if the access token is expired on login like so:  local   onLogIn (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   user   =   evt . result \n\n     if   user . oauth . access_token_expired   then \n       --token expired \n     else \n       --token valid \n     end \n   end  end  core . users . login ({ \n   client_id   =   \"fb-id-1234abcd\" , \n   provider   =   core . FACEBOOK  },   onLogIn )   See also the  accessTokenExpired  and  updateTokenExpiry  methods.",
            "title": "OAuth Login"
        },
        {
            "location": "/client/modules/users/login/#checking-state",
            "text": "Using the various \"state\" keys returned with the login object, you can determine the status of a user and make decisions in your application logic accordingly.",
            "title": "Checking State"
        },
        {
            "location": "/client/modules/users/login/#validated",
            "text": "The  validated  key is a convenience state that allows you to check if the user is in both an \"active\" and \"confirmed\" state (if using email confirmation). You can use this value to quickly validate a user for access to your application.  Example  local   function   onUserLogin (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     if   evt . result . validated   then \n       --user is cleared for application usage \n     end \n   end  end  core . users . login ({ \n   username   =   \"Donna\" , \n   password   =   \"1234\"  },   onUserLogin )",
            "title": "validated"
        },
        {
            "location": "/client/modules/users/login/#active",
            "text": "To check if the user is in an \"active\" state, you can check the  active  key. If using email confirmation, a user will not be active until the confirmation has been acknowledged.  The active state allows you to mark a user disabled or enabled. You can change the active state of a user using the  update  method.  Example  local   function   onUserLogin (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     if   evt . result . active   then \n       --user is in an active state  \n     end \n   end  end  core . users . login ({ \n   username   =   \"Donna\" , \n   password   =   \"1234\"  },   onUserLogin )    Note  While you can log in an \"inactive\" user, a login event  is not  stored.",
            "title": "active"
        },
        {
            "location": "/client/modules/users/login/#confirmation",
            "text": "When using email confirmation, the login object will contain a  confirmation  key with the sent status of the confirmation email.   The key will contain a string value of either 'pending' if the email was sent successfully, or 'failed' on error. If the user has already acknowledged the confirmation email this key will be  Nil .  Example  local   function   onUserLogin (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     local   confirm   =   evt . result . confirmation \n     if   confirm   and   confirm . confirmation   ==   'pending'   then \n       --confirmation email was sent successfully, but not ackowledged \n     end \n   end  end  core . users . login ({ \n   username   =   \"Donna\" , \n   password   =   \"1234\"  },   onUserLogin )",
            "title": "confirmation"
        },
        {
            "location": "/client/modules/users/login/#logging-out",
            "text": "The login functionality itself does nothing special as far as setting any type of \"token\" or similar. Because of this, there is no special \"logout\" functionality. You as the developer determine when a user is logged out of your application.",
            "title": "Logging Out"
        },
        {
            "location": "/client/modules/users/confirmation/",
            "text": "You can \noptionally\n require a user to confirm their registration via email by using the email confirmation feature of the \nUsers\n module.\n\n\nWhen a confirmation email is sent, the user is put into a \"pending\" state. You can view \nPending Users\n in the \nUsers\n section of the \nWebmin\n.\n\n\n\n\nMailgun Account Required\n\n\nA valid \nMailgun\n account and the proper configuration must be set up to use the email confirmation feature. See the \nMailgun Config\n section for more information.\n\n\n\n\nConfirmation Table\n\n\nWhen using the confirmation feature, the following parameters can be supplied in the \nconfirmation\n table. Not all parameters are required.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfrom_email\n\n\nThe senders email address. This is usually your address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nsubject\n\n\nThe registration email subject line.\n\n\nString\n\n\nY\n\n\n\n\n\n\nemail_tpl\n\n\nIdentifier for a custom registration email template.\n\n\nString\n\n\nN\n\n\n\n\n\n\ntpl_keys\n\n\nAdditional template keys for the registration email template.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nClient-Side Example\n\n\nYou initialize the creation and confirmation using the client-side \ncore.users.create\n method.\n\n\nDefault Confirmation\n\n\nlocal\n \nfunction\n \nonUserCreate\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nresult\n.\nconfirmation\n \n==\n \n'pending'\n \nthen\n\n      \n--email was sent successfully\n\n    \nend\n\n    \nprint\n(\nevt\n.\nresult\n.\nuser_id\n)\n \n-- new user id\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nusers\n.\ncreate\n({\n\n  \nusername\n \n=\n \n\"SuperUser\"\n,\n\n  \npassword\n \n=\n \n\"1234abcd\"\n,\n\n  \nemail\n \n=\n \n\"newuser@somemail.com\"\n,\n\n  \nconfirmation\n \n=\n \n{\n\n    \nfrom_email\n \n=\n \n\"register@funrun.com\"\n,\n\n    \nsubject\n \n=\n \n\"Please confirm your registration.\"\n,\n\n  \n}\n\n\n},\n \nonUserCreate\n)\n\n\n\n\n\n\n\n\nImportant\n\n\nPasswords are hashed before being sent to the server. Do not try to hash the passwords yourself.\n\n\n\n\nResponse Event\n\n\nWhen creating a user with email confirmation, the response \nresult\n will be a table containing the newly registered users \nuser_id\n, and a \nconfirmation\n key.\n\n\nThe \nconfirmation\n key will contain the email sent state as a string with a value of 'pending' on success, or 'failed' otherwise.\n\n\nDefault Template\n\n\nBy default the following email template is sent to the users email. The only required template key is the \n{* confirm_link *}\n which is replaced automatically with the proper link to confirm the user.\n\n\n\n\nRequired Template Key\n\n\nIf you do not include the \n{* confirm_link *}\n template key in the email template, the user will have no way to confirm the registration.\n\n\n\n\nYou can edit the default template messaging if you wish, but to add additional template keys you must create a custom template, which is explained in the next section.\n\n\nTemplate Location: \n/home/coronium/templates/registration/email.tpl\n\n\nHello,\n\nYou have requested to sign up for our app. \n\nPlease confirm your registration by clicking the link below:\n\n{* confirm_link *}\n\nThank you.\n\n\n\n\n\nCustom Templates\n\n\nTo create a custom email template, you create, and place your custom template file in the \n/home/coronium/templates/registration/\n directory, and pass a reference to the template file in the \nconfirmation.email_tpl\n parameter.\n\n\nAt a minimum you must include the \n{* confirm_link *}\n template key in your custom template for the auto-generated confirmation link, but you can also supply other template keys by passing a table of key/value pairs to the \nconfirmation.tpl_keys\n parameter.\n\n\n\n\nYou can create as many custom email templates as you wish.\n\n\n\n\nTemplate Example\n\n\nTemplate Location: \n/home/coronium/templates/registration/custom_email.tpl\n\n\nHello {{ username }},\n\nThank you for signing up to use the {{ app_name }} application.\n\nPlease click the following link to confirm your registration:\n\n{* confirm_link *}\n\nHave a nice day.\n\n\n\n\n\nUser Create Code\n\n\ncore\n.\nusers\n.\ncreate\n({\n\n  \nusername\n \n=\n \n\"SuperUser\"\n,\n\n  \npassword\n \n=\n \n\"1234abcd\"\n,\n\n  \nemail\n \n=\n \n\"newuser@somemail.com\"\n,\n\n  \nconfirmation\n \n=\n \n{\n\n    \nfrom_email\n \n=\n \n\"register@funrun.com\"\n,\n\n    \nsubject\n \n=\n \n\"Please confirm your registration.\"\n,\n\n    \nemail_tpl\n \n=\n \n\"custom_email.tpl\"\n,\n\n    \ntpl_keys\n \n=\n \n{\n\n      \nusername\n \n=\n \n\"Timmy\"\n,\n\n      \napp_name\n \n=\n \n\"FunRun\"\n\n    \n}\n\n  \n}\n\n\n},\n \nonUserCreate\n)\n\n\n\n\n\n\nResult\n\n\nHello Timmy,\n\nThank you for signing up to use the FunRun application.\n\nPlease click the following link to confirm your registration:\n\nhttp://your.coronium.host/_confirmation?code=<generated-confirmation-code>\n\nHave a nice day.\n\n\n\n\n\nImportant Notes\n\n\nWhen using the email confirmation feature you must provide both the \nemail\n key and the \nconfirmation.from_email\n key or the confirmation will not be sent.\n\n\nDo not add a \nconfirm_link\n key to the \nconfirmation.tpl_keys\n entry. Just be sure to include it in your custom template and it will be populated automatically with the correct confirmation link when the email is sent.\n\n\nConfirmation Page\n\n\nOnce the user clicks the confirmation link in the registration email, they will be taken to the confirmation landing page. \n\n\nWhen the user is confirmed they will be marked as \nactive\n in the \nusers\n database.\n\n\nTo customize the landing page, you can edit the following resources.\n\n\n\n\nTemplate: \n/home/coronium/pages/_coronium/registration/confirmation.tpl\n\n\nLua Code: \n/home/coronium/pages/_coronium/registration/confirmation.lua\n\n\n\n\nSee the \nPages\n usage guide for information about how to work with these files. \n\n\nResending Confirmation\n\n\nTo resend a users confirmation email, you must first \nlogin\n the user with their current username and password, and then call the \nresendConfirmation\n method with the users unique identifier.",
            "title": "Confirmation"
        },
        {
            "location": "/client/modules/users/confirmation/#confirmation-table",
            "text": "When using the confirmation feature, the following parameters can be supplied in the  confirmation  table. Not all parameters are required.  Parameters     Name  Description  Type  Required      from_email  The senders email address. This is usually your address.  String  Y    subject  The registration email subject line.  String  Y    email_tpl  Identifier for a custom registration email template.  String  N    tpl_keys  Additional template keys for the registration email template.  Table  N",
            "title": "Confirmation Table"
        },
        {
            "location": "/client/modules/users/confirmation/#client-side-example",
            "text": "You initialize the creation and confirmation using the client-side  core.users.create  method.",
            "title": "Client-Side Example"
        },
        {
            "location": "/client/modules/users/confirmation/#default-confirmation",
            "text": "local   function   onUserCreate (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     if   evt . result . confirmation   ==   'pending'   then \n       --email was sent successfully \n     end \n     print ( evt . result . user_id )   -- new user id \n   end  end  core . users . create ({ \n   username   =   \"SuperUser\" , \n   password   =   \"1234abcd\" , \n   email   =   \"newuser@somemail.com\" , \n   confirmation   =   { \n     from_email   =   \"register@funrun.com\" , \n     subject   =   \"Please confirm your registration.\" , \n   }  },   onUserCreate )    Important  Passwords are hashed before being sent to the server. Do not try to hash the passwords yourself.",
            "title": "Default Confirmation"
        },
        {
            "location": "/client/modules/users/confirmation/#response-event",
            "text": "When creating a user with email confirmation, the response  result  will be a table containing the newly registered users  user_id , and a  confirmation  key.  The  confirmation  key will contain the email sent state as a string with a value of 'pending' on success, or 'failed' otherwise.",
            "title": "Response Event"
        },
        {
            "location": "/client/modules/users/confirmation/#default-template",
            "text": "By default the following email template is sent to the users email. The only required template key is the  {* confirm_link *}  which is replaced automatically with the proper link to confirm the user.   Required Template Key  If you do not include the  {* confirm_link *}  template key in the email template, the user will have no way to confirm the registration.   You can edit the default template messaging if you wish, but to add additional template keys you must create a custom template, which is explained in the next section.  Template Location:  /home/coronium/templates/registration/email.tpl  Hello,\n\nYou have requested to sign up for our app. \n\nPlease confirm your registration by clicking the link below:\n\n{* confirm_link *}\n\nThank you.",
            "title": "Default Template"
        },
        {
            "location": "/client/modules/users/confirmation/#custom-templates",
            "text": "To create a custom email template, you create, and place your custom template file in the  /home/coronium/templates/registration/  directory, and pass a reference to the template file in the  confirmation.email_tpl  parameter.  At a minimum you must include the  {* confirm_link *}  template key in your custom template for the auto-generated confirmation link, but you can also supply other template keys by passing a table of key/value pairs to the  confirmation.tpl_keys  parameter.   You can create as many custom email templates as you wish.",
            "title": "Custom Templates"
        },
        {
            "location": "/client/modules/users/confirmation/#template-example",
            "text": "Template Location:  /home/coronium/templates/registration/custom_email.tpl  Hello {{ username }},\n\nThank you for signing up to use the {{ app_name }} application.\n\nPlease click the following link to confirm your registration:\n\n{* confirm_link *}\n\nHave a nice day.",
            "title": "Template Example"
        },
        {
            "location": "/client/modules/users/confirmation/#user-create-code",
            "text": "core . users . create ({ \n   username   =   \"SuperUser\" , \n   password   =   \"1234abcd\" , \n   email   =   \"newuser@somemail.com\" , \n   confirmation   =   { \n     from_email   =   \"register@funrun.com\" , \n     subject   =   \"Please confirm your registration.\" , \n     email_tpl   =   \"custom_email.tpl\" , \n     tpl_keys   =   { \n       username   =   \"Timmy\" , \n       app_name   =   \"FunRun\" \n     } \n   }  },   onUserCreate )   Result  Hello Timmy,\n\nThank you for signing up to use the FunRun application.\n\nPlease click the following link to confirm your registration:\n\nhttp://your.coronium.host/_confirmation?code=<generated-confirmation-code>\n\nHave a nice day.",
            "title": "User Create Code"
        },
        {
            "location": "/client/modules/users/confirmation/#important-notes",
            "text": "When using the email confirmation feature you must provide both the  email  key and the  confirmation.from_email  key or the confirmation will not be sent.  Do not add a  confirm_link  key to the  confirmation.tpl_keys  entry. Just be sure to include it in your custom template and it will be populated automatically with the correct confirmation link when the email is sent.",
            "title": "Important Notes"
        },
        {
            "location": "/client/modules/users/confirmation/#confirmation-page",
            "text": "Once the user clicks the confirmation link in the registration email, they will be taken to the confirmation landing page.   When the user is confirmed they will be marked as  active  in the  users  database.  To customize the landing page, you can edit the following resources.   Template:  /home/coronium/pages/_coronium/registration/confirmation.tpl  Lua Code:  /home/coronium/pages/_coronium/registration/confirmation.lua   See the  Pages  usage guide for information about how to work with these files.",
            "title": "Confirmation Page"
        },
        {
            "location": "/client/modules/users/confirmation/#resending-confirmation",
            "text": "To resend a users confirmation email, you must first  login  the user with their current username and password, and then call the  resendConfirmation  method with the users unique identifier.",
            "title": "Resending Confirmation"
        },
        {
            "location": "/client/codes/",
            "text": "Error \nstatus\n codes can help you shape your application logic. The status code, if any, can be found in the response event when an error occurs, in the event \nstatus\n key.\n\n\nNot all module methods return status codes. The default status of an error is -1.\n\n\nExample\n\n\n-- client-side response listener\n\n\nlocal\n \nfunction\n \nonResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nstatus\n)\n \n-- error status code\n\n  \nelse\n\n    \n--no error\n\n  \nend\n\n\nend\n\n\n\n\n\n\nModules\n\n\nUsers\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n600\n\n\nUser already exists.\n\n\n\n\n\n\n601\n\n\nUser could not be created.\n\n\n\n\n\n\n603\n\n\nPassword for user was invalid.\n\n\n\n\n\n\n604\n\n\nRegistered User could not be found.\n\n\n\n\n\n\n605\n\n\nUser requires server-side login.\n\n\n\n\n\n\n614\n\n\nPending User could not be found.\n\n\n\n\n\n\n620\n\n\nOAuth provider already exists for user.\n\n\n\n\n\n\n624\n\n\nOAuth provider does not exist for user.\n\n\n\n\n\n\n\n\nEmail\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n701\n\n\nEmail could not be sent.\n\n\n\n\n\n\n702\n\n\nEmail configuration is not set or invalid.\n\n\n\n\n\n\n704\n\n\nEmail address not found or invalid.\n\n\n\n\n\n\n\n\nGeneral\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n800\n\n\nResult was invalid.\n\n\n\n\n\n\n801\n\n\nMismatched parameter type.\n\n\n\n\n\n\n804\n\n\nRequired parameter is missing.\n\n\n\n\n\n\n810\n\n\nGeneral API error.\n\n\n\n\n\n\n815\n\n\nGeneral Network error.\n\n\n\n\n\n\n820\n\n\nGeneral IO error.\n\n\n\n\n\n\n830\n\n\nJSON decode failed.\n\n\n\n\n\n\n831\n\n\nJSON encode failed.\n\n\n\n\n\n\n\n\nMySQL\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n901\n\n\nUnauthorized database.\n\n\n\n\n\n\n\n\nScopes\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1000\n\n\nScope name already exists.\n\n\n\n\n\n\n1004\n\n\nScope was not found.\n\n\n\n\n\n\n\n\nCustom Status Codes\n\n\nIf you are using a your own \nserver-side API\n, you can pass a custom status code using the \ncore.error\n method.",
            "title": "Status Codes"
        },
        {
            "location": "/client/codes/#modules",
            "text": "",
            "title": "Modules"
        },
        {
            "location": "/client/codes/#users",
            "text": "Code  Description      600  User already exists.    601  User could not be created.    603  Password for user was invalid.    604  Registered User could not be found.    605  User requires server-side login.    614  Pending User could not be found.    620  OAuth provider already exists for user.    624  OAuth provider does not exist for user.",
            "title": "Users"
        },
        {
            "location": "/client/codes/#email",
            "text": "Code  Description      701  Email could not be sent.    702  Email configuration is not set or invalid.    704  Email address not found or invalid.",
            "title": "Email"
        },
        {
            "location": "/client/codes/#general",
            "text": "Code  Description      800  Result was invalid.    801  Mismatched parameter type.    804  Required parameter is missing.    810  General API error.    815  General Network error.    820  General IO error.    830  JSON decode failed.    831  JSON encode failed.",
            "title": "General"
        },
        {
            "location": "/client/codes/#mysql",
            "text": "Code  Description      901  Unauthorized database.",
            "title": "MySQL"
        },
        {
            "location": "/client/codes/#scopes",
            "text": "Code  Description      1000  Scope name already exists.    1004  Scope was not found.",
            "title": "Scopes"
        },
        {
            "location": "/client/codes/#custom-status-codes",
            "text": "If you are using a your own  server-side API , you can pass a custom status code using the  core.error  method.",
            "title": "Custom Status Codes"
        },
        {
            "location": "/demo/",
            "text": "Download\n\n\nA simple Corona demo project showing a few Coronium Core client module features is available by clicking on the link below.\n\n\nCoronium Core Demo\n\n\nUsage\n\n\n\n\n\n\nReplace the \nCORONIUM_SERVER_HOST\n placeholder with your server address.\n\n\n\n\n\n\nReplace the \nCORONIUM_SERVER_KEY\n placeholder with your \nserver key\n.\n\n\n\n\n\n\nReplace the \nAPPLICATION_SCOPE\n placeholder with your \napplication scope\n.\n\n\n\n\n\n\nRun the project using \nCorona\n, click the buttons, and view the output in the console.",
            "title": "Demo Project"
        },
        {
            "location": "/demo/#download",
            "text": "A simple Corona demo project showing a few Coronium Core client module features is available by clicking on the link below.  Coronium Core Demo",
            "title": "Download"
        },
        {
            "location": "/demo/#usage",
            "text": "Replace the  CORONIUM_SERVER_HOST  placeholder with your server address.    Replace the  CORONIUM_SERVER_KEY  placeholder with your  server key .    Replace the  APPLICATION_SCOPE  placeholder with your  application scope .    Run the project using  Corona , click the buttons, and view the output in the console.",
            "title": "Usage"
        },
        {
            "location": "/screencasts/",
            "text": "Important Note:\n Starting with Coronium Core 2.1.x an \"application scope\" must be provided to the initialization method. This is not currently reflected in these screencasts. Please see the \nApplication Scopes\n screencast below.\n\n\n\n\nQuick Start / Installation\n\n\n\n\n\nHTTPS / SSL\n\n\n\n\n\nClient Plugin API\n\n\n\n\nApplication Scope\n\n\nAn \"application scope\" must now be provided to the initialization method and is not reflected in this screencast. Please see the \nApplication Scopes\n screencast.\n\n\n\n\n\n\n\nApplication Scopes\n\n\n\n\n\nAPI Code Editor\n\n\n\n\n\nServer API - Part I\n\n\n\n\n\nServer API - Part II\n\n\n\n\n\nEmail Module\n\n\n\n\n\nPages API - Part I\n\n\n\n\n\nPages API - Part II\n\n\n\n\n\nHTML5 Builds + CoroniumJS\n\n\n \nCoroniumJS plugin information is out of date in this screencast.\n \n\n\nSee the \nCoroniumJS docs\n for updated usage.\n\n\n\n\n\nDatabase Administation\n\n\n\n\n\nDevelopment Tips\n\n\n\n\n\nInternals",
            "title": "Screencasts"
        },
        {
            "location": "/screencasts/#quick-start-installation",
            "text": "",
            "title": "Quick Start / Installation"
        },
        {
            "location": "/screencasts/#https-ssl",
            "text": "",
            "title": "HTTPS / SSL"
        },
        {
            "location": "/screencasts/#client-plugin-api",
            "text": "Application Scope  An \"application scope\" must now be provided to the initialization method and is not reflected in this screencast. Please see the  Application Scopes  screencast.",
            "title": "Client Plugin API"
        },
        {
            "location": "/screencasts/#application-scopes",
            "text": "",
            "title": "Application Scopes"
        },
        {
            "location": "/screencasts/#api-code-editor",
            "text": "",
            "title": "API Code Editor"
        },
        {
            "location": "/screencasts/#server-api-part-i",
            "text": "",
            "title": "Server API - Part I"
        },
        {
            "location": "/screencasts/#server-api-part-ii",
            "text": "",
            "title": "Server API - Part II"
        },
        {
            "location": "/screencasts/#email-module",
            "text": "",
            "title": "Email Module"
        },
        {
            "location": "/screencasts/#pages-api-part-i",
            "text": "",
            "title": "Pages API - Part I"
        },
        {
            "location": "/screencasts/#pages-api-part-ii",
            "text": "",
            "title": "Pages API - Part II"
        },
        {
            "location": "/screencasts/#html5-builds-coroniumjs",
            "text": "CoroniumJS plugin information is out of date in this screencast.    See the  CoroniumJS docs  for updated usage.",
            "title": "HTML5 Builds + CoroniumJS"
        },
        {
            "location": "/screencasts/#database-administation",
            "text": "",
            "title": "Database Administation"
        },
        {
            "location": "/screencasts/#development-tips",
            "text": "",
            "title": "Development Tips"
        },
        {
            "location": "/screencasts/#internals",
            "text": "",
            "title": "Internals"
        },
        {
            "location": "/about/",
            "text": "Coronium Core\n\n\n\nCode and documentation \u00a92017-2018 C. Byerley ( \ndevelephant\n )\n\n\nSupport\n\n\nFor questions, assistance, and discussions, visit the \nCoronium forum\n.\n\n\nLicense\n\n\nBSD 3-Clause License\n\n\nCopyright (c) 2018, C. Byerley\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n\n\n\n\n\nNeither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nCredits\n\n\nCoronium Core\n wouldn't be possible without these great projects.\n\n\n\n\nnginx\n\n\nngx_http_lua_module\n\n\nMongoDB\n\n\nMySQL\n\n\nLuaJIT\n\n\nLuaRocks\n\n\nChef\n\n\nmkdocs\n\n\n\n\nAnd most importantly; my Wife, Daughter, Izzy, the Corona community, and coffee.",
            "title": "About"
        },
        {
            "location": "/about/#support",
            "text": "For questions, assistance, and discussions, visit the  Coronium forum .",
            "title": "Support"
        },
        {
            "location": "/about/#license",
            "text": "BSD 3-Clause License  Copyright (c) 2018, C. Byerley\nAll rights reserved.  Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:    Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.    Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.    Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "title": "License"
        },
        {
            "location": "/about/#credits",
            "text": "Coronium Core  wouldn't be possible without these great projects.   nginx  ngx_http_lua_module  MongoDB  MySQL  LuaJIT  LuaRocks  Chef  mkdocs   And most importantly; my Wife, Daughter, Izzy, the Corona community, and coffee.",
            "title": "Credits"
        }
    ]
}