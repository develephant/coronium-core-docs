{
    "docs": [
        {
            "location": "/",
            "text": "The ultimate cloud sidekick for your Corona apps and games.\n\n\n\nAn all-in-one Lua application server built specifically for \nCorona\n developers.\n\n\nExtend your applications into the cloud with Mongo and MySQL databases, secure file transfers and storage, dynamic public facing web pages, and more; all customizable using a ridiculously simple Lua based api.\n\n\nUse the \nCoronium Core\n client-side plugin api for most tasks without ever writing a line of code on the server. When you need to take it to the next level, create custom server-side apis with Lua for complex data driven applications.\n\n\nWith the \nCoronium Core\n all-in-one server, you own and control your data, with an easy to use custom built solution for Corona developers.",
            "title": "Introduction"
        },
        {
            "location": "/server-install/digitalocean/",
            "text": "Coronium Core\n runs best on a \nDigitalOcean\n Ubuntu 16.04\n droplet.\n\n\n\n\nFree Hosting Credit\n\n\nIf you're new to \nDigitalOcean\n please consider signing up with \nthis link\n. Not only will you receive a $10 credit (2 free months), but it also helps support the continued development, and testing of \nCoronium Core\n.\n\n\n\n\nCreate A Droplet\n\n\nOnce you log into your \nDigitalOcean\n account, click the \nCreate\n button and select \nDroplets\n from the menu.\n\n\n\n\nOn the next screen, first select a \nUbuntu 16.04\n droplet distribution.\n\n\n \n\n\nSelect the droplet size. A \n1 GB/1 CPU\n droplet is recommended as a minimum. If you're only testing, you can use a 512 MB droplet and increase the size later.\n\n\n\n\nNext, select a region for the droplet. Consider choosing a location closest to your most active user base.\n\n\n\n\nSelect your SSH profile to attach to the droplet.\n\n\n\n\n\n\nThere is an option where you can use a password instead of an SSH key, which may be easier if you're only testing \nCoronium Core\n, though I wouldn't recommend it. You can learn more about generating SSH keys for \nDigitalOcean\n here: \nCreating SSH Keys\n.\n\n\n\n\nNow give your droplet a hostname.\n\n\n\n\nBe sure to replace \ncoronium.develephant.com\n with your own hostname.\n\n\nAnd finally, click the \nCreate\n button to spin up the droplet.\n\n\n\n\nInstall Coronium Core\n\n\nOnce your droplet is done spinning up, note the ip address.\n\n\n\n\nUsing a terminal/shell of your choice, SSH into the droplet.\n\n\n\n\nTip\n\n\nYou can use the built in terminal on OSX. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh root@<your-instance-ip>\n\n\n\n\n\nReplace \n<your-instance-ip>\n with the address that was assigned to your droplet.\n\n\nOnce you are connected to the droplet, copy and paste the following line into the terminal:\n\n\nwget https://s3.amazonaws.com/coronium-core/do/up.sh && sudo bash up.sh\n\n\n\n\n\nMongo Database\n\n\nAt the start of the installation you will be prompted to choose whether to install the \nMongo\n database. The \nMySQL\n database is a mandatory installation.\n\n\n\n\nImportant\n\n\nIf you choose to skip the Mongo installation, you will not be able to use the \nData\n or \nMongo\n modules. \nChoose wisely, as you cannot install Mongo once the server is running\n.\n\n\n\n\nDatabase Passwords\n\n\nOnce the installation is complete, you will be prompted for your choice of database passwords. Make sure they are secure, and don't lose them. You will use these passwords to connect to your databases both internally and externally.\n\n\nOnce the installation is complete, take a look at the \nPost Install\n section.",
            "title": "DigitalOcean"
        },
        {
            "location": "/server-install/digitalocean/#create-a-droplet",
            "text": "Once you log into your  DigitalOcean  account, click the  Create  button and select  Droplets  from the menu.   On the next screen, first select a  Ubuntu 16.04  droplet distribution.     Select the droplet size. A  1 GB/1 CPU  droplet is recommended as a minimum. If you're only testing, you can use a 512 MB droplet and increase the size later.   Next, select a region for the droplet. Consider choosing a location closest to your most active user base.   Select your SSH profile to attach to the droplet.    There is an option where you can use a password instead of an SSH key, which may be easier if you're only testing  Coronium Core , though I wouldn't recommend it. You can learn more about generating SSH keys for  DigitalOcean  here:  Creating SSH Keys .   Now give your droplet a hostname.   Be sure to replace  coronium.develephant.com  with your own hostname.  And finally, click the  Create  button to spin up the droplet.",
            "title": "Create A Droplet"
        },
        {
            "location": "/server-install/digitalocean/#install-coronium-core",
            "text": "Once your droplet is done spinning up, note the ip address.   Using a terminal/shell of your choice, SSH into the droplet.   Tip  You can use the built in terminal on OSX. For Windows, check out  PuTTY .   ssh root@<your-instance-ip>  Replace  <your-instance-ip>  with the address that was assigned to your droplet.  Once you are connected to the droplet, copy and paste the following line into the terminal:  wget https://s3.amazonaws.com/coronium-core/do/up.sh && sudo bash up.sh",
            "title": "Install Coronium Core"
        },
        {
            "location": "/server-install/digitalocean/#mongo-database",
            "text": "At the start of the installation you will be prompted to choose whether to install the  Mongo  database. The  MySQL  database is a mandatory installation.   Important  If you choose to skip the Mongo installation, you will not be able to use the  Data  or  Mongo  modules.  Choose wisely, as you cannot install Mongo once the server is running .",
            "title": "Mongo Database"
        },
        {
            "location": "/server-install/digitalocean/#database-passwords",
            "text": "Once the installation is complete, you will be prompted for your choice of database passwords. Make sure they are secure, and don't lose them. You will use these passwords to connect to your databases both internally and externally.  Once the installation is complete, take a look at the  Post Install  section.",
            "title": "Database Passwords"
        },
        {
            "location": "/server-install/ec2/",
            "text": "Coronium Core\n server is eligible for the EC2 free tier using Amazon Web Services.\n\n\n\n\nImportant Note\n\n\nThis guide assumes that you have an active AWS account, and are familiar with managing EC2 instances.\n\n\n\n\n\n\nScreencast\n\n\nView the installation instructions in a screencast format by \nclicking here\n.\n\n\n\n\nCreate An Instance\n\n\nOnce you log into the \nAWS Console\n, navigate to the \nEC2\n service. Click the \nLaunch Instance\n button.\n\n\nOn the next screen, find the \nUbuntu Server 16.04 LTS (HVM)\n AMI, and click the \nSelect\n button on the right.\n\n\nSelect your preferred instance type. A \nt2.micro\n is a good starting point. You can always increase the size later.\n\n\nUsing the \nAdd Rule\n button on the \nConfigure Security Group\n screen, and add the following rules:\n\n\n\n\n\n\n\n\nType\n\n\nProtocol\n\n\nPort Range\n\n\nSource\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCustom TCP\n\n\nTCP\n\n\n443\n\n\nAnywhere\n\n\nHTTPS support\n\n\n\n\n\n\nCustom TCP\n\n\nTCP\n\n\n10001\n\n\nAnywhere\n\n\nCoronium Core access\n\n\n\n\n\n\nCustom TCP\n\n\nTCP\n\n\n3306\n\n\nAnywhere or IP\n\n\nMySQL server admin\n\n\n\n\n\n\nCustom TCP\n\n\nTCP\n\n\n27017\n\n\nAnywhere or IP\n\n\nMongo server admin\n\n\n\n\n\n\n\n\nAdjust any additional settings, and then \nLaunch\n the AMI.\n\n\nInstall Coronium Core\n\n\nOnce your instance is in a \nrunning\n state, note the \nIPv4 Public IP\n address.\n\n\nUsing a terminal/shell of your choice, SSH into the instance.\n\n\n\n\nTip\n\n\nYou can use the built in terminal on OSX. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh -i <path/to/.pem> ubuntu@<your-instance-ip>\n\n\n\n\n\nReplace \n<your-instance-ip>\n with the address that was assigned to your instance.\n\n\nOnce you are connected to the droplet, copy and paste the following line into the terminal:\n\n\nwget https://s3.amazonaws.com/coronium-core/ec2/up.sh && sudo bash up.sh\n\n\n\n\n\nMongo Database\n\n\nAt the start of the installation you will be prompted to choose whether to install the \nMongo\n database. The \nMySQL\n database is a mandatory installation.\n\n\n\n\nImportant\n\n\nIf you choose to skip the Mongo installation, you will not be able to use the \nData\n or \nMongo\n modules. \nChoose wisely, as you cannot install Mongo once the server is running\n.\n\n\n\n\nDatabase Passwords\n\n\nOnce the installation is complete, you will be prompted for your choice of database passwords. Make sure they are secure, and don't lose them. You will use these passwords to connect to your databases both internally and externally.\n\n\nOnce the installation is complete, take a look at the \nPost Install\n section.",
            "title": "Amazon EC2"
        },
        {
            "location": "/server-install/ec2/#create-an-instance",
            "text": "Once you log into the  AWS Console , navigate to the  EC2  service. Click the  Launch Instance  button.  On the next screen, find the  Ubuntu Server 16.04 LTS (HVM)  AMI, and click the  Select  button on the right.  Select your preferred instance type. A  t2.micro  is a good starting point. You can always increase the size later.  Using the  Add Rule  button on the  Configure Security Group  screen, and add the following rules:     Type  Protocol  Port Range  Source  Description      Custom TCP  TCP  443  Anywhere  HTTPS support    Custom TCP  TCP  10001  Anywhere  Coronium Core access    Custom TCP  TCP  3306  Anywhere or IP  MySQL server admin    Custom TCP  TCP  27017  Anywhere or IP  Mongo server admin     Adjust any additional settings, and then  Launch  the AMI.",
            "title": "Create An Instance"
        },
        {
            "location": "/server-install/ec2/#install-coronium-core",
            "text": "Once your instance is in a  running  state, note the  IPv4 Public IP  address.  Using a terminal/shell of your choice, SSH into the instance.   Tip  You can use the built in terminal on OSX. For Windows, check out  PuTTY .   ssh -i <path/to/.pem> ubuntu@<your-instance-ip>  Replace  <your-instance-ip>  with the address that was assigned to your instance.  Once you are connected to the droplet, copy and paste the following line into the terminal:  wget https://s3.amazonaws.com/coronium-core/ec2/up.sh && sudo bash up.sh",
            "title": "Install Coronium Core"
        },
        {
            "location": "/server-install/ec2/#mongo-database",
            "text": "At the start of the installation you will be prompted to choose whether to install the  Mongo  database. The  MySQL  database is a mandatory installation.   Important  If you choose to skip the Mongo installation, you will not be able to use the  Data  or  Mongo  modules.  Choose wisely, as you cannot install Mongo once the server is running .",
            "title": "Mongo Database"
        },
        {
            "location": "/server-install/ec2/#database-passwords",
            "text": "Once the installation is complete, you will be prompted for your choice of database passwords. Make sure they are secure, and don't lose them. You will use these passwords to connect to your databases both internally and externally.  Once the installation is complete, take a look at the  Post Install  section.",
            "title": "Database Passwords"
        },
        {
            "location": "/server-install/postinstall/",
            "text": "Password\n\n\nThe default password for a fresh install is: \ncloudadmin\n.\n\n\n\n\nImportant Note\n\n\nYou should change the default password after the install.\n\n\n\n\nLog in with the \ncoronium\n user:\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nUse the following command to change the password:\n\n\nsudo passwd coronium\n\n\n\n\n\nAnd then follow the prompts.\n\n\nEnable HTTPS\n\n\nTo secure your Coronium Core server with HTTPS, see the \nHTTPS/SSL\n section.",
            "title": "Post Install"
        },
        {
            "location": "/server-install/postinstall/#password",
            "text": "The default password for a fresh install is:  cloudadmin .   Important Note  You should change the default password after the install.   Log in with the  coronium  user:  ssh coronium@<your-instance-ip>  Use the following command to change the password:  sudo passwd coronium  And then follow the prompts.",
            "title": "Password"
        },
        {
            "location": "/server-install/postinstall/#enable-https",
            "text": "To secure your Coronium Core server with HTTPS, see the  HTTPS/SSL  section.",
            "title": "Enable HTTPS"
        },
        {
            "location": "/server-guide/",
            "text": "Coronium Tool\n\n\nA command line tool is available on the server to handle a few common operations. To see available options, on the command line, type:\n\n\ncoronium\n\n\n\n\n\n...and press the Enter key.\n\n\n\n\nYou must be logged in as the \ncoronium\n user to use the command line tool.\n\n\n\n\nServer Key\n\n\nA server key is generated the \n/home/coronium/config/keyfile\n file when you first install the server. You use this key when connecting with the client-side plugin.\n\n\nDo not remove this file\n. You should back up this file to your computer and store it some place safe.\n\n\n\n\nViewing the Key\n\n\nA quick way to view the server key is by running \ncoronium key\n on the command line while logged into the server.\n\n\n\n\nIn the event that you need to generate a new keyfile, you can run \nsudo coronium genkey\n on the command line.\n\n\n\n\nImportant Note\n\n\nIf you regenerate the keyfile, any deployed Corona apps that use the server key will be unable to connect to the server.\n\n\n\n\nViewing Logs\n\n\nTo view log files, connect to the server with the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\n\n\nViewing the Log\n\n\nTo quickly monitor the debug (nginx) log file, enter \ncclog\n on the command line.\n\n\n\n\nLog files can be found in the \n/usr/local/coronium/logs\n directory. Possible log files include \nnginx.log\n and \nmongo.log\n.\n\n\nTo watch a log file in real-time:\n\n\ntail -f /usr/local/coronium/logs/<log-name>.log\n\n\n\n\n\nPress \ncontrol-x\n to stop watching the log file.\n\n\n\n\nThe log files are managed automatically, and will be \"rotated\" once they exceed a certain size limit.\n\n\n\n\n\n\nTip\n\n\nTo view all logs consolidated into one file (including the mysql.log) type \ncoronium logs\n.\n\n\n\n\nLua Code Cache\n\n\nDuring production you should turn on the Lua code cache. You can do this using the Coronium Tool. First, log in as the \ncoronium\n user.\n\n\nCache on\n\n\nsudo coronium cache on\n\n\n\n\n\nCache off\n\n\nsudo coronium cache off\n\n\n\n\n\n\n\nTip\n\n\nDuring api development make sure to turn the Lua cache \noff\n to see your changes.\n\n\n\n\nSystem Services\n\n\nWhen your \nCoronium Core\n server starts, its monitored by a utility called \nMonit\n, which makes sure that the required processes stay active. In the event that a process runs into an issue or crashes, it will be restarted shortly.\n\n\nIn the rare case where you need to manually stop, start or restart the Coronium stack, log in using the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nTo stop the Coronium stack, on the command line, enter:\n\n\nsudo coronium stop\n\n\n\n\n\nTo start the Coronium stack, use:\n\n\nsudo coronium start\n\n\n\n\n\nTo restart the Coronium stack, use:\n\n\nsudo coronium restart\n\n\n\n\n\n\n\nYou should rarely need to manually control the Coronium stack process.\n\n\n\n\nUser Directories\n\n\nThe following user directories can be found in \n/home/coronium\n. They are will not be affected in any server updates.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nSee also\n\n\n\n\n\n\n\n\n\n\nfiles\n\n\nHolds all file uploads.\n\n\nFiles\n\n\n\n\n\n\nprojects\n\n\nHolds all the api projects.\n\n\nProjects\n\n\n\n\n\n\npages\n\n\nHolds all public facing web pages.\n\n\nPages\n\n\n\n\n\n\n\n\nPublic Directory\n\n\nIf you store files in the \nfiles/public\n directory they are accessible via the browser, which makes them insecure by nature. A common use case for storing files in the public directory is for displaying them within \npage templates\n. \n\n\n\n\nIf a file with the same path exists in the \npages\n directory, it will be served first. If a file does not exist at the path, then the \nfiles/public\n directory will be checked.\n\n\n\n\nPath Examples\n\n\nFile: \n/home/coronium/files/public/imgs/image.png\n\n\nURL: \nhttps://your.coronium.server/imgs/image.png",
            "title": "Server Guide"
        },
        {
            "location": "/server-guide/#coronium-tool",
            "text": "A command line tool is available on the server to handle a few common operations. To see available options, on the command line, type:  coronium  ...and press the Enter key.   You must be logged in as the  coronium  user to use the command line tool.",
            "title": "Coronium Tool"
        },
        {
            "location": "/server-guide/#server-key",
            "text": "A server key is generated the  /home/coronium/config/keyfile  file when you first install the server. You use this key when connecting with the client-side plugin.  Do not remove this file . You should back up this file to your computer and store it some place safe.   Viewing the Key  A quick way to view the server key is by running  coronium key  on the command line while logged into the server.   In the event that you need to generate a new keyfile, you can run  sudo coronium genkey  on the command line.   Important Note  If you regenerate the keyfile, any deployed Corona apps that use the server key will be unable to connect to the server.",
            "title": "Server Key"
        },
        {
            "location": "/server-guide/#viewing-logs",
            "text": "To view log files, connect to the server with the  coronium  user.  ssh coronium@<your-instance-ip>   Viewing the Log  To quickly monitor the debug (nginx) log file, enter  cclog  on the command line.   Log files can be found in the  /usr/local/coronium/logs  directory. Possible log files include  nginx.log  and  mongo.log .  To watch a log file in real-time:  tail -f /usr/local/coronium/logs/<log-name>.log  Press  control-x  to stop watching the log file.   The log files are managed automatically, and will be \"rotated\" once they exceed a certain size limit.    Tip  To view all logs consolidated into one file (including the mysql.log) type  coronium logs .",
            "title": "Viewing Logs"
        },
        {
            "location": "/server-guide/#lua-code-cache",
            "text": "During production you should turn on the Lua code cache. You can do this using the Coronium Tool. First, log in as the  coronium  user.  Cache on  sudo coronium cache on  Cache off  sudo coronium cache off   Tip  During api development make sure to turn the Lua cache  off  to see your changes.",
            "title": "Lua Code Cache"
        },
        {
            "location": "/server-guide/#system-services",
            "text": "When your  Coronium Core  server starts, its monitored by a utility called  Monit , which makes sure that the required processes stay active. In the event that a process runs into an issue or crashes, it will be restarted shortly.  In the rare case where you need to manually stop, start or restart the Coronium stack, log in using the  coronium  user.  ssh coronium@<your-instance-ip>  To stop the Coronium stack, on the command line, enter:  sudo coronium stop  To start the Coronium stack, use:  sudo coronium start  To restart the Coronium stack, use:  sudo coronium restart   You should rarely need to manually control the Coronium stack process.",
            "title": "System Services"
        },
        {
            "location": "/server-guide/#user-directories",
            "text": "The following user directories can be found in  /home/coronium . They are will not be affected in any server updates.     Name  Description  See also      files  Holds all file uploads.  Files    projects  Holds all the api projects.  Projects    pages  Holds all public facing web pages.  Pages",
            "title": "User Directories"
        },
        {
            "location": "/server-guide/#public-directory",
            "text": "If you store files in the  files/public  directory they are accessible via the browser, which makes them insecure by nature. A common use case for storing files in the public directory is for displaying them within  page templates .    If a file with the same path exists in the  pages  directory, it will be served first. If a file does not exist at the path, then the  files/public  directory will be checked.   Path Examples  File:  /home/coronium/files/public/imgs/image.png  URL:  https://your.coronium.server/imgs/image.png",
            "title": "Public Directory"
        },
        {
            "location": "/server-modules/api/",
            "text": "The API module allows you to create server-side api methods that can be called using the client-side \nAPI\n module. \n\n\nA server-side api is useful for type checking, validation, and more complex data handling, and in fact, is the only way to access the full functionality of the \nMySQL\n and \nMongo\n modules.\n\n\n\n\nClient-Side API\n\n\nMost data handling can be facilitated directly on the client-side, without the need to create a server-side api. See the client-side \nData\n module for Mongo, and the client-side \nMySQL\n module for MySQL.\n\n\n\n\nProjects\n\n\nServer-side api methods are housed in \"projects\" that are stored on the server. Projects allow you to seperate functionality between applications. \n\n\nProjects can also be based on a specific set of functionality, like user management, which can then be shared amongst multiple client applications. To switch between projects on the client-side, see the \nuseProject\n method in the client-side core module.\n\n\nCreating Projects\n\n\nYou create projects on the server using the Coronium command line tool.\n\n\nAdd Project\n\n\nYou will first need to log into your server using the \ncoronium\n user. Once logged in, run the following to create a new project:\n\n\nsudo coronium add <project-name>\n\n\n\n\n\nReplace the <project-name> above with your desired project name. The name should be alpha-numeric and contain no spaces. This will generate a project template.\n\n\nThe project is stored in the \n/home/coronium/projects/<project-name>\n directory.\n\n\nAt this point, you should connect to the server using SFTP and download the new project directory so that you can create the code for your api.\n\n\nDelete Project\n\n\nTo remove a project using the command line tool, run:\n\n\nsudo coronium del <project-name>\n\n\n\n\n\nYou can also delete a project by simply removing the project directory from the server.\n\n\nProject Files\n\n\nProject code is stored in the newly created project directory. The required \nmain.lua\n file will be generated when using the command line tool (see above).\n\n\nmain.lua\n\n\nThe main.lua file will contain your custom server-side api methods for the project. By default a simple \"echo\" test method is generated.\n\n\nmain.lua example\n\n\n-- Coronium Core API\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ntest\n(\n \ninput\n \n)\n\n  \nreturn\n \ninput\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nYou can call this method from the client using the client-side \nAPI\n module.\n\n\nClient-side example\n\n\ncore\n.\ninit\n({\n\n  \nserver\n \n=\n \n\"https://your.coronium.host\"\n,\n\n  \nkey\n \n=\n \n\"<coronium-server-key>\"\n,\n\n  \nproject\n \n=\n \n\"default\"\n\n\n})\n\n\n\nlocal\n \napiResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresponse\n.\nname\n)\n \n-- Jimmy\n\n  \nend\n\n\nend\n\n\ncore\n.\napi\n.\ntest\n({\nname\n=\n\"Jimmy\"\n},\n \napiResponse\n)\n\n\n\n\n\n\ncore.api\n\n\nTo create your api, you need to extend the \ncore.api\n object. As shown in the main.lua file above, this is done like so:\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\n\n\n\nAdd your api methods to the \napi\n object, and finally return the \napi\n object at the end of the file.\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\naddUser\n(\ninput\n)\n\n  \n...\n \n--code here\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nInput\n\n\nAPI methods have a single parameter, which is a \ntable\n of \ninput values\n sent up from the client-side \ncore.api\n method. Some methods may not need input, in which case the input parameter will be \nnil\n.\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\naddUser\n(\ninput\n)\n\n  \nlocal\n \nname\n \n=\n \ninput\n.\nname\n\n  \nlocal\n \nage\n \n=\n \ninput\n.\nage\n\n\n  \n...\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nReturn\n\n\nAll api methods must return a response.\n This can either be the result of the api operation, or an error (see errors below). You can only return a \nsingle\n response value.\n\n\nA response value can be one of the following Lua types: \nString\n, \nNumber\n, \nBoolean\n, or \nTable\n. String and Table values must be JSON encodable. The value returned will be sent back down to the client for consumption.\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ndoSomething\n(\ninput\n)\n\n\n  \nreturn\n \n\"Welcome to Coronium\"\n\n  \n--OR\n\n  \nreturn\n \n42\n\n  \n--OR\n\n  \nreturn\n \ntrue\n\n  \n--OR\n\n  \nreturn\n \n{\nname\n \n=\n \n\"Sally\"\n,\n \nage\n \n=\n \n34\n}\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nTo learn how to consume the response on the client, see the client-side \nAPI\n module.\n\n\nErrors\n\n\nAt times you may want to indicate to the client that an error has taken place in the server-side api operation. To do this, you return a \ncore.error\n response object. This will be interpeted by the client as an error event.\n\n\ncore\n.\nerror\n(\nmessage\n,\n \ncode\n)\n\n\n\n\n\n\nThe \ncore.error\n object requires a \nstring\n message parameter, and an optional \nnumber\n based error code.\n\n\nExample\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ngetUser\n(\ninput\n)\n\n  \nif\n \nnot\n \ninput\n.\nname\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\n\"The user name is missing!\"\n)\n\n  \nend\n\n\n  \nreturn\n \n\"Hello, \"\n \n..\n \ninput\n.\nname\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nUsing Modules\n\n\nMost often you will want to do something more useful than echoing data. You can use the server-side modules to add functionality to your api.\n\n\n\n\nClient-Side API\n\n\nMost data handling can be facilitated directly on the client-side, without the need to create a server-side api. See the client-side \nData\n module for Mongo, and the client-side \nMySQL\n module for MySQL.\n\n\n\n\nExamples\n\n\nList the available collections in a Mongo database:\n\n\nServer-side\n\n\n--main.lua\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\ngetCollections\n(\ninput\n)\n\n\n  \n--get the database name from the input\n\n  \nlocal\n \ndb_name\n \n=\n \ninput\n.\ndb_name\n\n\n  \n--get a mongo db instance\n\n  \nlocal\n \ndb\n,\n \nerr\n \n=\n \ncore\n.\nmongo\n(\ndb_name\n)\n\n\n  \n--check for errors\n\n  \nif\n \nnot\n \ndb\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \n--get the collection list\n\n  \nlocal\n \nlist\n,\n \nerr\n \n=\n \ndb\n:\nlistCollections\n()\n\n\n  \n--check for errors\n\n  \nif\n \nnot\n \nlist\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \n--otherwise return the list\n\n  \nreturn\n \nlist\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nSome things to note in the code above:\n\n\n\n\nErrors from the server-side modules can be passed to the client with \ncore.error\n.\n\n\nAny return values from server-side modules can be used in the \nreturn\n.\n\n\n\n\nTo issue a call to this api method on the client, we use the client-side \nAPI\n module:\n\n\nClient-side\n\n\nlocal\n \nfunction\n \napiResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \n--got collection list\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nprint\n(\nevt\n.\nresult\n[\ni\n])\n \n-- collection name\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\napi\n.\ngetCollections\n({\ndb_name\n=\n\"app\"\n},\n \napiResponse\n)\n\n\n\n\n\n\nGet a user using a MySQL query:\n\n\nServer-side\n\n\n--main.lua\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\nqueryUser\n(\ninput\n)\n\n\n  \n--get id number from the input\n\n  \nlocal\n \nid\n \n=\n \ninput\n.\nid\n\n\n  \n--check for id value\n\n  \nif\n \nnot\n \nid\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\n\"Id is missing!\"\n)\n\n  \nend\n\n\n  \n--build sql query\n\n  \nlocal\n \nq\n \n=\n \ncore\n.\nsf\n(\n\"SELECT * FROM users WHERE id=%d;\"\n,\n \ninput\n.\nid\n)\n\n\n  \n--run the query\n\n  \nlocal\n \nrecord\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nquery\n(\n\"app\"\n,\n \nq\n)\n\n\n  \n--check for error\n\n  \nif\n \nnot\n \nrecord\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \n--return the record\n\n  \nreturn\n \nrecord\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nClient-side\n\n\nlocal\n \nfunction\n \napiResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \n--result is a record\n\n    \nprint\n(\nevt\n.\nresult\n.\nname\n)\n \n--output 'name' column\n\n  \nend\n\n\nend\n\n\n\ncore\n.\napi\n.\nqueryUser\n({\nid\n=\n20\n},\n \napiResponse\n)\n\n\n\n\n\n\n\n\nThe following example can also be done directly from the client-side \nMySQL\n module.\n\n\n\n\nAssuming we have a MySQL database properly created called \"app\", we can quickly insert a new record to the \"users\" table like so:\n\n\nServer-side\n\n\n--main.lua\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\naddUser\n(\ninput\n)\n\n\n  \n--insert data using EZ query method\n\n  \nlocal\n \nid\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ninsert\n(\n\"app\"\n,\n \n{\n\n    \ntbl\n \n=\n \n\"users\"\n,\n\n    \n--pass the input directly, escaping string values\n\n    \nvalues\n \n=\n \ncore\n.\nmysql\n.\nescapeAll\n(\ninput\n)\n\n  \n})\n\n\n  \n--check for error\n\n  \nif\n \nnot\n \nid\n \nthen\n\n    \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n  \nend\n\n\n  \n--return new record id\n\n  \nreturn\n \nid\n\n\n\nend\n\n\n\nreturn\n \napi\n\n\n\n\n\n\nClient-side\n\n\nlocal\n \nfunction\n \napiResponse\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n)\n \n--result is id\n\n  \nend\n\n\nend\n\n\n\nlocal\n \ndata\n \n=\n \n{\n\n  \nname\n \n=\n \n\"Johnson\"\n,\n\n  \nage\n \n=\n \n32\n,\n\n  \nactive\n \n=\n \ntrue\n\n\n}\n\n\n\ncore\n.\napi\n.\naddUser\n(\ndata\n,\n \napiResponse\n)",
            "title": "API"
        },
        {
            "location": "/server-modules/api/#projects",
            "text": "Server-side api methods are housed in \"projects\" that are stored on the server. Projects allow you to seperate functionality between applications.   Projects can also be based on a specific set of functionality, like user management, which can then be shared amongst multiple client applications. To switch between projects on the client-side, see the  useProject  method in the client-side core module.",
            "title": "Projects"
        },
        {
            "location": "/server-modules/api/#creating-projects",
            "text": "You create projects on the server using the Coronium command line tool.",
            "title": "Creating Projects"
        },
        {
            "location": "/server-modules/api/#add-project",
            "text": "You will first need to log into your server using the  coronium  user. Once logged in, run the following to create a new project:  sudo coronium add <project-name>  Replace the <project-name> above with your desired project name. The name should be alpha-numeric and contain no spaces. This will generate a project template.  The project is stored in the  /home/coronium/projects/<project-name>  directory.  At this point, you should connect to the server using SFTP and download the new project directory so that you can create the code for your api.",
            "title": "Add Project"
        },
        {
            "location": "/server-modules/api/#delete-project",
            "text": "To remove a project using the command line tool, run:  sudo coronium del <project-name>  You can also delete a project by simply removing the project directory from the server.",
            "title": "Delete Project"
        },
        {
            "location": "/server-modules/api/#project-files",
            "text": "Project code is stored in the newly created project directory. The required  main.lua  file will be generated when using the command line tool (see above).",
            "title": "Project Files"
        },
        {
            "location": "/server-modules/api/#mainlua",
            "text": "The main.lua file will contain your custom server-side api methods for the project. By default a simple \"echo\" test method is generated.  main.lua example  -- Coronium Core API  local   api   =   core . api ()  function   api . test (   input   ) \n   return   input  end  return   api   You can call this method from the client using the client-side  API  module.  Client-side example  core . init ({ \n   server   =   \"https://your.coronium.host\" , \n   key   =   \"<coronium-server-key>\" , \n   project   =   \"default\"  })  local   apiResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . response . name )   -- Jimmy \n   end  end  core . api . test ({ name = \"Jimmy\" },   apiResponse )",
            "title": "main.lua"
        },
        {
            "location": "/server-modules/api/#coreapi",
            "text": "To create your api, you need to extend the  core.api  object. As shown in the main.lua file above, this is done like so:  local   api   =   core . api ()   Add your api methods to the  api  object, and finally return the  api  object at the end of the file.  Example  local   api   =   core . api ()  function   api . addUser ( input ) \n   ...   --code here  end  return   api",
            "title": "core.api"
        },
        {
            "location": "/server-modules/api/#input",
            "text": "API methods have a single parameter, which is a  table  of  input values  sent up from the client-side  core.api  method. Some methods may not need input, in which case the input parameter will be  nil .  Example  local   api   =   core . api ()  function   api . addUser ( input ) \n   local   name   =   input . name \n   local   age   =   input . age \n\n   ...  end  return   api",
            "title": "Input"
        },
        {
            "location": "/server-modules/api/#return",
            "text": "All api methods must return a response.  This can either be the result of the api operation, or an error (see errors below). You can only return a  single  response value.  A response value can be one of the following Lua types:  String ,  Number ,  Boolean , or  Table . String and Table values must be JSON encodable. The value returned will be sent back down to the client for consumption.  Example  local   api   =   core . api ()  function   api . doSomething ( input ) \n\n   return   \"Welcome to Coronium\" \n   --OR \n   return   42 \n   --OR \n   return   true \n   --OR \n   return   { name   =   \"Sally\" ,   age   =   34 }  end  return   api   To learn how to consume the response on the client, see the client-side  API  module.",
            "title": "Return"
        },
        {
            "location": "/server-modules/api/#errors",
            "text": "At times you may want to indicate to the client that an error has taken place in the server-side api operation. To do this, you return a  core.error  response object. This will be interpeted by the client as an error event.  core . error ( message ,   code )   The  core.error  object requires a  string  message parameter, and an optional  number  based error code.  Example  local   api   =   core . api ()  function   api . getUser ( input ) \n   if   not   input . name   then \n     return   core . error ( \"The user name is missing!\" ) \n   end \n\n   return   \"Hello, \"   ..   input . name  end  return   api",
            "title": "Errors"
        },
        {
            "location": "/server-modules/api/#using-modules",
            "text": "Most often you will want to do something more useful than echoing data. You can use the server-side modules to add functionality to your api.   Client-Side API  Most data handling can be facilitated directly on the client-side, without the need to create a server-side api. See the client-side  Data  module for Mongo, and the client-side  MySQL  module for MySQL.",
            "title": "Using Modules"
        },
        {
            "location": "/server-modules/api/#examples",
            "text": "List the available collections in a Mongo database:  Server-side  --main.lua  local   api   =   core . api ()  function   api . getCollections ( input ) \n\n   --get the database name from the input \n   local   db_name   =   input . db_name \n\n   --get a mongo db instance \n   local   db ,   err   =   core . mongo ( db_name ) \n\n   --check for errors \n   if   not   db   then \n     return   core . error ( err ) \n   end \n\n   --get the collection list \n   local   list ,   err   =   db : listCollections () \n\n   --check for errors \n   if   not   list   then \n     return   core . error ( err ) \n   end \n\n   --otherwise return the list \n   return   list  end  return   api   Some things to note in the code above:   Errors from the server-side modules can be passed to the client with  core.error .  Any return values from server-side modules can be used in the  return .   To issue a call to this api method on the client, we use the client-side  API  module:  Client-side  local   function   apiResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     --got collection list \n     for   i = 1 ,   # evt . result   do \n       print ( evt . result [ i ])   -- collection name \n     end \n   end  end  core . api . getCollections ({ db_name = \"app\" },   apiResponse )   Get a user using a MySQL query:  Server-side  --main.lua  local   api   =   core . api ()  function   api . queryUser ( input ) \n\n   --get id number from the input \n   local   id   =   input . id \n\n   --check for id value \n   if   not   id   then \n     return   core . error ( \"Id is missing!\" ) \n   end \n\n   --build sql query \n   local   q   =   core . sf ( \"SELECT * FROM users WHERE id=%d;\" ,   input . id ) \n\n   --run the query \n   local   record ,   err   =   core . mysql . query ( \"app\" ,   q ) \n\n   --check for error \n   if   not   record   then \n     return   core . error ( err ) \n   end \n\n   --return the record \n   return   record  end  return   api   Client-side  local   function   apiResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     --result is a record \n     print ( evt . result . name )   --output 'name' column \n   end  end  core . api . queryUser ({ id = 20 },   apiResponse )    The following example can also be done directly from the client-side  MySQL  module.   Assuming we have a MySQL database properly created called \"app\", we can quickly insert a new record to the \"users\" table like so:  Server-side  --main.lua  local   api   =   core . api ()  function   api . addUser ( input ) \n\n   --insert data using EZ query method \n   local   id ,   err   =   core . mysql . insert ( \"app\" ,   { \n     tbl   =   \"users\" , \n     --pass the input directly, escaping string values \n     values   =   core . mysql . escapeAll ( input ) \n   }) \n\n   --check for error \n   if   not   id   then \n     return   core . error ( err ) \n   end \n\n   --return new record id \n   return   id  end  return   api   Client-side  local   function   apiResponse ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result )   --result is id \n   end  end  local   data   =   { \n   name   =   \"Johnson\" , \n   age   =   32 , \n   active   =   true  }  core . api . addUser ( data ,   apiResponse )",
            "title": "Examples"
        },
        {
            "location": "/server-modules/data/",
            "text": "The \ndata\n module provides a simple interface to the underlying Mongo database. It is meant for basic tasks. See the \nMongo\n module if you require more advanced usage.\n\n\nYou can access this module directly from the client-side using the client \nData\n module.\n\n\ncore.data\n\n\nTo perform any of the object methods, you need a reference to the \ndata\n module.\n\n\ncore\n.\ndata\n(\nsource_name\n[,\n \ndb_name\n])\n\n\n\n\n\n\nReturns\n\n\nA source object, or \nnil\n and an error.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource_name\n\n\nThe source name to use for the objects.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndb_name\n\n\nSet a specific database. Default: \"_app\"\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nusers\n \n=\n \ncore\n.\ndata\n(\n\"users\"\n)\n\n\n\n\n\n\nget\n\n\n<\nsource\n>\n:\nget\n(\nidOrQuery\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nidOrQuery\n\n\nA string id or query table.\n\n\nString\n or \nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nobj\n,\n \nerr\n \n=\n \nusers\n:\nget\n(\n\"id1234\"\n)\n\n\n\n\n\n\n\n\nTo retrieve multiple data objects, see the \ngetPage\n method.\n\n\n\n\nsave\n\n\n<\nsource\n>\n:\nsave\n(\nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nobj\n\n\nA data object to save.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nid\n,\n \nerr\n \n=\n \nusers\n:\nsave\n(\nobj\n)\n\n\n\n\n\n\ndelete\n\n\n<\nsource\n>\n:\ndelete\n(\nidOrObj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nidOrObj\n\n\nAn object id string or data object with \n_id\n field.\n\n\nString\n or \nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nsuccess\n,\n \nerr\n \n=\n \nusers\n:\ndelete\n(\nobj\n)\n\n\n\n\n\n\nPagination\n\n\ngetPage\n\n\n<\nsource\n>\n:\ngetPage\n(\npage\n,\n \nperPage\n,\n \nsort\n,\n \nquery\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npage\n\n\nThe page number to return.\n\n\nnone\n\n\nNumber\n\n\nY\n\n\n\n\n\n\nperPage\n\n\nThe number of objects per page.\n\n\n20\n\n\nNumber\n\n\nN\n\n\n\n\n\n\nsort\n\n\nSort constant or sorting table.\n\n\ncore.ASC\n\n\nConst\n or \nTable\n\n\nN\n\n\n\n\n\n\nquery\n\n\nSpecialized query table.\n\n\n{ } (all records)\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nSort Constants\n\n\n\n\n\n\n\n\nEnum\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncore.ASC\n\n\nSort in an ascending order.\n\n\n\n\n\n\ncore.DESC\n\n\nSort in a descending order.\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nobjects\n \n=\n \nusers\n:\ngetPage\n({},\n \n1\n,\n \n10\n)",
            "title": "Data"
        },
        {
            "location": "/server-modules/data/#coredata",
            "text": "To perform any of the object methods, you need a reference to the  data  module.  core . data ( source_name [,   db_name ])   Returns  A source object, or  nil  and an error.  Parameters     Name  Description  Type  Required      source_name  The source name to use for the objects.  String  Y    db_name  Set a specific database. Default: \"_app\"  String  N     Example  local   users   =   core . data ( \"users\" )",
            "title": "core.data"
        },
        {
            "location": "/server-modules/data/#get",
            "text": "< source > : get ( idOrQuery )   Parameters     Name  Description  Type  Required      idOrQuery  A string id or query table.  String  or  Table  Y     Example  local   obj ,   err   =   users : get ( \"id1234\" )    To retrieve multiple data objects, see the  getPage  method.",
            "title": "get"
        },
        {
            "location": "/server-modules/data/#save",
            "text": "< source > : save ( obj )   Parameters     Name  Description  Type  Required      obj  A data object to save.  Table  Y     Example  local   id ,   err   =   users : save ( obj )",
            "title": "save"
        },
        {
            "location": "/server-modules/data/#delete",
            "text": "< source > : delete ( idOrObj )   Parameters     Name  Description  Type  Required      idOrObj  An object id string or data object with  _id  field.  String  or  Table  Y     Example  local   success ,   err   =   users : delete ( obj )",
            "title": "delete"
        },
        {
            "location": "/server-modules/data/#pagination",
            "text": "",
            "title": "Pagination"
        },
        {
            "location": "/server-modules/data/#getpage",
            "text": "< source > : getPage ( page ,   perPage ,   sort ,   query )   Parameters     Name  Description  Default  Type  Required      page  The page number to return.  none  Number  Y    perPage  The number of objects per page.  20  Number  N    sort  Sort constant or sorting table.  core.ASC  Const  or  Table  N    query  Specialized query table.  { } (all records)  Table  N     Sort Constants     Enum  Description      core.ASC  Sort in an ascending order.    core.DESC  Sort in a descending order.     Example  local   objects   =   users : getPage ({},   1 ,   10 )",
            "title": "getPage"
        },
        {
            "location": "/server-modules/files/",
            "text": "Provides methods to manage server side files.\n\n\n\n\nUpload / Download\n\n\nFile transfers are performed using the client-side \nFiles\n module.\n\n\n\n\n\n\nIf you'd like to transfer files using \nAmazon S3\n take a look at the \nS3 Lite\n plugin for Corona.\n\n\n\n\nlist\n\n\nList the files in the specified directory path. Returns a \ntable\n array, or \nnil\n and an error.\n\n\ncore\n.\nfiles\n.\nlist\n(\ndirpath\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndirpath\n\n\nThe directory to list.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nlocal\n \nlist\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\nlist\n(\n\"imgs\"\n)\n\n\n\n\n\n\n\n\nThis method will only list the \nfiles\n in the directory, not any directories. If no files are present, it will return an empty table.\n\n\n\n\nmove\n\n\nMove a file in the server files directory.\n\n\ncore\n.\nfiles\n.\nmove\n(\nsrcpath\n,\n \ndestpath\n,\n \noverwrite\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcpath\n\n\nThe source filepath with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndestpath\n\n\nThe destination filepath with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\noverwrite\n\n\nIf \ntrue\n overwrite existing files (default \nfalse\n).\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nok\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\nmove\n(\n\"imgs/image01.png\"\n,\n \n\"assets/image01.png\"\n)\n\n\n\n\n\n\ncopy\n\n\nCopy a file in the server files directory.\n\n\ncore\n.\nfiles\n.\ncopy\n(\nsrcpath\n,\n \ndestpath\n,\n \noverwrite\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcpath\n\n\nThe source filepath with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndestpath\n\n\nThe destination filepath with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\noverwrite\n\n\nIf \ntrue\n overwrite existing files (default \nfalse\n).\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nok\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\ncopy\n(\n\"imgs/image01.png\"\n,\n \n\"assets/image01.png\"\n)\n\n\n\n\n\n\nremove\n\n\nRemove a file from the server files directory. Returns \ntrue\n on success, or \nnil\n and an error.\n\n\ncore\n.\nfiles\n.\nremove\n(\nfilepath\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfilepath\n\n\nThe source filepath.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nok\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\nremove\n(\n\"imgs/image002.png\"\n)\n\n\n\n\n\n\nrename\n\n\nRename a file in the server files directory. Returns \ntrue\n on success, or \nnil\n and an error.\n\n\ncore\n.\nfiles\n.\nrename\n(\nfilepath\n,\n \nnew_name\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfilepath\n\n\nThe source filepath.\n\n\nString\n\n\nY\n\n\n\n\n\n\nnew_name\n\n\nThe name to rename the file to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nok\n,\n \nerr\n \n=\n \ncore\n.\nfiles\n.\nrename\n(\n\"imgs/image001.png\"\n,\n \n\"image002.png\"\n)\n\n\n\n\n\n\n\n\nThis rename method will not move a file. Any path supplied to the \nnew_name\n parameter will be ignored.",
            "title": "Files"
        },
        {
            "location": "/server-modules/files/#list",
            "text": "List the files in the specified directory path. Returns a  table  array, or  nil  and an error.  core . files . list ( dirpath )   Parameters     Name  Description  Type  Required      dirpath  The directory to list.  String  Y     local   list ,   err   =   core . files . list ( \"imgs\" )    This method will only list the  files  in the directory, not any directories. If no files are present, it will return an empty table.",
            "title": "list"
        },
        {
            "location": "/server-modules/files/#move",
            "text": "Move a file in the server files directory.  core . files . move ( srcpath ,   destpath ,   overwrite )   Parameters     Name  Description  Type  Required      srcpath  The source filepath with extension.  String  Y    destpath  The destination filepath with extension.  String  Y    overwrite  If  true  overwrite existing files (default  false ).  Boolean  N     Example  local   ok ,   err   =   core . files . move ( \"imgs/image01.png\" ,   \"assets/image01.png\" )",
            "title": "move"
        },
        {
            "location": "/server-modules/files/#copy",
            "text": "Copy a file in the server files directory.  core . files . copy ( srcpath ,   destpath ,   overwrite )   Parameters     Name  Description  Type  Required      srcpath  The source filepath with extension.  String  Y    destpath  The destination filepath with extension.  String  Y    overwrite  If  true  overwrite existing files (default  false ).  Boolean  N     Example  local   ok ,   err   =   core . files . copy ( \"imgs/image01.png\" ,   \"assets/image01.png\" )",
            "title": "copy"
        },
        {
            "location": "/server-modules/files/#remove",
            "text": "Remove a file from the server files directory. Returns  true  on success, or  nil  and an error.  core . files . remove ( filepath )   Parameters     Name  Description  Type  Required      filepath  The source filepath.  String  Y     Example  local   ok ,   err   =   core . files . remove ( \"imgs/image002.png\" )",
            "title": "remove"
        },
        {
            "location": "/server-modules/files/#rename",
            "text": "Rename a file in the server files directory. Returns  true  on success, or  nil  and an error.  core . files . rename ( filepath ,   new_name )   Parameters     Name  Description  Type  Required      filepath  The source filepath.  String  Y    new_name  The name to rename the file to.  String  Y     Example  local   ok ,   err   =   core . files . rename ( \"imgs/image001.png\" ,   \"image002.png\" )    This rename method will not move a file. Any path supplied to the  new_name  parameter will be ignored.",
            "title": "rename"
        },
        {
            "location": "/server-modules/mongo/",
            "text": "Important Note\n\n\nThe Mongo module has most, but not all, functionality of the full client. It is recommended that you manage your databases using an external tool. See \nAdministration\n below.\n\n\n\n\n\n\nTip\n\n\nFor simple data manipulation using Mongo, take a look at the \nData\n module.\n\n\n\n\ncore.mongo\n\n\nConnect to a database and return a database object. If the database does not exist, it will be created.\n\n\ncore\n.\nmongo\n(\n \ndb_name\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to connect to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ndb\n,\n \nerr\n \n=\n \ncore\n.\nmongo\n(\n \n\"app\"\n \n)\n \n\n\n\n\n\nuse\n\n\nChange the current working database. If the database does not exist, it will be created.\n\n\ndb\n:\nuse\n(\n \ndb_name\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to connect to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ndb\n \n=\n \ndb\n:\nuse\n(\n \n\"app2\"\n \n)\n\n\n\n\n\n\nclose\n\n\nClose the database connection.\n\n\ndb\n:\nclose\n()\n\n\n\n\n\n\n\n\nTo keep memory usage down, you should always close the database connection when finished.\n\n\n\n\ncollection\n\n\nSelect and return a collection to operate on. If the collection does not exist, it will be created.\n\n\ndb\n:\ncollection\n(\n \nname\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe collection name to use.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ncoll\n \n=\n \ndb\n:\ncollection\n(\n \n\"users\"\n \n)\n\n\n\n\n\n\nlistCollections\n\n\nRetreive a list of collections. Returns a \ntable\n array, or \nnil\n and an error.\n\n\ndb\n:\nlistCollections\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \nlist\n,\n \nerr\n \n=\n \ndb\n:\nlistCollections\n()\n\n\n\nfor\n \ni\n=\n1\n,\n \n#\nlist\n \ndo\n\n  \nprint\n(\nlist\n[\ni\n])\n \n-- collection name\n\n\nend\n\n\n\n\n\n\nCollections\n\n\nThe following methods operate on collections. See \ndb:collection\n above to gain access to a collection object.\n\n\nsave\n\n\nInserts or updates a single document. If no id field is present, creates a new document, otherwise updates the document. Returns the document id, or \nnil\n and an error. \n\n\ncollection\n:\nsave\n(\ndoc\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndoc\n\n\nA data table with the document data.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nInsert a new document\n\n\nlocal\n \ndoc\n \n=\n \n{\n\n  \nname\n \n=\n \n\"Jimmy\"\n,\n\n  \nage\n \n=\n \n20\n,\n\n  \nactive\n \n=\n \ntrue\n,\n\n  \ncolors\n \n=\n \n{\n\n    \n\"red\"\n,\n\n    \n\"green\"\n,\n\n    \n\"blue\"\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nid\n,\n \nerr\n \n=\n \ncoll\n:\nsave\n(\ndoc\n)\n\n\n\n\n\n\nUpdate an existing document\n\n\nlocal\n \ndoc\n \n=\n \ncoll\n:\nfindOne\n(\n<\nqueryOrId\n>\n)\n\n\n\ndoc\n.\nname\n \n=\n \n\"Nancy\"\n\n\n\nlocal\n \nid\n,\n \nerr\n \n=\n \ncoll\n:\nsave\n(\ndoc\n)\n\n\n\n\n\n\n\n\nThis method is the same as setting \nupsert=true\n when using the \nupdate\n method.\n\n\n\n\ninsert\n\n\nInsert multiple documents into a collection. Returns array of \nids\n and \nnumber\n inserted, or \nnil\n and an error.\n\n\ncollection\n:\ninsert\n(\n \ndocs\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndocs\n\n\nA table array of data tables with the document data.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ndocs\n \n=\n \n{\n\n  \n{\n\n    \nname\n \n=\n \n\"Tina\"\n,\n\n    \nage\n \n=\n \n24\n\n  \n},\n\n  \n{\n\n    \nname\n \n=\n \n\"Jeff\"\n,\n\n    \nage\n \n=\n \n36\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nids\n,\n \nerrOrNum\n \n=\n \ncoll\n:\ninsert\n(\n \ndocs\n \n)\n\n\n\n\n\n\nfindOne\n\n\nFind and return the first document that matches the query or id. Returns the \ndoc\n, or \nnil\n and an error.\n\n\ncollection\n:\nfindOne\n(\nqueryOrId\n,\n \nfields\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\nfields\n\n\nLimit the fields returned from the document. Returns all fields by default.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nBy query\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncoll\n:\nfindOne\n(\n \n{\nname\n=\n\"Jeff\"\n,\n \nage\n=\n36\n}\n \n)\n\n\n\n\n\n\nBy id\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncoll\n:\nfindOne\n(\n \n\"59a583516362392a28000001\"\n \n)\n\n\n\n\n\n\nLimit fields\n\n\n-- return only the 'name' field\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncoll\n:\nfindOne\n(\n \n{\nname\n=\n\"Jeff\"\n,\n \nage\n=\n36\n},\n \n{\nname\n=\ntrue\n}\n \n)\n\n\n\n-- return all except the 'name' field\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncoll\n:\nfindOne\n(\n \n{\nname\n=\n\"Jeff\"\n,\n \nage\n=\n36\n},\n \n{\nname\n=\nfalse\n}\n \n)\n\n\n\n\n\n\nSee also\n\n\n\n\nMongoDB to Lua\n\n\n\n\nfind\n\n\nFind multiple documents based on query. Returns a new \ncursor\n object.\n\n\ncollection\n:\nfind\n(\nquery\n,\n \nfields\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\nfields\n\n\nLimit the fields returned from the document. Returns all fields by default.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\n-- find documents where name equals \"Jimmy\"\n\n\nlocal\n \ncursor\n \n=\n \ncoll\n:\nfind\n({\n \nname\n \n=\n \n\"Jimmy\"\n \n})\n\n\n\n-- find documents where age greater than 20\n\n\nlocal\n \ncursor\n \n=\n \ncoll\n:\nfind\n({\n \nage\n \n=\n \n{[\n\"$gt\"\n]\n \n=\n \n20\n}\n \n})\n\n\n\n-- find documents where age greater than 20, and name is \"Tina\"\n\n\nlocal\n \ncursor\n \n=\n \ncoll\n:\nfind\n({\n \nage\n \n=\n \n{[\n\"$gt\"\n]\n \n=\n \n20\n},\n \nname\n \n=\n \n\"Tina\"\n \n})\n\n\n\n\n\n\n\n\nTip\n\n\nThis method returns a \ncursor\n object which is chainable. For example, to return all documents found by the query in one call: \nlocal docs = coll:find( query ):all()\n\n\n\n\nSee also\n\n\n\n\nCursor\n\n\nMongoDB to Lua\n\n\nResources\n\n\n\n\nfindAndModify\n\n\nFinds the first document that matches the query and updates it in place based on the \noptions\n. Returns old doc (unless \nnew\n option is set), or \nnil\n, and an error.\n\n\ncollection\n:\nfindAndModify\n(\nqueryOrId\n,\n \noptions\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\noptions\n\n\nOptions for the modification (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nOptions Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nupdate\n\n\nDescription\n\n\nTable\n\n\nY\n\n\n\n\n\n\nnew\n\n\nDescription\n\n\nBool\n\n\nN\n\n\n\n\n\n\nsort\n\n\nDescription\n\n\nTable\n\n\nN\n\n\n\n\n\n\nfields\n\n\nDescription\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nlocal\n \ndoc\n,\n \nerr\n \n=\n \ncol\n:\nfindAndModify\n(\nquery_or_id\n,\n \nopts\n)\n\n\n\n\n\n\nupdate\n\n\nUpdate a record. Returns \nnumber\n updated, or \nnil\n and an error.\n\n\ncollection\n:\nupdate\n(\nqueryOrId\n,\n \nupdateDoc\n,\n \nflags\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\nupdateDoc\n\n\nOptions for the modification (see examples).\n\n\nTable\n\n\nY\n\n\n\n\n\n\nflags\n\n\nFlags for the update (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nFlags Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nupsert\n\n\nDescription\n\n\nBool\n\n\nRequired\n\n\n\n\n\n\nmulti\n\n\nDescription\n\n\nBool\n\n\nRequired\n\n\n\n\n\n\n\n\nExample\n\n\nReplace entire document\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n({\nname\n=\n\"Jim\"\n},\n \n{\n\n  \nname\n=\n\"John\"\n,\n \n  \nage\n=\n45\n\n\n})\n\n\n\n\n\n\nUpdate and add fields\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n({\nname\n=\n\"John\"\n,\n \nage\n=\n45\n},\n \n{\n\n  \n[\n\"$set\"\n]\n \n=\n \n{\n \nage\n \n=\n \n43\n,\n \nactive\n \n=\n \ntrue\n \n}\n\n\n})\n\n\n\n\n\n\nUsing id\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n(\n\"59a583516362392a28000001\"\n,\n \n{\n\n  \n[\n\"$set\"\n]\n \n=\n \n{\n \nactive\n \n=\n \nfalse\n \n}\n\n\n})\n\n\n\n\n\n\nUpdate multiple\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n({\nactive\n \n=\n \nfalse\n},\n \n  \n{\n \n[\n\"$set\"\n]\n \n=\n \n{\n \nactive\n \n=\n \ntrue\n \n}\n \n},\n \n  \n{\n \nmulti\n \n=\n \ntrue\n \n}\n\n\n)\n\n\n\n\n\n\nAdd field to documents if missing\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncollection\n:\nupdate\n({\n \nactive\n \n=\n \n{[\n\"$exists\"\n]\n \n=\n \nfalse\n \n}},\n \n  \n{\n \n[\n\"$set\"\n]\n \n=\n \n{\n \nactive\n \n=\n \ntrue\n \n}\n \n},\n \n  \n{\n \nmulti\n \n=\n \ntrue\n \n}\n\n\n)\n\n\n\n\n\n\nSee also\n\n\n\n\nMongoDB to Lua\n\n\nResources\n\n\n\n\nremove\n\n\nRemove a document or documents based on the query. Returns \nnumber\n of records removed, or \nnil\n and an error.\n\n\ncollection\n:\nremove\n(\nqueryOrId\n,\n \nisSingle\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nqueryOrId\n\n\nA table based query, or a string based id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\nisSingle\n\n\nRemove only the first returned document when the query matches multiple documents.\n\n\nBool\n\n\nN\n\n\n\n\n\n\n\n\nlocal\n \nnum\n,\n \nerr\n \n=\n \ncoll\n:\nremove\n(\nquery_id\n,\n \nis_single\n)\n\n\n\n\n\n\ndrop\n\n\nRemove a collection and all the containing documents. Returns \ntrue\n, or \nnil\n and an error.\n\n\ncollection\n:\ndrop\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ndrop\n()\n\n\n\n\n\n\nrename\n\n\nRename a collection. Returns newly named collection, or \nnil\n and an error.\n\n\ncollection\n:\nrename\n(\nnew_name\n,\n \ndrop\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nnew_name\n\n\nThe preferred name for the collection.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndrop\n\n\nClear all documents before renaming. Default: false\n\n\nBool\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nnew_col\n,\n \nerr\n \n=\n \ncol\n:\nrename\n(\nnew_name\n,\n \ndrop\n)\n\n\n\n\n\n\nMoving to another database\n\n\nTo rename and move the collection to another database, pass the full namespace to the \nnew_name\n parameter:\n\n\n-- namespace <db>.<collection>\n\n\ncol\n:\nrename\n(\n\"otherdb.newname\"\n)\n\n\n\n\n\n\ngetIndexes\n\n\nThe current collection indexes. Returns a \ntable\n array with index objects, or \nnil\n and an error.\n\n\ncollection\n:\ngetIndexes\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nIndex Object Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nThe index key info.\n\n\nTable\n\n\n\n\n\n\nname\n\n\nThe index name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nindexes\n,\n \nerr\n \n=\n \ncoll\n:\ngetIndexes\n()\n\n\n\nfor\n \ni\n=\n1\n,\n \n#\nindexes\n \ndo\n\n  \nlocal\n \nindex\n \n=\n \nindexes\n[\ni\n]\n\n  \n--index key info\n\n  \nfor\n \nfield\n,\n \nopt\n \nin\n \npairs\n(\nindex\n.\nkey\n)\n \ndo\n\n    \nprint\n(\nfield\n,\n \nopt\n)\n\n  \nend\n\n  \n--index name\n\n  \nprint\n(\nindex\n.\nname\n)\n\n\nend\n\n\n\n\n\n\ncreateIndex\n\n\nCreate index(es) for a collection. Returns \ntrue\n, or \nnil\n and an error.\n\n\ncollection\n:\ncreateIndex\n(\nindex_arr\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nindex_arr\n\n\nA table array of index objects.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nSimple index\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ncreateIndex\n({\n\n  \n{\n \nkey\n \n=\n \n{\n \nage\n \n=\n \n1\n \n}\n \n}\n\n\n})\n\n\n\n\n\n\nCompound index\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ncreateIndex\n({\n\n  \n{\n \nkey\n \n=\n \n{\n \nage\n \n=\n \n1\n,\n \nname\n \n=\n \n-\n1\n \n}\n \n}\n\n\n})\n\n\n\n\n\n\nCreate multiple indexes\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ncreateIndex\n({\n\n  \n{\n \nkey\n \n=\n \n{\n \nname\n \n=\n \n1\n \n}\n \n},\n\n  \n{\n \nkey\n \n=\n \n{\n \nage\n \n=\n \n-\n1\n,\n \nscore\n \n=\n \n1\n \n}\n \n}\n\n\n})\n\n\n\n\n\n\nIndex names\n\n\nBy default Mongo will generate the index name based on the fields passed. To set an index name manually, pass a \nname\n key in the object.\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ncreateIndex\n({\n\n  \n{\n \nkey\n \n=\n \n{\n \nage\n \n=\n \n1\n \n},\n \nname\n \n=\n \n\"age_asc\"\n \n}\n\n\n})\n\n\n\n\n\n\ndropIndex\n\n\nDrop indexes for a collection. Returns \ntrue\n, or \nnil\n and an error.\n\n\ncollection\n:\ndropIndex\n(\n \nname\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nindex_name\n\n\nThe index name to drop.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncoll\n:\ndropIndex\n(\n \n\"age_asc\"\n \n)\n\n\n\n\n\n\nSee also\n\n\n\n\ngetIndexes\n\n\n\n\naggregate\n\n\nPerforms aggregation operation based on the pipeline commands. By default returns a cursor, or \nnil\n and an error.\n\n\ncollection\n:\naggregate\n(\npipeline\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npipeline\n\n\nThe aggregation pipeline commands.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ncur\n,\n \nerr\n \n=\n \nusers\n:\naggregate\n({\n\n  \n{\n \n[\n\"$project\"\n]\n \n=\n \n{\n \nname\n \n=\n \n{\n \n[\n\"$toUpper\"\n]\n \n=\n \n\"$name\"\n \n},\n \n_id\n \n=\n \n0\n \n}\n \n},\n\n  \n{\n \n[\n\"$sort\"\n]\n \n=\n \n{\n \nname\n \n=\n \n1\n \n}\n \n}\n\n\n})\n\n\n\n\n\n\nOutput aggregation results to a collection instead of a cursor\n\n\n\n\nThe \n$out\n key must be the last step in the pipeline. Creates and returns a new collection.\n\n\n\n\nlocal\n \ncoll\n,\n \nerr\n \n=\n \nusers\n:\naggregate\n({\n\n  \n{\n \n[\n\"$project\"\n]\n \n=\n \n{\n \nname\n \n=\n \n{\n \n[\n\"$toUpper\"\n]\n \n=\n \n\"$name\"\n \n},\n \n_id\n \n=\n \n0\n \n}\n \n},\n\n  \n{\n \n[\n\"$sort\"\n]\n \n=\n \n{\n \nname\n \n=\n \n1\n \n}\n \n},\n\n  \n{\n \n[\n\"$out\"\n]\n \n=\n \n\"uppernames\"\n \n}\n\n\n})\n\n\n\n\n\n\nSee also\n\n\n\n\nResources\n\n\n\n\nCursor\n\n\nA cursor object contains a group of documents returned from the \nfind\n method. After setting the needed cursor methods, use the \nall\n or \nnext\n cursor method to retrieve the documents. For example, using \nall\n:\n\n\n-- return first 10 docs from the find request\n\n\nlocal\n \ndocs\n \n=\n \ncursor\n:\nlimit\n(\n10\n):\nall\n()\n\n\n\n\n\n\n\n\nTip\n\n\nCursor object methods are chainable.\n\n\n\n\nall\n\n\nReturn document(s) based on the previous cursor options. Returns a \ntable\n array of documents, or \nnil\n and an error.\n\n\ncursor\n:\nall\n()\n\n\n\n\n\n\n\n\nImportant\n\n\nAlways call this method last (or in a chain), to retrieve the documents from the cursor.\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \ndocs\n,\n \nerr\n \n=\n \ncur\n:\nall\n()\n\n\n\n\n\n\nsort\n\n\nSort the documents currently held in the cursor based on the sorting table. Returns the cursor.\n\n\ncursor\n:\nsort\n(\n \nsort_tbl\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsort_tbl\n\n\nA table with field based sorting options.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\n--sort by age, ascending\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nsort\n({\n \nage\n \n=\n \ncore\n.\nASC\n \n})\n\n\n\n--sort by age descending and name ascending\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nsort\n({\nage\n \n=\n \ncore\n.\nDESC\n,\n \nname\n \n=\n \ncore\n.\nASC\n \n})\n\n\n\n\n\n\nskip\n\n\nSkip a specific amount of documents in the cursor results. Returns the cursor.\n\n\ncursor\n:\nskip\n(\nnum\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nnum\n\n\nThe amount of records to skip.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\n--skip the first 20 documents\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nskip\n(\n \n20\n \n)\n\n\n\n\n\n\nlimit\n\n\nLimit the amount of documents returned based on the current cursor options. Returns the cursor.\n\n\ncursor\n:\nlimit\n(\nnum\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nnum\n\n\nThe records limit amount.\n\n\nNumber\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\n--return the first 10 documents\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nlimit\n(\n \n10\n \n)\n\n\n\n\n\n\ncount\n\n\nReturn the current document amount based on the current cursor options. Returns a \nnumber\n.\n\n\ncursor\n:\ncount\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \ncnt\n \n=\n \ncur\n:\ncount\n()\n\n\n\n\n\n\nrewind\n\n\nSet the cursor pointer back to the begining of the document results. Returns the cursor.\n\n\ncursor\n:\nrewind\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nlocal\n \ncur\n \n=\n \ncur\n:\nrewind\n()\n\n\n\n\n\n\nnext\n\n\nInterate over the cursor results. On each call, returns a document, or \nnil\n and an error.\n\n\ncursor\n:\nnext\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no parameters.\n\n\nExample\n\n\nwhile\n \ntrue\n \ndo\n\n  \nlocal\n \ndoc\n \n=\n \ncur\n:\nnext\n()\n\n  \nif\n \ndoc\n \n==\n \nnil\n \nthen\n \nbreak\n \nend\n\n\nend\n\n\n\n\n\n\nSee also\n\n\n\n\nall\n\n\nrewind\n\n\n\n\ndistinct\n\n\nPull distinct key values from the cursor results. Returns a \ntable\n array, or \nnil\n and an error.\n\n\ncursor\n:\ndistinct\n(\nkey\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nThe field key to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nres\n,\n \nerr\n \n=\n \ncur\n:\ndistinct\n(\n \n\"age\"\n \n)\n\n\n-- 'res' is a table array\n\n\n\n\n\n\nMongoDB to Lua\n\n\nMongoDB used JSON objects. When viewing the documentation on the MongoDB website, you must convert the JSON information to Lua. What follows are some tips to do that.\n\n\nOperators\n\n\nMongoDB uses special operators that are prefixed with a dollar sign ( $ ). These operators keys must be set using an array style syntax when providing them using Lua.\n\n\n\n\n\n\n\n\nMongoDB Key\n\n\nLua Key\n\n\n\n\n\n\n\n\n\n\n$inc\n\n\n[\"$inc\"]\n\n\n\n\n\n\n$set\n\n\n[\"$set\"]\n\n\n\n\n\n\n\n\nExample\n\n\ncoll\n:\nupdate\n({\nname\n=\n\"Jimmy\"\n},\n \n{\n\n  \n[\n\"$set\"\n]\n \n=\n \n{\n\n    \nage\n \n=\n \n23\n\n  \n}\n\n\n})\n\n\n\n\n\n\nArrays\n\n\nArrays are rendered as indexed tables.\n\n\n\n\n\n\n\n\nMongoDB Array\n\n\nLua Array\n\n\n\n\n\n\n\n\n\n\n[\"red\", 23, true]\n\n\n{\"red\", 23, true}\n\n\n\n\n\n\n\n\nExample\n\n\ncoll\n:\ninsert\n({\n\n  \nname\n \n=\n \n\"Tina\"\n,\n\n  \ncolors\n \n=\n \n{\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n}\n\n\n})\n\n\n\n\n\n\nAppend values\n\n\nAppend a single value\n\n\ncoll\n:\nupdate\n(\n<\nqueryOrId\n>\n,\n \n{\n\n  \n[\n\"$push\"\n]\n \n=\n \n{\n\n    \ncolors\n \n=\n \n\"yellow\"\n\n  \n}\n\n\n})\n\n\n\n\n\n\nAppend multiple values\n\n\ncoll\n:\nupdate\n(\n<\nqueryOrId\n>\n,\n \n{\n\n  \n[\n\"$push\"\n]\n \n=\n \n{\n\n    \ncolors\n \n=\n \n{\n \n[\n\"$each\"\n]\n \n=\n \n{\n \n\"brown\"\n,\n \n\"purple\"\n \n}\n \n}\n\n  \n}\n\n\n})\n\n\n\n\n\n\nRemove values\n\n\nRemove first element\n\n\ncoll\n:\nupdate\n(\n<\nqueryOrId\n>\n,\n \n{\n\n  \n[\n\"$pop\"\n]\n \n=\n \n{\n\n    \ncolors\n \n=\n \n-\n1\n\n  \n}\n\n\n})\n\n\n\n\n\n\nRemove last element\n\n\ncoll\n:\nupdate\n(\n<\nqueryOrId\n>\n,\n \n{\n\n  \n[\n\"$pop\"\n]\n \n=\n \n{\n\n    \ncolors\n \n=\n \n1\n\n  \n}\n\n\n})\n\n\n\n\n\n\nResources\n\n\n\n\nFind Examples\n\n\nQuery Operators\n\n\nUpdate Operators\n\n\nArray Update Operators\n\n\nAggregation Operators\n\n\nSQL to MongoDB Mapping Chart\n\n\n\n\nAdministration\n\n\nYou can and should manage your Mongo databases using a standalone tool. Below are some free resources for managing Mongo databases.\n\n\n\n\nMongoBooster\n\n\nStudio 3T\n\n\n\n\nTo connect to the Mongo database, use the host address of the server, and the password that was set when installing Coronium Core.",
            "title": "Mongo"
        },
        {
            "location": "/server-modules/mongo/#coremongo",
            "text": "Connect to a database and return a database object. If the database does not exist, it will be created.  core . mongo (   db_name   )   Parameters     Name  Description  Type  Required      db_name  The database to connect to.  String  Y     Example  local   db ,   err   =   core . mongo (   \"app\"   )",
            "title": "core.mongo"
        },
        {
            "location": "/server-modules/mongo/#use",
            "text": "Change the current working database. If the database does not exist, it will be created.  db : use (   db_name   )   Parameters     Name  Description  Type  Required      db_name  The database to connect to.  String  Y     Example  local   db   =   db : use (   \"app2\"   )",
            "title": "use"
        },
        {
            "location": "/server-modules/mongo/#close",
            "text": "Close the database connection.  db : close ()    To keep memory usage down, you should always close the database connection when finished.",
            "title": "close"
        },
        {
            "location": "/server-modules/mongo/#collection",
            "text": "Select and return a collection to operate on. If the collection does not exist, it will be created.  db : collection (   name   )   Parameters     Name  Description  Type  Required      name  The collection name to use.  String  Y     Example  local   coll   =   db : collection (   \"users\"   )",
            "title": "collection"
        },
        {
            "location": "/server-modules/mongo/#listcollections",
            "text": "Retreive a list of collections. Returns a  table  array, or  nil  and an error.  db : listCollections ()   Parameters  This method has no parameters.  Example  local   list ,   err   =   db : listCollections ()  for   i = 1 ,   # list   do \n   print ( list [ i ])   -- collection name  end",
            "title": "listCollections"
        },
        {
            "location": "/server-modules/mongo/#collections",
            "text": "The following methods operate on collections. See  db:collection  above to gain access to a collection object.",
            "title": "Collections"
        },
        {
            "location": "/server-modules/mongo/#save",
            "text": "Inserts or updates a single document. If no id field is present, creates a new document, otherwise updates the document. Returns the document id, or  nil  and an error.   collection : save ( doc )   Parameters     Name  Description  Type  Required      doc  A data table with the document data.  Table  Y     Example  Insert a new document  local   doc   =   { \n   name   =   \"Jimmy\" , \n   age   =   20 , \n   active   =   true , \n   colors   =   { \n     \"red\" , \n     \"green\" , \n     \"blue\" \n   }  }  local   id ,   err   =   coll : save ( doc )   Update an existing document  local   doc   =   coll : findOne ( < queryOrId > )  doc . name   =   \"Nancy\"  local   id ,   err   =   coll : save ( doc )    This method is the same as setting  upsert=true  when using the  update  method.",
            "title": "save"
        },
        {
            "location": "/server-modules/mongo/#insert",
            "text": "Insert multiple documents into a collection. Returns array of  ids  and  number  inserted, or  nil  and an error.  collection : insert (   docs   )   Parameters     Name  Description  Type  Required      docs  A table array of data tables with the document data.  Table  Y     Example  local   docs   =   { \n   { \n     name   =   \"Tina\" , \n     age   =   24 \n   }, \n   { \n     name   =   \"Jeff\" , \n     age   =   36 \n   }  }  local   ids ,   errOrNum   =   coll : insert (   docs   )",
            "title": "insert"
        },
        {
            "location": "/server-modules/mongo/#findone",
            "text": "Find and return the first document that matches the query or id. Returns the  doc , or  nil  and an error.  collection : findOne ( queryOrId ,   fields )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    fields  Limit the fields returned from the document. Returns all fields by default.  Table  N     Example  By query  local   doc ,   err   =   coll : findOne (   { name = \"Jeff\" ,   age = 36 }   )   By id  local   doc ,   err   =   coll : findOne (   \"59a583516362392a28000001\"   )   Limit fields  -- return only the 'name' field  local   doc ,   err   =   coll : findOne (   { name = \"Jeff\" ,   age = 36 },   { name = true }   )  -- return all except the 'name' field  local   doc ,   err   =   coll : findOne (   { name = \"Jeff\" ,   age = 36 },   { name = false }   )   See also   MongoDB to Lua",
            "title": "findOne"
        },
        {
            "location": "/server-modules/mongo/#find",
            "text": "Find multiple documents based on query. Returns a new  cursor  object.  collection : find ( query ,   fields )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    fields  Limit the fields returned from the document. Returns all fields by default.  Table  N     Example  -- find documents where name equals \"Jimmy\"  local   cursor   =   coll : find ({   name   =   \"Jimmy\"   })  -- find documents where age greater than 20  local   cursor   =   coll : find ({   age   =   {[ \"$gt\" ]   =   20 }   })  -- find documents where age greater than 20, and name is \"Tina\"  local   cursor   =   coll : find ({   age   =   {[ \"$gt\" ]   =   20 },   name   =   \"Tina\"   })    Tip  This method returns a  cursor  object which is chainable. For example, to return all documents found by the query in one call:  local docs = coll:find( query ):all()   See also   Cursor  MongoDB to Lua  Resources",
            "title": "find"
        },
        {
            "location": "/server-modules/mongo/#findandmodify",
            "text": "Finds the first document that matches the query and updates it in place based on the  options . Returns old doc (unless  new  option is set), or  nil , and an error.  collection : findAndModify ( queryOrId ,   options )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    options  Options for the modification (see below).  Table  Y     Options Keys     Name  Description  Type  Required      update  Description  Table  Y    new  Description  Bool  N    sort  Description  Table  N    fields  Description  Table  N     local   doc ,   err   =   col : findAndModify ( query_or_id ,   opts )",
            "title": "findAndModify"
        },
        {
            "location": "/server-modules/mongo/#update",
            "text": "Update a record. Returns  number  updated, or  nil  and an error.  collection : update ( queryOrId ,   updateDoc ,   flags )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    updateDoc  Options for the modification (see examples).  Table  Y    flags  Flags for the update (see below).  Table  Y     Flags Keys     Name  Description  Type  Required      upsert  Description  Bool  Required    multi  Description  Bool  Required     Example  Replace entire document  local   num ,   err   =   collection : update ({ name = \"Jim\" },   { \n   name = \"John\" ,  \n   age = 45  })   Update and add fields  local   num ,   err   =   collection : update ({ name = \"John\" ,   age = 45 },   { \n   [ \"$set\" ]   =   {   age   =   43 ,   active   =   true   }  })   Using id  local   num ,   err   =   collection : update ( \"59a583516362392a28000001\" ,   { \n   [ \"$set\" ]   =   {   active   =   false   }  })   Update multiple  local   num ,   err   =   collection : update ({ active   =   false },  \n   {   [ \"$set\" ]   =   {   active   =   true   }   },  \n   {   multi   =   true   }  )   Add field to documents if missing  local   num ,   err   =   collection : update ({   active   =   {[ \"$exists\" ]   =   false   }},  \n   {   [ \"$set\" ]   =   {   active   =   true   }   },  \n   {   multi   =   true   }  )   See also   MongoDB to Lua  Resources",
            "title": "update"
        },
        {
            "location": "/server-modules/mongo/#remove",
            "text": "Remove a document or documents based on the query. Returns  number  of records removed, or  nil  and an error.  collection : remove ( queryOrId ,   isSingle )   Parameters     Name  Description  Type  Required      queryOrId  A table based query, or a string based id.  Table  or  String  Y    isSingle  Remove only the first returned document when the query matches multiple documents.  Bool  N     local   num ,   err   =   coll : remove ( query_id ,   is_single )",
            "title": "remove"
        },
        {
            "location": "/server-modules/mongo/#drop",
            "text": "Remove a collection and all the containing documents. Returns  true , or  nil  and an error.  collection : drop ()   Parameters  This method has no parameters.  Example  local   res ,   err   =   coll : drop ()",
            "title": "drop"
        },
        {
            "location": "/server-modules/mongo/#rename",
            "text": "Rename a collection. Returns newly named collection, or  nil  and an error.  collection : rename ( new_name ,   drop )   Parameters     Name  Description  Type  Required      new_name  The preferred name for the collection.  String  Y    drop  Clear all documents before renaming. Default: false  Bool  N     Example  local   new_col ,   err   =   col : rename ( new_name ,   drop )   Moving to another database  To rename and move the collection to another database, pass the full namespace to the  new_name  parameter:  -- namespace <db>.<collection>  col : rename ( \"otherdb.newname\" )",
            "title": "rename"
        },
        {
            "location": "/server-modules/mongo/#getindexes",
            "text": "The current collection indexes. Returns a  table  array with index objects, or  nil  and an error.  collection : getIndexes ()   Parameters  This method has no parameters.  Index Object Keys     Name  Description  Type      key  The index key info.  Table    name  The index name.  String     Example  local   indexes ,   err   =   coll : getIndexes ()  for   i = 1 ,   # indexes   do \n   local   index   =   indexes [ i ] \n   --index key info \n   for   field ,   opt   in   pairs ( index . key )   do \n     print ( field ,   opt ) \n   end \n   --index name \n   print ( index . name )  end",
            "title": "getIndexes"
        },
        {
            "location": "/server-modules/mongo/#createindex",
            "text": "Create index(es) for a collection. Returns  true , or  nil  and an error.  collection : createIndex ( index_arr )   Parameters     Name  Description  Type  Required      index_arr  A table array of index objects.  Table  Y     Example  Simple index  local   res ,   err   =   coll : createIndex ({ \n   {   key   =   {   age   =   1   }   }  })   Compound index  local   res ,   err   =   coll : createIndex ({ \n   {   key   =   {   age   =   1 ,   name   =   - 1   }   }  })   Create multiple indexes  local   res ,   err   =   coll : createIndex ({ \n   {   key   =   {   name   =   1   }   }, \n   {   key   =   {   age   =   - 1 ,   score   =   1   }   }  })   Index names  By default Mongo will generate the index name based on the fields passed. To set an index name manually, pass a  name  key in the object.  local   res ,   err   =   coll : createIndex ({ \n   {   key   =   {   age   =   1   },   name   =   \"age_asc\"   }  })",
            "title": "createIndex"
        },
        {
            "location": "/server-modules/mongo/#dropindex",
            "text": "Drop indexes for a collection. Returns  true , or  nil  and an error.  collection : dropIndex (   name   )   Parameters     Name  Description  Type  Required      index_name  The index name to drop.  String  Y     Example  local   res ,   err   =   coll : dropIndex (   \"age_asc\"   )   See also   getIndexes",
            "title": "dropIndex"
        },
        {
            "location": "/server-modules/mongo/#aggregate",
            "text": "Performs aggregation operation based on the pipeline commands. By default returns a cursor, or  nil  and an error.  collection : aggregate ( pipeline )   Parameters     Name  Description  Type  Required      pipeline  The aggregation pipeline commands.  Table  Y     Example  local   cur ,   err   =   users : aggregate ({ \n   {   [ \"$project\" ]   =   {   name   =   {   [ \"$toUpper\" ]   =   \"$name\"   },   _id   =   0   }   }, \n   {   [ \"$sort\" ]   =   {   name   =   1   }   }  })   Output aggregation results to a collection instead of a cursor   The  $out  key must be the last step in the pipeline. Creates and returns a new collection.   local   coll ,   err   =   users : aggregate ({ \n   {   [ \"$project\" ]   =   {   name   =   {   [ \"$toUpper\" ]   =   \"$name\"   },   _id   =   0   }   }, \n   {   [ \"$sort\" ]   =   {   name   =   1   }   }, \n   {   [ \"$out\" ]   =   \"uppernames\"   }  })   See also   Resources",
            "title": "aggregate"
        },
        {
            "location": "/server-modules/mongo/#cursor",
            "text": "A cursor object contains a group of documents returned from the  find  method. After setting the needed cursor methods, use the  all  or  next  cursor method to retrieve the documents. For example, using  all :  -- return first 10 docs from the find request  local   docs   =   cursor : limit ( 10 ): all ()    Tip  Cursor object methods are chainable.",
            "title": "Cursor"
        },
        {
            "location": "/server-modules/mongo/#all",
            "text": "Return document(s) based on the previous cursor options. Returns a  table  array of documents, or  nil  and an error.  cursor : all ()    Important  Always call this method last (or in a chain), to retrieve the documents from the cursor.   Parameters  This method has no parameters.  Example  local   docs ,   err   =   cur : all ()",
            "title": "all"
        },
        {
            "location": "/server-modules/mongo/#sort",
            "text": "Sort the documents currently held in the cursor based on the sorting table. Returns the cursor.  cursor : sort (   sort_tbl   )   Parameters     Name  Description  Type  Required      sort_tbl  A table with field based sorting options.  Table  Y     Example  --sort by age, ascending  local   cur   =   cur : sort ({   age   =   core . ASC   })  --sort by age descending and name ascending  local   cur   =   cur : sort ({ age   =   core . DESC ,   name   =   core . ASC   })",
            "title": "sort"
        },
        {
            "location": "/server-modules/mongo/#skip",
            "text": "Skip a specific amount of documents in the cursor results. Returns the cursor.  cursor : skip ( num )   Parameters     Name  Description  Type  Required      num  The amount of records to skip.  Number  Y     Example  --skip the first 20 documents  local   cur   =   cur : skip (   20   )",
            "title": "skip"
        },
        {
            "location": "/server-modules/mongo/#limit",
            "text": "Limit the amount of documents returned based on the current cursor options. Returns the cursor.  cursor : limit ( num )   Parameters     Name  Description  Type  Required      num  The records limit amount.  Number  Y     Example  --return the first 10 documents  local   cur   =   cur : limit (   10   )",
            "title": "limit"
        },
        {
            "location": "/server-modules/mongo/#count",
            "text": "Return the current document amount based on the current cursor options. Returns a  number .  cursor : count ()   Parameters  This method has no parameters.  Example  local   cnt   =   cur : count ()",
            "title": "count"
        },
        {
            "location": "/server-modules/mongo/#rewind",
            "text": "Set the cursor pointer back to the begining of the document results. Returns the cursor.  cursor : rewind ()   Parameters  This method has no parameters.  Example  local   cur   =   cur : rewind ()",
            "title": "rewind"
        },
        {
            "location": "/server-modules/mongo/#next",
            "text": "Interate over the cursor results. On each call, returns a document, or  nil  and an error.  cursor : next ()   Parameters  This method has no parameters.  Example  while   true   do \n   local   doc   =   cur : next () \n   if   doc   ==   nil   then   break   end  end   See also   all  rewind",
            "title": "next"
        },
        {
            "location": "/server-modules/mongo/#distinct",
            "text": "Pull distinct key values from the cursor results. Returns a  table  array, or  nil  and an error.  cursor : distinct ( key )   Parameters     Name  Description  Type  Required      key  The field key to operate on.  String  Y     Example  local   res ,   err   =   cur : distinct (   \"age\"   )  -- 'res' is a table array",
            "title": "distinct"
        },
        {
            "location": "/server-modules/mongo/#mongodb-to-lua",
            "text": "MongoDB used JSON objects. When viewing the documentation on the MongoDB website, you must convert the JSON information to Lua. What follows are some tips to do that.",
            "title": "MongoDB to Lua"
        },
        {
            "location": "/server-modules/mongo/#operators",
            "text": "MongoDB uses special operators that are prefixed with a dollar sign ( $ ). These operators keys must be set using an array style syntax when providing them using Lua.     MongoDB Key  Lua Key      $inc  [\"$inc\"]    $set  [\"$set\"]     Example  coll : update ({ name = \"Jimmy\" },   { \n   [ \"$set\" ]   =   { \n     age   =   23 \n   }  })",
            "title": "Operators"
        },
        {
            "location": "/server-modules/mongo/#arrays",
            "text": "Arrays are rendered as indexed tables.     MongoDB Array  Lua Array      [\"red\", 23, true]  {\"red\", 23, true}     Example  coll : insert ({ \n   name   =   \"Tina\" , \n   colors   =   { \"red\" , \"green\" , \"blue\" }  })",
            "title": "Arrays"
        },
        {
            "location": "/server-modules/mongo/#append-values",
            "text": "Append a single value  coll : update ( < queryOrId > ,   { \n   [ \"$push\" ]   =   { \n     colors   =   \"yellow\" \n   }  })   Append multiple values  coll : update ( < queryOrId > ,   { \n   [ \"$push\" ]   =   { \n     colors   =   {   [ \"$each\" ]   =   {   \"brown\" ,   \"purple\"   }   } \n   }  })",
            "title": "Append values"
        },
        {
            "location": "/server-modules/mongo/#remove-values",
            "text": "Remove first element  coll : update ( < queryOrId > ,   { \n   [ \"$pop\" ]   =   { \n     colors   =   - 1 \n   }  })   Remove last element  coll : update ( < queryOrId > ,   { \n   [ \"$pop\" ]   =   { \n     colors   =   1 \n   }  })",
            "title": "Remove values"
        },
        {
            "location": "/server-modules/mongo/#resources",
            "text": "Find Examples  Query Operators  Update Operators  Array Update Operators  Aggregation Operators  SQL to MongoDB Mapping Chart",
            "title": "Resources"
        },
        {
            "location": "/server-modules/mongo/#administration",
            "text": "You can and should manage your Mongo databases using a standalone tool. Below are some free resources for managing Mongo databases.   MongoBooster  Studio 3T   To connect to the Mongo database, use the host address of the server, and the password that was set when installing Coronium Core.",
            "title": "Administration"
        },
        {
            "location": "/server-modules/mysql/",
            "text": "The \nmysql\n module allows you to run queries against the local MySQL server instance. You can also connect to remote databases.\n\n\nquery | q\n\n\ncore\n.\nmysql\n.\nquery\n(\n \ndb_name\n,\n \nquery_str\n \n)\n\n\n--OR\n\n\ncore\n.\nmysql\n.\nq\n(\n \ndb_name\n,\n \nquery_str\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database name to issue commands against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nquery_str\n\n\nThe MySQL query to send to the database.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\n\n\nTo connect to remote databases see \nRemote Databases\n.\n\n\n\n\nResult Values\n\n\nThe following outlines the \nresult\n values returned with each query type.\n\n\nSELECT\n\n\nA \ntable\n array of records. If no records are found, returns an empty table.\n\n\nINSERT\n\n\nA \nnumber\n representing the insertion id.\n\n\nUPDATE\n\n\nA \nnumber\n indicating the amount of updated rows.\n\n\nDELETE\n\n\nA \nnumber\n indicating the amount of deleted rows.\n\n\n\n\nAny other commands will be returned as \ntable\n. It is recommended that you manage your databases using an external tool. See \nAdministration\n below.\n\n\n\n\n\n\nTip\n\n\nUse \ncore.sf\n (string format) to make queries easier to build, and type safe.\n\n\n\n\nSelect Example\n\n\nlocal\n \nquery\n \n=\n \ncore\n.\nsf\n(\n\"SELECT * FROM orders\"\n,\n \n100\n)\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nquery\n(\n\"clients\"\n,\n \nquery\n)\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\nlocal\n \nrecord\n\n\nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n  \nrecord\n \n=\n \nresult\n[\ni\n]\n \n--a record as a table\n\n  \ncore\n.\nlog\n(\nrecord\n.\nid\n)\n\n\nend\n\n\n\n\n\n\nInsert Example\n\n\nlocal\n \ncolumns\n \n=\n \n\"name, age, email\"\n\n\nlocal\n \nvalues\n \n=\n \n{\n\"Jimmy\"\n,\n \n22\n,\n \n\"me@somemail.com\"\n}\n\n\n\n--escape string values\n\n\nvalues\n \n=\n \ncore\n.\nmysql\n.\nescapeAll\n(\nvalues\n)\n\n\n\nlocal\n \nquery\n \n=\n \ncore\n.\nsf\n(\n\"INSERT INTO users (%s) VALUES (%s, %d, %s);\"\n,\n \n  \ncolumns\n,\n \n  \nunpack\n(\nvalues\n)\n\n\n)\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nquery\n(\n\"clients\"\n,\n \nquery\n)\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nend\n\n\n\ncore\n.\nlog\n(\n\"inserted id is: \"\n,\n \nresult\n)\n\n\n\n\n\n\nescape\n\n\nEscape a string value to be sql safe. Returns an escaped \nstring\n.\n\n\ncore\n.\nmysql\n.\nescape\n(\nunescaped_str\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nunescaped_str\n\n\nThe \nstring\n value to escape.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nstr\n \n=\n \ncore\n.\nmysql\n.\nescape\n(\n\"Eat at Joe's\"\n)\n\n\n\n\n\n\n\n\nImportant\n\n\nThe returned value is enclosed in single quotes. Do not wrap the value with additional quotes or it may cause problems with your query.\n\n\n\n\nescapeAll\n\n\nEscape all string values in a table array to be sql safe. Returns \ntable\n array.\n\n\ncore\n.\nmysql\n.\nescapeAll\n(\ntbl_values\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\ntbl_values\n\n\nA \ntable\n array of mixed value types. String values will be escaped.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nvalues\n \n=\n \n{\n\n  \n'A special \"thing\" here.'\n,\n\n  \n24\n,\n\n  \n\"Joe's Place\"\n\n\n}\n\n\n\nvalues\n \n=\n \ncore\n.\nmysql\n.\nescapeAll\n(\n \nvalues\n \n)\n\n\n\n\n\n\nEZ Query Methods\n\n\nEZ query methods provide an alternative way to construct common query types. For more complex queries, use the \ncore.mysql.query\n method above.\n\n\n\n\nClient-Side API\n\n\nYou can access the EZ query methods directly using the client-side \nMySQL\n module.\n\n\n\n\nselect\n\n\ncore\n.\nmysql\n.\nselect\n(\ndb_name\n,\n \nselect_tbl\n)\n\n\n\n\n\n\nReturns\n\n\nA \ntable\n array of records, or \nnil\n and an error.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nselect_tbl\n\n\nThe insert table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nSelect Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\ncolumns\n\n\nArray of columns to select as strings.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nwhere\n\n\nAny additional WHERE clause to apply.\n\n\nString\n\n\nN\n\n\n\n\n\n\norderby\n\n\nThe sorting attributes. See \nOrderby\n below.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlimit\n\n\nLimit the records returned. See \nLimit\n below.\n\n\nNumber\n or \nTable\n\n\nN\n\n\n\n\n\n\ndistinct\n\n\nFilter out duplicate column values. Default: false\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nOrderby\n\n\nThe \norderby\n key should be a table filled with \ncolumn = direction\n pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order. See example 2 below.\n\n\nLimit\n\n\nTo limit the rows returned, supply a \nnumber\n value to the \nlimit\n key. To \noffset\n the limit, supply a \ntable\n array of \nnumber\n values. For example, to return rows 6-15: \nlimit = {5, 10}\n.\n\n\nExample 1\n\n\n-- Select all records from the 'scores' table\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nselect\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains a table array of records\n\n  \nlocal\n \nrecord\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nrecord\n \n=\n \nresult\n[\ni\n]\n\n    \ncore\n.\nlog\n(\nrecord\n.\nplayer\n..\n' scored '\n..\nrecord\n.\nscore\n)\n\n  \nend\n\n\nend\n\n\n\n\n\n\nExample 2\n\n\n-- Select 10 scores greater than 10, in descending order\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nselect\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \ncolumns\n \n=\n \n{\n \n\"score\"\n \n},\n\n  \nwhere\n \n=\n \n\"score > 10\"\n,\n\n  \nlimit\n \n=\n \n10\n,\n\n  \norderby\n \n=\n \n{\n\n    \nscore\n \n=\n \n\"DESC\"\n\n  \n}\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains a table array of records\n\n  \nlocal\n \nrecord\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nresult\n \ndo\n\n    \nrecord\n \n=\n \nresult\n[\ni\n]\n\n    \ncore\n.\nlog\n(\nrecord\n.\nplayer\n..\n' scored '\n..\nrecord\n.\nscore\n)\n\n  \nend\n\n\nend\n\n\n\n\n\n\ninsert\n\n\ncore\n.\nmysql\n.\ninsert\n(\ndb_name\n,\n \ninsert_tbl\n)\n\n\n\n\n\n\nReturns\n\n\nThe record id as a \nnumber\n, or \nnil\n and an error.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ninsert_tbl\n\n\nThe insert table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nInsert Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA table of \ncolumn = value\n pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nStrings in the \nvalues\n table will be automatically run through \ncore.mysql.escape\n.\n\n\n\n\nExample\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ninsert\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \nvalues\n \n=\n \n{\n\n    \nscore\n \n=\n \n200\n,\n \n    \nplayer\n \n=\n \n\"Sandy\"\n\n  \n}\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains the id for the inserted record\n\n  \ncore\n.\nlog\n(\nresult\n)\n\n\nend\n\n\n\n\n\n\nupdate\n\n\ncore\n.\nmysql\n.\nupdate\n(\ndb_name\n,\n \nupdate_tbl\n)\n\n\n\n\n\n\nReturns\n\n\nThe \nnumber\n of records updated, or \nnil\n and an error.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nupdate_tbl\n\n\nThe update table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nUpdate Table Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA table of \ncolumn = value\n pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nWhere the columns should be updated.\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\n\n\nStrings in the \nvalues\n table will be automatically run through \ncore.mysql.escape\n.\n\n\n\n\nExample\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nupdate\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \nvalues\n \n=\n \n{\n\n    \nscore\n \n=\n \n230\n\n  \n},\n\n  \nwhere\n \n=\n \n\"id=20\"\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains the number of records updated\n\n  \ncore\n.\nlog\n(\nresult\n)\n\n\nend\n\n\n\n\n\n\ndelete\n\n\ncore\n.\nmysql\n.\ndelete\n(\ndb_name\n,\n \ndelete_tbl\n)\n\n\n\n\n\n\nReturns\n\n\nThe \nnumber\n of records deleted, or \nnil\n and an error.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb_name\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndelete_tbl\n\n\nThe delete table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nDelete Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntbl\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nA WHERE clause to limit deletions to.\n\n\nString\n\n\nN\n\n\n\n\n\n\nforce\n\n\nDisables safety check for missing \nwhere\n key.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nTo run the delete command without a \nwhere\n clause, you must set \nforce\n to true.\n\n\n\n\nExample\n\n\nDelete using a \nwhere\n clause\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ndelete\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \nwhere\n \n=\n \n\"score < 10\"\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains the number of records deleted\n\n  \ncore\n.\nlog\n(\nresult\n)\n\n\nend\n\n\n\n\n\n\nDelete \nall\n records from the table\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\ndelete\n(\n\"leaderboard\"\n,\n \n{\n\n  \ntbl\n \n=\n \n\"scores\"\n,\n\n  \nforce\n \n=\n \ntrue\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \ncore\n.\nlog\n(\nerr\n)\n\n\nelse\n\n  \n-- `result` contains the number of records deleted\n\n  \ncore\n.\nlog\n(\nresult\n)\n\n\nend\n\n\n\n\n\n\nRemote Databases\n\n\nYou can connect to remote MySQL databases by using a connection table in place of the database name in the \ncore.mysql.query\n and EZ Query methods.\n\n\nConnection Table\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndatabase\n\n\nThe remote database name.\n\n\nString\n\n\nY\n\n\n\n\n\n\nuser\n\n\nThe remote database user.\n\n\nString\n\n\nY\n\n\n\n\n\n\npassword\n\n\nThe remote database password\n\n\nString\n\n\nY\n\n\n\n\n\n\nhost\n\n\nThe remote database host address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nport\n\n\nThe remote database port. Default: 3306\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n\n  \ndatabase\n \n=\n \n\"clients\"\n,\n\n  \nuser\n \n=\n \n\"dbuser\"\n,\n\n  \npassword\n \n=\n \n\"1234\"\n,\n\n  \nhost\n \n=\n \n\"my.sql.host\"\n\n\n}\n\n\n\nlocal\n \nresults\n,\n \nerr\n \n=\n \ncore\n.\nmysql\n.\nquery\n(\nconn_tbl\n,\n \nquery_str\n)\n\n\n\n\n\n\nAdministration\n\n\nYou can and should manage your MySQL databases using a standalone tool. Below are some free resources for managing MySQL databases.\n\n\n\n\nSequelPro\n (OSX)\n\n\nHeidiSQL\n (Windows)\n\n\n\n\nTo connect to the MySQL database, use the host address of the server, and the password that was set when installing Coronium Core.",
            "title": "MySQL"
        },
        {
            "location": "/server-modules/mysql/#query-q",
            "text": "core . mysql . query (   db_name ,   query_str   )  --OR  core . mysql . q (   db_name ,   query_str   )   Parameters     Name  Description  Type  Required      db_name  The database name to issue commands against.  String  Y    query_str  The MySQL query to send to the database.  String  Y      To connect to remote databases see  Remote Databases .   Result Values  The following outlines the  result  values returned with each query type.  SELECT  A  table  array of records. If no records are found, returns an empty table.  INSERT  A  number  representing the insertion id.  UPDATE  A  number  indicating the amount of updated rows.  DELETE  A  number  indicating the amount of deleted rows.   Any other commands will be returned as  table . It is recommended that you manage your databases using an external tool. See  Administration  below.    Tip  Use  core.sf  (string format) to make queries easier to build, and type safe.   Select Example  local   query   =   core . sf ( \"SELECT * FROM orders\" ,   100 )  local   result ,   err   =   core . mysql . query ( \"clients\" ,   query )  if   not   result   then \n   core . log ( err )  end  local   record  for   i = 1 ,   # result   do \n   record   =   result [ i ]   --a record as a table \n   core . log ( record . id )  end   Insert Example  local   columns   =   \"name, age, email\"  local   values   =   { \"Jimmy\" ,   22 ,   \"me@somemail.com\" }  --escape string values  values   =   core . mysql . escapeAll ( values )  local   query   =   core . sf ( \"INSERT INTO users (%s) VALUES (%s, %d, %s);\" ,  \n   columns ,  \n   unpack ( values )  )  local   result ,   err   =   core . mysql . query ( \"clients\" ,   query )  if   not   result   then \n   core . log ( err )  end  core . log ( \"inserted id is: \" ,   result )",
            "title": "query | q"
        },
        {
            "location": "/server-modules/mysql/#escape",
            "text": "Escape a string value to be sql safe. Returns an escaped  string .  core . mysql . escape ( unescaped_str )   Parameters     Name  Description  Requried      unescaped_str  The  string  value to escape.  Y     Example  local   str   =   core . mysql . escape ( \"Eat at Joe's\" )    Important  The returned value is enclosed in single quotes. Do not wrap the value with additional quotes or it may cause problems with your query.",
            "title": "escape"
        },
        {
            "location": "/server-modules/mysql/#escapeall",
            "text": "Escape all string values in a table array to be sql safe. Returns  table  array.  core . mysql . escapeAll ( tbl_values )   Parameters     Name  Description  Requried      tbl_values  A  table  array of mixed value types. String values will be escaped.  Y     Example  local   values   =   { \n   'A special \"thing\" here.' , \n   24 , \n   \"Joe's Place\"  }  values   =   core . mysql . escapeAll (   values   )",
            "title": "escapeAll"
        },
        {
            "location": "/server-modules/mysql/#ez-query-methods",
            "text": "EZ query methods provide an alternative way to construct common query types. For more complex queries, use the  core.mysql.query  method above.   Client-Side API  You can access the EZ query methods directly using the client-side  MySQL  module.",
            "title": "EZ Query Methods"
        },
        {
            "location": "/server-modules/mysql/#select",
            "text": "core . mysql . select ( db_name ,   select_tbl )   Returns  A  table  array of records, or  nil  and an error.  Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    select_tbl  The insert table options (see below).  Table  Y     Select Table Keys     Name  Description  Type  Required      tbl  Name of the table to operate on.  String  Y    columns  Array of columns to select as strings.  Table  N    where  Any additional WHERE clause to apply.  String  N    orderby  The sorting attributes. See  Orderby  below.  Table  N    limit  Limit the records returned. See  Limit  below.  Number  or  Table  N    distinct  Filter out duplicate column values. Default: false  Boolean  N     Orderby  The  orderby  key should be a table filled with  column = direction  pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order. See example 2 below.  Limit  To limit the rows returned, supply a  number  value to the  limit  key. To  offset  the limit, supply a  table  array of  number  values. For example, to return rows 6-15:  limit = {5, 10} .  Example 1  -- Select all records from the 'scores' table  local   result ,   err   =   core . mysql . select ( \"leaderboard\" ,   { \n   tbl   =   \"scores\"  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains a table array of records \n   local   record \n   for   i = 1 ,   # result   do \n     record   =   result [ i ] \n     core . log ( record . player .. ' scored ' .. record . score ) \n   end  end   Example 2  -- Select 10 scores greater than 10, in descending order  local   result ,   err   =   core . mysql . select ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   columns   =   {   \"score\"   }, \n   where   =   \"score > 10\" , \n   limit   =   10 , \n   orderby   =   { \n     score   =   \"DESC\" \n   }  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains a table array of records \n   local   record \n   for   i = 1 ,   # result   do \n     record   =   result [ i ] \n     core . log ( record . player .. ' scored ' .. record . score ) \n   end  end",
            "title": "select"
        },
        {
            "location": "/server-modules/mysql/#insert",
            "text": "core . mysql . insert ( db_name ,   insert_tbl )   Returns  The record id as a  number , or  nil  and an error.  Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    insert_tbl  The insert table options (see below).  Table  Y     Insert Table Keys     Name  Description  Type  Required      tbl  Name of the table to operate on.  String  Y    values  A table of  column = value  pairs.  Table  Y      Strings in the  values  table will be automatically run through  core.mysql.escape .   Example  local   result ,   err   =   core . mysql . insert ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   values   =   { \n     score   =   200 ,  \n     player   =   \"Sandy\" \n   }  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains the id for the inserted record \n   core . log ( result )  end",
            "title": "insert"
        },
        {
            "location": "/server-modules/mysql/#update",
            "text": "core . mysql . update ( db_name ,   update_tbl )   Returns  The  number  of records updated, or  nil  and an error.  Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    update_tbl  The update table options (see below).  Table  Y     Update Table Parameters     Name  Description  Type  Required      tbl  The name of the table to operate on.  String  Y    values  A table of  column = value  pairs.  Table  Y    where  Where the columns should be updated.  String  N      Strings in the  values  table will be automatically run through  core.mysql.escape .   Example  local   result ,   err   =   core . mysql . update ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   values   =   { \n     score   =   230 \n   }, \n   where   =   \"id=20\"  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains the number of records updated \n   core . log ( result )  end",
            "title": "update"
        },
        {
            "location": "/server-modules/mysql/#delete",
            "text": "core . mysql . delete ( db_name ,   delete_tbl )   Returns  The  number  of records deleted, or  nil  and an error.  Parameters     Name  Description  Type  Required      db_name  The database to run the query against.  String  Y    delete_tbl  The delete table options (see below).  Table  Y     Delete Table Keys     Name  Description  Type  Required      tbl  The name of the table to operate on.  String  Y    where  A WHERE clause to limit deletions to.  String  N    force  Disables safety check for missing  where  key.  Boolean  N      Important  To run the delete command without a  where  clause, you must set  force  to true.   Example  Delete using a  where  clause  local   result ,   err   =   core . mysql . delete ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   where   =   \"score < 10\"  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains the number of records deleted \n   core . log ( result )  end   Delete  all  records from the table  local   result ,   err   =   core . mysql . delete ( \"leaderboard\" ,   { \n   tbl   =   \"scores\" , \n   force   =   true  })  if   not   result   then \n   core . log ( err )  else \n   -- `result` contains the number of records deleted \n   core . log ( result )  end",
            "title": "delete"
        },
        {
            "location": "/server-modules/mysql/#remote-databases",
            "text": "You can connect to remote MySQL databases by using a connection table in place of the database name in the  core.mysql.query  and EZ Query methods.  Connection Table     Key  Description  Type  Required      database  The remote database name.  String  Y    user  The remote database user.  String  Y    password  The remote database password  String  Y    host  The remote database host address.  String  Y    port  The remote database port. Default: 3306  Number  N     Example  local   conn_tbl   =   { \n   database   =   \"clients\" , \n   user   =   \"dbuser\" , \n   password   =   \"1234\" , \n   host   =   \"my.sql.host\"  }  local   results ,   err   =   core . mysql . query ( conn_tbl ,   query_str )",
            "title": "Remote Databases"
        },
        {
            "location": "/server-modules/mysql/#administration",
            "text": "You can and should manage your MySQL databases using a standalone tool. Below are some free resources for managing MySQL databases.   SequelPro  (OSX)  HeidiSQL  (Windows)   To connect to the MySQL database, use the host address of the server, and the password that was set when installing Coronium Core.",
            "title": "Administration"
        },
        {
            "location": "/server-modules/network/",
            "text": "Make external HTTP network requests and retrieve the results.\n\n\nExample\n\n\nlocal\n \nrequest\n \n=\n \ncloud\n.\nnetwork\n.\nnew\n(\n'google.com'\n)\n \n--host only, no path\n\n\nrequest\n:\npath\n(\n'/end/point'\n)\n\n\nrequest\n:\nmethod\n(\ncloud\n.\nPOST\n)\n\n\nrequest\n:\nbody\n(\n<\nJSON\n \nCONTENT\n>\n)\n\n\nrequest\n:\nheaders\n({\n\n  \n[\n'Content-Type'\n]\n \n=\n \n'application/json'\n,\n\n  \n-- add more headers\n\n\n})\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \nrequest\n:\nresult\n()\n\n\n\n\n\n\n\n\nSpecial Note\n\n\nAll of the network methods, except for \nnew\n and \nrequest\n are getters and setters.\n\n\n\n\nUsing getters and setters\n\n\n-- To get a value, omit any arguments\n\n\nlocal\n \nhost\n \n=\n \nrequest\n:\nhost\n()\n\n\n\n-- To set a an option\n\n\nrequest\n:\nhost\n(\n'12.12.12.12'\n)\n\n\n\n-- Chain options\n\n\nrequest\n:\nhost\n(\n'12.12.12.12'\n):\nport\n(\n8080\n)\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \nrequest\n:\nresult\n()\n\n\n\n\n\n\nnew\n\n\ncore\n.\nnetwork\n.\nnew\n(\n \n[\nhost\n][,\n \nport\n]\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nThe hostname to connect to.\n\n\nString\n\n\n'127.0.0.1'\n\n\nN\n\n\n\n\n\n\nport\n\n\nThe port number to connect with.\n\n\nNumber\n\n\n80\n\n\nN\n\n\n\n\n\n\n\n\nThe host and port can be set with the network instance methods as well.\n\n\nReturns\n\n\nA new request connection object.\n\n\nExample\n\n\nlocal\n \nrequest\n \n=\n \ncore\n.\nnetwork\n.\nnew\n(\n'123.123.123.123'\n,\n \n8080\n)\n\n\n\n\n\n\nhost\n\n\nrequest\n:\nhost\n(\n \nhostname\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nhostname\n\n\nThe hostname to connect to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe hostname if no value is passed.\n\n\nExample\n\n\nlocal\n \nhostname\n \n=\n \nrequest\n:\nhostname\n()\n\n\n\n--set\n\n\nrequest\n:\nhostname\n(\n'13.13.13.13'\n)\n\n\n\n\n\n\nport\n\n\nrequest\n:\nport\n(\n \nport\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nport\n\n\nThe port to connect to.\n\n\nNumber\n\n\n80\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe port if no value is passed.\n\n\nExample\n\n\nlocal\n \nport\n \n=\n \nrequest\n:\nport\n()\n\n\n\n--set\n\n\nrequest\n:\nport\n(\n8080\n)\n\n\n\n\n\n\npath\n\n\nrequest\n:\npath\n(\n \npath\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe path to connect to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe path if no value is passed.\n\n\nExample\n\n\nlocal\n \npath\n \n=\n \nrequest\n:\npath\n()\n\n\n\n--set\n\n\nrequest\n:\npath\n(\n'/echo/test'\n)\n\n\n\n\n\n\nheader\n\n\nrequest\n:\nheader\n(\n \nname\n,\n \nvalue\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe header name\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalue\n\n\nThe header value.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe header value if only the name key is passed.\n\n\nExample\n\n\nlocal\n \nheader\n \n=\n \nrequest\n:\nheader\n(\n'Content-Type'\n)\n\n\n\n--set\n\n\nrequest\n:\nheader\n(\n'Content-Type'\n,\n'application/json'\n)\n\n\n\n\n\n\nheaders\n\n\nrequest\n:\nheaders\n(\n \nheaders\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nheaders\n\n\nA table of request headers.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nAll headers if no arguments are passed.\n\n\nExample\n\n\nlocal\n \nheader\n \n=\n \nrequest\n:\nheaders\n()\n\n\n\n--set\n\n\nrequest\n:\nheaders\n({\n\n  \n'Content-Type'\n \n=\n \n'application/json'\n,\n\n  \n'Host'\n \n=\n \n'12.12.12.12.'\n\n\n})\n\n\n\n\n\n\n\n\nWarning\n\n\nThe \nheaders\n method will clear \nall\n existing header assigments.\n\n\n\n\nmethod\n\n\nrequest\n:\nmethod\n(\n \nmethod\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\nA HTTP method. Can use method constants (see below).\n\n\ncore.POST\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe HTTP method name if no arguments are passed.\n\n\nExample\n\n\nlocal\n \nmethod\n \n=\n \nrequest\n:\nmethod\n()\n\n\n\n--set\n\n\nrequest\n:\nmethod\n(\ncloud\n.\nGET\n)\n\n\n\n\n\n\nMethod Constants\n\n\n\n\n\n\n\n\nConstant\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncore.POST\n\n\nPOST request method\n\n\n\n\n\n\ncore.GET\n\n\nGET request method\n\n\n\n\n\n\ncore.DELETE\n\n\nDELETE request method\n\n\n\n\n\n\ncore.UPDATE\n\n\nUPDATE request method\n\n\n\n\n\n\n\n\ntimeout\n\n\nrequest\n:\ntimeout\n(\n \ntimeout\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\nTimeout in \nmilliseconds\n.\n\n\nNumber\n\n\n500\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe timeout setting if no arguments are passed.\n\n\nExample\n\n\nlocal\n \ntimeout\n \n=\n \nrequest\n:\ntimeout\n()\n\n\n\n--set\n\n\nrequest\n:\ntimeout\n(\n30\n)\n\n\n\n\n\n\nssl_verify\n\n\nrequest\n:\nssl_verify\n(\n \nverify_flag\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nverify_flag\n\n\nEnable or disable SSL verification.\n\n\nBoolean\n\n\nfalse\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nThe ssl_verify value, if no arguments are passed.\n\n\nExample\n\n\nlocal\n \nssl_verify\n \n=\n \nrequest\n:\nssl_verify\n()\n\n\n\n--set\n\n\nrequest\n:\nssl_verify\n(\ntrue\n)\n\n\n\n\n\n\nbody\n\n\nrequest\n:\nbody\n(\n \nbody_data\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbody_data\n\n\nSet or retrieve the request body.\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nThe body data value, if no arguments are passed.\n\n\nExample\n\n\nlocal\n \nbody_data\n \n=\n \nrequest\n:\nbody\n()\n\n\n\n--set\n\n\nrequest\n:\nbody\n(\n\"Here is some body data\"\n)\n\n\n\n\n\n\nresult\n\n\nCompiles the options and makes the network request. Must be the last method called on a network request object.\n\n\nrequest\n:\nresult\n()\n\n\n\n\n\n\nReturns\n\n\nThe \nresult\n if successful, otherwise \nnil\n and \nerror\n message.\n\n\nExample\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \nrequest\n:\nresult\n()",
            "title": "Network"
        },
        {
            "location": "/server-modules/network/#new",
            "text": "core . network . new (   [ host ][,   port ]   )   Parameters     Name  Description  Type  Default  Required      host  The hostname to connect to.  String  '127.0.0.1'  N    port  The port number to connect with.  Number  80  N     The host and port can be set with the network instance methods as well.  Returns  A new request connection object.  Example  local   request   =   core . network . new ( '123.123.123.123' ,   8080 )",
            "title": "new"
        },
        {
            "location": "/server-modules/network/#host",
            "text": "request : host (   hostname   )   Parameters     Name  Description  Type  Required      hostname  The hostname to connect to.  String  Y     Returns  The hostname if no value is passed.  Example  local   hostname   =   request : hostname ()  --set  request : hostname ( '13.13.13.13' )",
            "title": "host"
        },
        {
            "location": "/server-modules/network/#port",
            "text": "request : port (   port   )   Parameters     Name  Description  Type  Default  Required      port  The port to connect to.  Number  80  Y     Returns  The port if no value is passed.  Example  local   port   =   request : port ()  --set  request : port ( 8080 )",
            "title": "port"
        },
        {
            "location": "/server-modules/network/#path",
            "text": "request : path (   path   )   Parameters     Name  Description  Type  Required      path  The path to connect to.  String  Y     Returns  The path if no value is passed.  Example  local   path   =   request : path ()  --set  request : path ( '/echo/test' )",
            "title": "path"
        },
        {
            "location": "/server-modules/network/#header",
            "text": "request : header (   name ,   value   )   Parameters     Name  Description  Type  Required      name  The header name  String  Y    value  The header value.  String  Y     Returns  The header value if only the name key is passed.  Example  local   header   =   request : header ( 'Content-Type' )  --set  request : header ( 'Content-Type' , 'application/json' )",
            "title": "header"
        },
        {
            "location": "/server-modules/network/#headers",
            "text": "request : headers (   headers   )   Parameters     Name  Description  Type  Required      headers  A table of request headers.  Table  N     Returns  All headers if no arguments are passed.  Example  local   header   =   request : headers ()  --set  request : headers ({ \n   'Content-Type'   =   'application/json' , \n   'Host'   =   '12.12.12.12.'  })    Warning  The  headers  method will clear  all  existing header assigments.",
            "title": "headers"
        },
        {
            "location": "/server-modules/network/#method",
            "text": "request : method (   method   )   Parameters     Name  Description  Default  Required      method  A HTTP method. Can use method constants (see below).  core.POST  Y     Returns  The HTTP method name if no arguments are passed.  Example  local   method   =   request : method ()  --set  request : method ( cloud . GET )   Method Constants     Constant  Description      core.POST  POST request method    core.GET  GET request method    core.DELETE  DELETE request method    core.UPDATE  UPDATE request method",
            "title": "method"
        },
        {
            "location": "/server-modules/network/#timeout",
            "text": "request : timeout (   timeout   )   Parameters     Name  Description  Type  Default  Required      timeout  Timeout in  milliseconds .  Number  500  Y     Returns  The timeout setting if no arguments are passed.  Example  local   timeout   =   request : timeout ()  --set  request : timeout ( 30 )",
            "title": "timeout"
        },
        {
            "location": "/server-modules/network/#ssl_verify",
            "text": "request : ssl_verify (   verify_flag   )   Parameters     Name  Description  Type  Default  Required      verify_flag  Enable or disable SSL verification.  Boolean  false  N     Returns  The ssl_verify value, if no arguments are passed.  Example  local   ssl_verify   =   request : ssl_verify ()  --set  request : ssl_verify ( true )",
            "title": "ssl_verify"
        },
        {
            "location": "/server-modules/network/#body",
            "text": "request : body (   body_data   )   Parameters     Name  Description  Type  Required      body_data  Set or retrieve the request body.  String  N     Returns  The body data value, if no arguments are passed.  Example  local   body_data   =   request : body ()  --set  request : body ( \"Here is some body data\" )",
            "title": "body"
        },
        {
            "location": "/server-modules/network/#result",
            "text": "Compiles the options and makes the network request. Must be the last method called on a network request object.  request : result ()   Returns  The  result  if successful, otherwise  nil  and  error  message.  Example  local   result ,   err   =   request : result ()",
            "title": "result"
        },
        {
            "location": "/server-modules/utils/",
            "text": "Here you can find various helpers available in the root \ncore\n namespace.\n\n\nlog\n\n\nPrints a string message to the \n/usr/local/coronium/logs/coronium.log\n file.\n\n\ncore\n.\nlog\n(\n \nmessage\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message string to log.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\ncore\n.\nlog\n(\n'something to log'\n)\n\n\n\n\n\n\nsf (string format)\n\n\nFormat a string based on token replacment. This method shares the same attributes as the Lua string.format method.\n\n\ncore\n.\nsf\n(\n \nstr_template\n,\n \nvalues\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nstr_template\n\n\nThe string containing replacment tokens.\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA list of values for token replacment.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nusername\n \n=\n \n\"Dave\"\n\n\nlocal\n \nformatted_str\n \n=\n \ncore\n.\nsf\n(\n\"Hello, %s!\"\n,\n \nusername\n)\n\n\n\n-- formatted_str = \"Hello, Dave!\"\n\n\n\n\n\n\nNotes\n\n\nSome common token types:\n\n\n\n\n\n\n\n\nToken\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n%s\n\n\nUsed as a string replacment, any other type will error.\n\n\n\n\n\n\n%d\n\n\nUsed as a number replacment, any other type will error.\n\n\n\n\n\n\n\n\nYou can mix tokens, as well as have multiples:\n\n\nlocal\n \nstr\n \n=\n \ncore\n.\nsf\n(\n\"Ordered %d %s with %s.\"\n,\n \n2\n,\n \n'burgers'\n,\n \n'cheese'\n)\n\n\n-- `str` contains \"Ordered 2 burgers with cheese.\"\n\n\n\n\n\n\n\n\nTip\n\n\nThe \nsf\n method is useful for creating SQL queries, as well as other type-safe replacments.\n\n\n\n\ntrim\n\n\nRemoves empty space from the start and end of a string, if any.\n\n\ncore\n.\ntrim\n(\n \nstring\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nThe string to trim.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ntrimmed_str\n \n=\n \ncore\n.\ntrim\n(\n\"  I could use a trim  \"\n)\n\n\n\n-- trimmed_str = \"I could use a trim\"\n\n\n\n\n\n\nsplit\n\n\nConverts a delimited string into a Lua table array.\n\n\ncore\n.\nsplit\n(\n \nstring\n[,\n \ndelimiter\n \n]\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nThe delimited string to split.\n\n\nNone\n\n\nY\n\n\n\n\n\n\ndelimiter\n\n\nThe delimiter to split the string with.\n\n\nComma\n ( , )\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ntbl_array\n \n=\n \ncore\n.\nsplit\n(\n\"Red,Green,Blue\"\n)\n\n\n\n-- `tbl_array` contains {\"Red\",\"Green\",\"Blue\"}\n\n\n\n\n\n\nUsing a custom delimiter:\n\n\nlocal\n \ntbl_array\n \n=\n \ncore\n.\nsplit\n(\n\"User:2001:Storage\"\n,\n \n\":\"\n)\n\n\n\n-- `tbl_array` contains {\"User\",\"2001\",\"Storage\"}\n\n\n\n\n\n\njson\n\n\nJSON encoding and decoding.\n\n\nlocal\n \njson\n \n=\n \ncore\n.\njson\n\n\n\n\n\n\nEncode\n\n\nlocal\n \nstr\n \n=\n \njson\n.\nencode\n(\ntbl\n)\n\n\n\n\n\n\nDecode\n\n\nlocal\n \ntbl\n \n=\n \njson\n.\ndecode\n(\nstr\n)\n\n\n\n\n\n\njson_safe\n\n\nJSON encoding and decoding with error handling.\n\n\nlocal\n \njson\n \n=\n \ncore\n.\njson_safe\n\n\n\n\n\n\nEncode safe\n\n\nlocal\n \nstr\n,\n \nerr\n \n=\n \njson\n.\nencode\n(\ntbl\n)\n\n\n\n\n\n\nDecode safe\n\n\nlocal\n \ntbl\n,\n \nerr\n \n=\n \njson\n.\ndecode\n(\nstr\n)\n\n\n\n\n\n\nuuid\n\n\nGenerates a universally unique id.\n\n\nExample\n\n\nlocal\n \nuuid\n \n=\n \ncore\n.\nuuid\n()\n\n\n\n-- `uuid` will contain something like \"1f0af2fa-8b06-4605-bace-e13a85aa36d5\"\n\n\n\n\n\n\ncountryCode\n\n\nTwo letter country code based on the request IP. Can only be called in a \ncore.api\n method.\n\n\nExample\n\n\nlocal\n \ncode\n \n=\n \ncore\n.\ncountryCode\n()\n\n\n\n-- `code` will contain something like \"US\" or \"EU\"",
            "title": "Utils"
        },
        {
            "location": "/server-modules/utils/#log",
            "text": "Prints a string message to the  /usr/local/coronium/logs/coronium.log  file.  core . log (   message   )   Parameters     Name  Description  Requried      message  The message string to log.  Y     Example  core . log ( 'something to log' )",
            "title": "log"
        },
        {
            "location": "/server-modules/utils/#sf-string-format",
            "text": "Format a string based on token replacment. This method shares the same attributes as the Lua string.format method.  core . sf (   str_template ,   values   )   Parameters     Name  Description  Requried      str_template  The string containing replacment tokens.  Y    values  A list of values for token replacment.  Y     Example  local   username   =   \"Dave\"  local   formatted_str   =   core . sf ( \"Hello, %s!\" ,   username )  -- formatted_str = \"Hello, Dave!\"   Notes  Some common token types:     Token  Description      %s  Used as a string replacment, any other type will error.    %d  Used as a number replacment, any other type will error.     You can mix tokens, as well as have multiples:  local   str   =   core . sf ( \"Ordered %d %s with %s.\" ,   2 ,   'burgers' ,   'cheese' )  -- `str` contains \"Ordered 2 burgers with cheese.\"    Tip  The  sf  method is useful for creating SQL queries, as well as other type-safe replacments.",
            "title": "sf (string format)"
        },
        {
            "location": "/server-modules/utils/#trim",
            "text": "Removes empty space from the start and end of a string, if any.  core . trim (   string   )   Parameters     Name  Description  Requried      string  The string to trim.  Y     Example  local   trimmed_str   =   core . trim ( \"  I could use a trim  \" )  -- trimmed_str = \"I could use a trim\"",
            "title": "trim"
        },
        {
            "location": "/server-modules/utils/#split",
            "text": "Converts a delimited string into a Lua table array.  core . split (   string [,   delimiter   ]   )   Parameters     Name  Description  Default  Requried      string  The delimited string to split.  None  Y    delimiter  The delimiter to split the string with.  Comma  ( , )  N     Example  local   tbl_array   =   core . split ( \"Red,Green,Blue\" )  -- `tbl_array` contains {\"Red\",\"Green\",\"Blue\"}   Using a custom delimiter:  local   tbl_array   =   core . split ( \"User:2001:Storage\" ,   \":\" )  -- `tbl_array` contains {\"User\",\"2001\",\"Storage\"}",
            "title": "split"
        },
        {
            "location": "/server-modules/utils/#json",
            "text": "JSON encoding and decoding.  local   json   =   core . json   Encode  local   str   =   json . encode ( tbl )   Decode  local   tbl   =   json . decode ( str )",
            "title": "json"
        },
        {
            "location": "/server-modules/utils/#json_safe",
            "text": "JSON encoding and decoding with error handling.  local   json   =   core . json_safe   Encode safe  local   str ,   err   =   json . encode ( tbl )   Decode safe  local   tbl ,   err   =   json . decode ( str )",
            "title": "json_safe"
        },
        {
            "location": "/server-modules/utils/#uuid",
            "text": "Generates a universally unique id.  Example  local   uuid   =   core . uuid ()  -- `uuid` will contain something like \"1f0af2fa-8b06-4605-bace-e13a85aa36d5\"",
            "title": "uuid"
        },
        {
            "location": "/server-modules/utils/#countrycode",
            "text": "Two letter country code based on the request IP. Can only be called in a  core.api  method.  Example  local   code   =   core . countryCode ()  -- `code` will contain something like \"US\" or \"EU\"",
            "title": "countryCode"
        },
        {
            "location": "/client-guide/",
            "text": "This guide outlines the client-side plugin setup and general usage.\n\n\nInstallation\n\n\nIf you don't already have it, get the \nCoronium Core Plugin\n from the \nCorona Marketplace\n.\n\n\nAdd the plugin\n\n\n\nAdd the plugin by adding an entry to the \nplugins\n table of \nbuild.settings\n file:\n\n\nsettings =\n{\n    plugins =\n    {\n        [\"plugin.coronium-core\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}\n\n\n\n\n\nRequire the plugin\n\n\n\nTo gain access to the plugins functionality, require it like so in your Lua file:\n\n\nlocal\n \ncore\n \n=\n \nrequire\n(\n\"plugin.coronium-core\"\n)\n\n\n\n\n\n\nYou're now ready to use the \nCoronium Core\n plugin.\n\n\nPlugin Overview\n\n\nThe Coronium Core client plugin provides an interface to your Coronium Core server. The client contains various data modules, a file transfer module, and the ability to call your own custom methods built with the server-side \nAPI\n module.\n\n\n\n\nImportant\n\n\nYou will need a running Coronium Core server before being able to utilize the client plugin. You can install the server on \nDigitalOcean\n or \nAmazon EC2\n.\n\n\n\n\nBefore continuing, make sure you have read through the \nClient Setup\n section.\n\n\nCoronium Core offers both client-side modules, and custom server-side api methods. In this guide we will be focused on the client-side functionality. On the client-side there are modules for data handling and file transfers, which require no server-side code.\n\n\nIn this example, we will use the \nmain.lua\n of a Corona project as a reference point, though you may require and use the client plugin in whichever file it is most useful.\n\n\nInitialization\n\n\nHow you initialize the client plugin depends on whether you are using custom server-side api methods, or just the built-in client-side modules. You can use both server-side and client-side modules together. Let's look at both initialization options.\n\n\nClient modules only\n\n\nClient-side modules include support for basic \nMongo\n and \nMySQL\n data handling, as well as, the \nFile\n transfer module. You do not need to write any server-side code.\n\n\nlocal\n \ncore\n \n=\n \nrequire\n(\n\"plugin.coronium-core\"\n)\n\n\n\ncore\n.\ninit\n({\n\n  \nserver\n \n=\n \n\"https://your.coronium.host\"\n,\n\n  \nkey\n \n=\n \n\"<coronium-server-key>\"\n\n\n})\n\n\n\n\n\n\nServer and Client modules\n\n\nUsing custom server-side api methods allow you to use the full \nMongo\n and \nMySQL\n modules, as well as, any other server-side modules available. See the server-side \nAPI\n module for more information.\n\n\nFirst, make sure you have a \nserver-side project\n set up. \n\n\nlocal\n \ncore\n \n=\n \nrequire\n(\n\"plugin.coronium-core\"\n)\n\n\n\ncore\n.\ninit\n({\n\n  \nserver\n \n=\n \n\"https://your.coronium.host\"\n,\n\n  \nkey\n \n=\n \n\"<coronium-server-key>\"\n,\n\n  \nproject\n \n=\n \n\"<project-name>\"\n,\n\n\n})\n\n\n\n\n\n\nResponse Events\n\n\nWhen calling a module or api method, you must supply an event listener function to recieve the response back from the server:\n\n\nBasic api listener\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \n--evt.result contains the server response\n\n  \nend\n\n\nend\n\n\n\n\n\n\nAll response events will contain either an \nerror\n key, or the successful response in the \nresult\n key. Some modules may have additional event keys. See each modules documentation for event responses.\n\n\nerror\n\n\nThe \nerror\n key will always be a string with the error message, or \nnil\n if no error is present. \n\n\nresult\n\n\nThe \nresult\n key data depends on the module or api method. See each modules documentation to determine what the \nresult\n key might hold.\n\n\n\n\nTip\n\n\nTo debug response events during development, see the \ncore.debug\n method.\n\n\n\n\nAPI Methods\n\n\nDepending on the module you are addressing, use the following namespaces on the \ncore\n object.\n\n\n--Client Side Module\n\n\ncore\n.\n<\nmodule\n>\n.\n<\nmethod\n>\n([\ninput_params\n,]\n \nlistener\n)\n\n\n\n--Server Side API Methods\n\n\ncore\n.\napi\n.\n<\nmethod\n>\n([\ninput_params\n,]\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ninput_params\n\n\nThe parameters to pass to the method.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nThe response listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\n\n\nSpecial Note\n\n\nIf a method does not require a \ninput_params\n table, you can either pass any empty table, or omit the parameter table all together, supplying just the listener.\n\n\n\n\nExamples\n\n\nClient side \ndata\n module\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n)\n \n--data object id\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\nsave\n({\n\n  \nsource\n \n=\n \n\"users\"\n,\n\n  \ndata\n \n=\n \n{\n\n    \nname\n \n=\n \n\"Tammy\"\n,\n\n    \nage\n \n=\n \n34\n,\n\n    \nactive\n \n=\n \ntrue\n\n  \n}\n\n\n},\n  \napiResponse\n)\n\n\n\n\n\n\nCustom server-side \napi\n method\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nname\n)\n \n-- Jimmy\n\n  \nend\n\n\nend\n\n\n\ncore\n.\napi\n.\necho\n({\nname\n=\n\"Jimmy\"\n},\n \napiResponse\n)\n\n\n\n\n\n\n\n\nSee each client-side module documentation for full usage instructions and examples.",
            "title": "Client Guide"
        },
        {
            "location": "/client-guide/#installation",
            "text": "If you don't already have it, get the  Coronium Core Plugin  from the  Corona Marketplace .",
            "title": "Installation"
        },
        {
            "location": "/client-guide/#plugin-overview",
            "text": "The Coronium Core client plugin provides an interface to your Coronium Core server. The client contains various data modules, a file transfer module, and the ability to call your own custom methods built with the server-side  API  module.   Important  You will need a running Coronium Core server before being able to utilize the client plugin. You can install the server on  DigitalOcean  or  Amazon EC2 .   Before continuing, make sure you have read through the  Client Setup  section.  Coronium Core offers both client-side modules, and custom server-side api methods. In this guide we will be focused on the client-side functionality. On the client-side there are modules for data handling and file transfers, which require no server-side code.  In this example, we will use the  main.lua  of a Corona project as a reference point, though you may require and use the client plugin in whichever file it is most useful.",
            "title": "Plugin Overview"
        },
        {
            "location": "/client-guide/#initialization",
            "text": "How you initialize the client plugin depends on whether you are using custom server-side api methods, or just the built-in client-side modules. You can use both server-side and client-side modules together. Let's look at both initialization options.  Client modules only  Client-side modules include support for basic  Mongo  and  MySQL  data handling, as well as, the  File  transfer module. You do not need to write any server-side code.  local   core   =   require ( \"plugin.coronium-core\" )  core . init ({ \n   server   =   \"https://your.coronium.host\" , \n   key   =   \"<coronium-server-key>\"  })   Server and Client modules  Using custom server-side api methods allow you to use the full  Mongo  and  MySQL  modules, as well as, any other server-side modules available. See the server-side  API  module for more information.  First, make sure you have a  server-side project  set up.   local   core   =   require ( \"plugin.coronium-core\" )  core . init ({ \n   server   =   \"https://your.coronium.host\" , \n   key   =   \"<coronium-server-key>\" , \n   project   =   \"<project-name>\" ,  })",
            "title": "Initialization"
        },
        {
            "location": "/client-guide/#response-events",
            "text": "When calling a module or api method, you must supply an event listener function to recieve the response back from the server:  Basic api listener  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     --evt.result contains the server response \n   end  end   All response events will contain either an  error  key, or the successful response in the  result  key. Some modules may have additional event keys. See each modules documentation for event responses.",
            "title": "Response Events"
        },
        {
            "location": "/client-guide/#error",
            "text": "The  error  key will always be a string with the error message, or  nil  if no error is present.",
            "title": "error"
        },
        {
            "location": "/client-guide/#result",
            "text": "The  result  key data depends on the module or api method. See each modules documentation to determine what the  result  key might hold.   Tip  To debug response events during development, see the  core.debug  method.",
            "title": "result"
        },
        {
            "location": "/client-guide/#api-methods",
            "text": "Depending on the module you are addressing, use the following namespaces on the  core  object.  --Client Side Module  core . < module > . < method > ([ input_params ,]   listener )  --Server Side API Methods  core . api . < method > ([ input_params ,]   listener )   Parameters     Name  Description  Type  Required      input_params  The parameters to pass to the method.  Table  N    listener  The response listener callback function.  Function  Y      Special Note  If a method does not require a  input_params  table, you can either pass any empty table, or omit the parameter table all together, supplying just the listener.   Examples  Client side  data  module  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result )   --data object id \n   end  end  core . data . save ({ \n   source   =   \"users\" , \n   data   =   { \n     name   =   \"Tammy\" , \n     age   =   34 , \n     active   =   true \n   }  },    apiResponse )   Custom server-side  api  method  local   function   apiResponse (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . name )   -- Jimmy \n   end  end  core . api . echo ({ name = \"Jimmy\" },   apiResponse )    See each client-side module documentation for full usage instructions and examples.",
            "title": "API Methods"
        },
        {
            "location": "/client-module/api/",
            "text": "Provides access to your server-side project api methods. To learn how to create server-side api methods, see the server-side \nAPI\n module.\n\n\nUse the \ncore.init\n method to set the server-side project to call the methods against.\n\n\napi\n\n\ncore\n.\napi\n.\n<\nmethod\n-\nname\n>\n([\ninput_params\n,]\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ninput_params\n\n\nParameters to pass to the api method.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nThe response listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\n\n\nSpecial Note\n\n\nIf a method does not require a \ninput_params\n table, you can either pass any empty table, or omit the parameter table all together, supplying just the listener.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain any values that are passed back from the server-side api method.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nmessage\n)\n \n-- Hello\n\n  \nend\n\n\nend\n\n\n\n-- Assuming you have an \"test\" server-side method\n\n\ncore\n.\napi\n.\ntest\n({\nmessage\n=\n\"Hello\"\n},\n \napiListener\n)",
            "title": "API"
        },
        {
            "location": "/client-module/api/#api",
            "text": "core . api . < method - name > ([ input_params ,]   listener )   Parameters     Name  Description  Type  Required      input_params  Parameters to pass to the api method.  Table  N    listener  The response listener callback function.  Function  Y      Special Note  If a method does not require a  input_params  table, you can either pass any empty table, or omit the parameter table all together, supplying just the listener.   Event Response  On success, the  result  will contain any values that are passed back from the server-side api method.  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . message )   -- Hello \n   end  end  -- Assuming you have an \"test\" server-side method  core . api . test ({ message = \"Hello\" },   apiListener )",
            "title": "api"
        },
        {
            "location": "/client-module/core/",
            "text": "Provides methods to configure the client-side plugin.\n\n\ninit\n\n\nInitialize the client.\n\n\ncore\n.\ninit\n(\n \nconfig_tbl\n \n)\n\n\n\n\n\n\nConfig Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nserver\n\n\nThe Coronium Core server address.\n\n\nString\n\n\nY\n\n\n\n\n\n\nkey\n\n\nThe Coronium Core \nserver key\n.\n\n\nString\n\n\nY\n\n\n\n\n\n\nproject\n\n\nThe project name to run api methods against.\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\ncore\n.\ninit\n({\n\n  \nserver\n \n=\n \n\"https://<coronium-host-address>\"\n,\n\n  \nkey\n \n=\n \n\"<coronium-server-key>\"\n,\n\n  \nproject\n \n=\n \n\"default\"\n\n\n})\n\n\n\n\n\n\n\n\nFor detailed initialization instructions, see the \nInitialization\n section of the \nClient Guide\n.\n\n\n\n\nuseProject\n\n\nChange the server-side project to run api methods against.\n\n\ncore\n.\nuseProject\n(\n \nproject\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nproject\n\n\nThe project name to run api methods against.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\ncore\n.\nuseProject\n(\n\"default\"\n)\n\n\n\n\n\n\ndebug\n\n\nPretty print the response event to the console. Useful for debugging.\n\n\ncore\n.\ndebug\n(\nresponse_event\n)\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \napiResponse\n(\n \nevt\n \n)\n\n  \ncore\n.\ndebug\n(\n \nevt\n \n)\n\n\n  \n...\n\n\nend",
            "title": "Core"
        },
        {
            "location": "/client-module/core/#init",
            "text": "Initialize the client.  core . init (   config_tbl   )   Config Table Keys     Name  Description  Type  Required      server  The Coronium Core server address.  String  Y    key  The Coronium Core  server key .  String  Y    project  The project name to run api methods against.  String  N     Example  core . init ({ \n   server   =   \"https://<coronium-host-address>\" , \n   key   =   \"<coronium-server-key>\" , \n   project   =   \"default\"  })    For detailed initialization instructions, see the  Initialization  section of the  Client Guide .",
            "title": "init"
        },
        {
            "location": "/client-module/core/#useproject",
            "text": "Change the server-side project to run api methods against.  core . useProject (   project   )   Parameters     Name  Description  Type  Required      project  The project name to run api methods against.  String  Y     Example  core . useProject ( \"default\" )",
            "title": "useProject"
        },
        {
            "location": "/client-module/core/#debug",
            "text": "Pretty print the response event to the console. Useful for debugging.  core . debug ( response_event )   Example  local   function   apiResponse (   evt   ) \n   core . debug (   evt   ) \n\n   ...  end",
            "title": "debug"
        },
        {
            "location": "/client-module/data/",
            "text": "Provides a client-side api to the server-side \nData\n module. The \ndata\n module is a simple interface to the Mongo database. For more complex data handling, you must provide an \napi\n on the server-side.\n\n\nget\n\n\ncore\n.\ndata\n.\nget\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nThe data source to run against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nquery\n\n\nA query table or string id.\n\n\nTable\n or \nString\n\n\nY\n\n\n\n\n\n\ndb\n\n\nA specific database. Default: \"_app\".\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold the data object as a \ntable\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\n<\nkey\n>\n)\n \n-- result holds the data object\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\nget\n({\nsource\n=\n\"users\"\n,\n \nquery\n=\n\"id1234\"\n},\n \napiListener\n)\n\n\n\n\n\n\n\n\nTo retrieve multiple data objects, see the \ngetPage\n method.\n\n\n\n\nsave\n\n\ncore\n.\ndata\n.\nsave\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nThe data source to run against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndata\n\n\nA data object to save.\n\n\nTable\n\n\nY\n\n\n\n\n\n\ndb\n\n\nA specific database. Default: \"_app\".\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain the \nstring\n id of the newly created object.\n\n\nExample\n\n\nSaving a new data object\n\n\n\n\nWarning\n\n\nDo not add an \n_id\n key to the object, it will be generated automatically on the server-side.\n\n\n\n\nlocal\n \ndataObj\n \n=\n \n{\n\n  \nname\n \n=\n \n\"Sally\"\n,\n\n  \nage\n \n=\n \n32\n,\n\n  \nactive\n \n=\n \ntrue\n,\n\n  \ncolors\n \n=\n \n{\n\"blue\"\n,\n \n\"gold\"\n}\n\n\n}\n\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n)\n \n--the object id\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\nsave\n({\nsource\n=\n\"users\"\n,\n \ndata\n=\ndataObj\n},\n \napiListener\n)\n\n\n\n\n\n\nUpdating an existing object\n\n\n\n\nTo update an existing object, first retrieve it using \ncore.data.get\n.\n\n\n\n\nlocal\n \nobj\n \n=\n \n--an object from core.data.get\n\n\n\nobj\n.\nscore\n \n=\n \n200\n \n--add or update key value\n\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \n--listener code (see above)\n\n\nend\n\n\n\ncore\n.\ndata\n.\nsave\n({\nsource\n=\n\"users\"\n,\n \ndata\n=\nobj\n},\n \napiListener\n)\n\n\n\n\n\n\n\n\nWarning\n\n\nDo not change the \n_id\n key in the object you wish to update.\n\n\n\n\ndelete\n\n\ncore\n.\ndata\n.\ndelete\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nThe data source to run against.\n\n\nString\n\n\nY\n\n\n\n\n\n\nid\n\n\nThe data object id string.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndb\n\n\nA specific database. Default: \"_app\".\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\n\n\nYou can get an object id from any data object. See the \ncore.data.get\n example above.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will be \ntrue\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"deleted\"\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\ndelete\n({\nsource\n=\n\"users\"\n,\n \nid\n=\n\"id1234\"\n},\n \napiListener\n)\n\n\n\n\n\n\n\n\nSpecial Note\n\n\nWhile passing an id string is the most consistent way to delete an object, you can also pass the entire object to the \nid\n key. Example: \n{source = \"users\", id = obj}\n. The object must contain a valid \n_id\n field for this to work.\n\n\n\n\nPagination\n\n\ngetPage\n\n\ncore\n.\ndata\n.\ngetPage\n(\ndata_params\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_params\n\n\nThe data parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nData Params\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nThe data source to run against.\n\n\nnone\n\n\nString\n\n\nY\n\n\n\n\n\n\npage\n\n\nThe page number to return.\n\n\nnone\n\n\nNumber\n\n\nY\n\n\n\n\n\n\nperPage\n\n\nThe number of objects per page.\n\n\n20\n\n\nNumber\n\n\nN\n\n\n\n\n\n\nsort\n\n\nSort constant or sorting table.\n\n\ncore.ASC\n\n\nConst\n or \nTable\n\n\nN\n\n\n\n\n\n\nquery\n\n\nSpecialized query table.\n\n\n{ } (all records)\n\n\nTable\n\n\nN\n\n\n\n\n\n\ndb\n\n\nSpecify a different database.\n\n\n\"_app\"\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nSort Constants\n\n\n\n\n\n\n\n\nEnum\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncore.ASC\n\n\nSort in an ascending order.\n\n\n\n\n\n\ncore.DESC\n\n\nSort in a descending order.\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will hold a \ntable\n array of data objects.\n\n\nExample\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nsource\n \n=\n \n\"users\"\n,\n\n  \npage\n \n=\n \n1\n,\n\n  \nperPage\n \n=\n \n10\n\n\n}\n\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \n--evt.result holds array of objects\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nprint\n(\nevt\n.\nresult\n[\ni\n].\n_id\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\ndata\n.\ngetPage\n(\nparams\n,\n \napiListener\n)",
            "title": "Data"
        },
        {
            "location": "/client-module/data/#get",
            "text": "core . data . get ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      source  The data source to run against.  String  Y    query  A query table or string id.  Table  or  String  Y    db  A specific database. Default: \"_app\".  String  N     Event Response  On success, the  result  will hold the data object as a  table .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . < key > )   -- result holds the data object \n   end  end  core . data . get ({ source = \"users\" ,   query = \"id1234\" },   apiListener )    To retrieve multiple data objects, see the  getPage  method.",
            "title": "get"
        },
        {
            "location": "/client-module/data/#save",
            "text": "core . data . save ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      source  The data source to run against.  String  Y    data  A data object to save.  Table  Y    db  A specific database. Default: \"_app\".  String  N     Event Response  On success, the  result  will contain the  string  id of the newly created object.  Example  Saving a new data object   Warning  Do not add an  _id  key to the object, it will be generated automatically on the server-side.   local   dataObj   =   { \n   name   =   \"Sally\" , \n   age   =   32 , \n   active   =   true , \n   colors   =   { \"blue\" ,   \"gold\" }  }  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result )   --the object id \n   end  end  core . data . save ({ source = \"users\" ,   data = dataObj },   apiListener )   Updating an existing object   To update an existing object, first retrieve it using  core.data.get .   local   obj   =   --an object from core.data.get  obj . score   =   200   --add or update key value  local   function   apiListener (   evt   ) \n   --listener code (see above)  end  core . data . save ({ source = \"users\" ,   data = obj },   apiListener )    Warning  Do not change the  _id  key in the object you wish to update.",
            "title": "save"
        },
        {
            "location": "/client-module/data/#delete",
            "text": "core . data . delete ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Type  Required      source  The data source to run against.  String  Y    id  The data object id string.  String  Y    db  A specific database. Default: \"_app\".  String  N      You can get an object id from any data object. See the  core.data.get  example above.   Event Response  On success, the  result  will be  true .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"deleted\" ) \n   end  end  core . data . delete ({ source = \"users\" ,   id = \"id1234\" },   apiListener )    Special Note  While passing an id string is the most consistent way to delete an object, you can also pass the entire object to the  id  key. Example:  {source = \"users\", id = obj} . The object must contain a valid  _id  field for this to work.",
            "title": "delete"
        },
        {
            "location": "/client-module/data/#pagination",
            "text": "",
            "title": "Pagination"
        },
        {
            "location": "/client-module/data/#getpage",
            "text": "core . data . getPage ( data_params ,   listener )   Parameters     Name  Description  Type  Required      data_params  The data parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Data Params     Name  Description  Default  Type  Required      source  The data source to run against.  none  String  Y    page  The page number to return.  none  Number  Y    perPage  The number of objects per page.  20  Number  N    sort  Sort constant or sorting table.  core.ASC  Const  or  Table  N    query  Specialized query table.  { } (all records)  Table  N    db  Specify a different database.  \"_app\"  String  N     Sort Constants     Enum  Description      core.ASC  Sort in an ascending order.    core.DESC  Sort in a descending order.     Event Response  On success, the  result  will hold a  table  array of data objects.  Example  local   params   =   { \n   source   =   \"users\" , \n   page   =   1 , \n   perPage   =   10  }  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     --evt.result holds array of objects \n     for   i = 1 ,   # evt . result   do \n       print ( evt . result [ i ]. _id ) \n     end \n   end  end  core . data . getPage ( params ,   apiListener )",
            "title": "getPage"
        },
        {
            "location": "/client-module/email/",
            "text": "To send email from your Corona applications, take a look at the \nMailgun Sender\n plugin.",
            "title": "Email"
        },
        {
            "location": "/client-module/files/",
            "text": "This module allows you to transfer files to and from your \nCoronium Core\n server. Files are stored on the server in the \n/home/coronium/files\n directory.\n\n\nSee also the special note about the \nfiles/public\n directory.\n\n\n\n\nIf you'd like to transfer files using \nAmazon S3\n take a look at the \nS3 Lite\n plugin for Corona.\n\n\n\n\nupload\n\n\nUpload a file to the server.\n\n\ncore\n.\nfiles\n.\nupload\n(\nsrcFilePath\n,\n \nbaseDir\n,\n \ndestFilePath\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcFilePath\n\n\nLocal source file path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbaseDir\n\n\nA Corona directory constant.\n\n\nConst\n\n\nY\n\n\n\n\n\n\ndestFilePath\n\n\nRemote destination path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe upload listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nSee \nUpload Options\n below.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nUpload Options\n\n\nThe upload options table supports the following keys:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsafe\n\n\nDo not overwrite existing files.\n\n\nBoolean\n\n\nfalse\n\n\n\n\n\n\nunique\n\n\nGenerate a unique file name for the file.\n\n\nBoolean\n\n\nfalse\n\n\n\n\n\n\n\n\nEvent Response\n\n\nWhile uploading, a \nprogress\n key will be available.\n\n\nWhen the upload is complete, the \nresult\n will contain the following keys:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe server-side directory path to the file.\n\n\nString\n\n\n\n\n\n\nfile\n\n\nThe server-side file name with extension.\n\n\nString\n\n\n\n\n\n\n\n\nUpload Listener\n\n\nlocal\n \nfunction\n \nuploadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\n \nevt\n.\nerror\n \n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n \nevt\n.\nprogress\n \n)\n\n    \nelse\n\n      \nprint\n(\n\"file upload complete\"\n)\n\n      \nprint\n(\n\"filePath: \"\n,\n \nevt\n.\nresult\n.\npath\n)\n\n      \nprint\n(\n\"fileName: \"\n,\n \nevt\n.\nresult\n.\nfile\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nExample\n\n\ncore\n.\nfiles\n.\nupload\n(\n \n  \n\"image.png\"\n,\n \n  \nsystem\n.\nDocumentsDirectory\n,\n \n  \n\"imgs/image001.png\"\n,\n \n  \nuploadListener\n)\n\n\n\n\n\n\nUpload Progress\n\n\nBy default the listener event returns a \nprogress\n key with the current upload progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.\n\n\nIf you don't care about the progress, you can write the listener function like so:\n\n\nlocal\n \nfunction\n \nuploadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nnot\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n\"file upload complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\ndownload\n\n\nDownload files from the server.\n\n\ncore\n.\nfiles\n.\ndownload\n(\nsrcFilePath\n,\n \ndestFilePath\n,\n \nbaseDir\n,\n \nlistener\n[,\n \ntransform\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcFilePath\n\n\nRemote source file path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndestFilePath\n\n\nLocal destination path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbaseDir\n\n\nA Corona system directory constant.\n\n\nConst\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe download listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\ntransform\n\n\nSee \nImage Transforms\n below.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nEvent Response\n\n\nWhile downloading, a \nprogress\n key will be available.\n\n\nWhen the download is complete, the file will be available in the directory set in the \nbaseDir\n parameter.\n\n\nDownload Listener\n\n\nlocal\n \nfunction\n \ndownloadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\n \nevt\n.\nerror\n \n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n \nevt\n.\nprogress\n \n)\n\n    \nelse\n\n      \nprint\n(\n\"file download complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nExample\n\n\ncore\n.\nfiles\n.\ndownload\n(\n\n  \n\"imgs/image001.png\"\n,\n\n  \n\"image.png\"\n,\n\n  \nsystem\n.\nDocumentsDirectory\n,\n\n  \ndownloadListener\n)\n\n\n\n\n\n\nDownload Progress\n\n\nBy default the listener event returns a \nprogress\n key with the current download progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.\n\n\nIf you don't care about the progress, you can write the listener function like so:\n\n\nlocal\n \nfunction\n \ndownloadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nnot\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n\"file download complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nImage Transforms\n\n\nImage transformations are proportional. For example, when setting the \nwidth\n key, the image will be resized to the width provided, and the height will be resized \nin proportion\n to the width. The same holds true when setting the \nheight\n key; the width will be resized in proportion to the height.\n\n\nWhen setting both the \nwidth\n and \nheight\n keys together, the image is resized to fit proportionally \nwithin\n the key values provided. This can be useful for display lists.\n\n\nThe \nsharpen\n key runs a \"sharpness\" filter on the final transformed image. If this key is not provided, no sharpening takes place.\n\n\n\n\nTransforms only work with \nPNG\n, \nJPG\n, and \nGIF\n file types.\n\n\n\n\nTransform Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nwidth\n\n\nProportionally resize image based on width.\n\n\nNumber\n\n\nnil\n\n\n\n\n\n\nheight\n\n\nProportionally resize image based on height.\n\n\nNumber\n\n\nnil\n\n\n\n\n\n\nsharpen\n\n\nIncreases sharpness of the final image (0-255).\n\n\nNumber\n\n\n0\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ntransform\n \n=\n \n{\n\n  \nwidth\n \n=\n \n100\n,\n\n  \nheight\n \n=\n \n100\n,\n\n  \nsharpen\n \n=\n \n50\n\n\n}\n\n\n\ncore\n.\nfiles\n.\ndownload\n(\n\n  \n\"imgs/image001.png\"\n,\n\n  \n\"image.png\"\n,\n\n  \nsystem\n.\nDocumentsDirectory\n,\n\n  \ndownloadListener\n,\n\n  \ntransform\n)\n\n\n\n\n\n\nlist\n\n\nList the files in the specified directory path.\n\n\ncore\n.\nfiles\n.\nlist\n(\ndirpath\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndirpath\n\n\nThe directory on the server to list.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n key will contain a \ntable\n array with the items found in the directory, if any.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonList\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nprint\n(\nevt\n.\nresult\n[\ni\n])\n \n--file name\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nfiles\n.\nlist\n(\n\"imgs\"\n,\n \nonList\n)\n\n\n\n\n\n\n\n\nSpecial Note\n\n\nThis method will only list the \nfiles\n in the directory, not any directories. If no files are present, it will return an empty table.\n\n\n\n\nremove\n\n\nDelete a file from the server. \nOnce deleted the file is not recoverable.\n\n\ncore\n.\nfiles\n.\nremove\n(\nsrcFilePath\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcFilePath\n\n\nRemote source file path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n key will be \ntrue\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \ndeleteListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"Deleted\"\n)\n\n  \nend\n\n\nend\n\n\n\ncore\n.\nfiles\n.\nremove\n(\n\"imgs/image001.png\"\n,\n \ndeleteListener\n)\n\n\n\n\n\n\nAndroid file restrictions\n\n\nWhen working with Android, make sure you understand the file restrictions. You can find more information in the Corona documentation by \nclicking here\n.\n\n\nIn the documentaion, there is a reference to a \ncopyFile\n method. As a convenience, this method is available in the Coronium Core plugin and can be accessed like so:\n\n\ncore\n.\nutils\n.\ncopyFile\n(\nsrcName\n,\n \nsrcPath\n,\n \ndstName\n,\n \ndstPath\n,\n \noverwrite\n)",
            "title": "Files"
        },
        {
            "location": "/client-module/files/#upload",
            "text": "Upload a file to the server.  core . files . upload ( srcFilePath ,   baseDir ,   destFilePath ,   listener )   Parameters     Name  Description  Type  Required      srcFilePath  Local source file path with extension.  String  Y    baseDir  A Corona directory constant.  Const  Y    destFilePath  Remote destination path with extension.  String  Y    listener  The upload listener callback function.  Function  Y    options  See  Upload Options  below.  Table  N     Upload Options  The upload options table supports the following keys:     Name  Description  Type  Default      safe  Do not overwrite existing files.  Boolean  false    unique  Generate a unique file name for the file.  Boolean  false     Event Response  While uploading, a  progress  key will be available.  When the upload is complete, the  result  will contain the following keys:     Name  Description  Type      path  The server-side directory path to the file.  String    file  The server-side file name with extension.  String     Upload Listener  local   function   uploadListener (   evt   ) \n   if   evt . error   then \n     print (   evt . error   ) \n   else \n     if   evt . progress   then \n       print (   evt . progress   ) \n     else \n       print ( \"file upload complete\" ) \n       print ( \"filePath: \" ,   evt . result . path ) \n       print ( \"fileName: \" ,   evt . result . file ) \n     end \n   end  end   Example  core . files . upload (  \n   \"image.png\" ,  \n   system . DocumentsDirectory ,  \n   \"imgs/image001.png\" ,  \n   uploadListener )   Upload Progress  By default the listener event returns a  progress  key with the current upload progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.  If you don't care about the progress, you can write the listener function like so:  local   function   uploadListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     if   not   evt . progress   then \n       print ( \"file upload complete\" ) \n     end \n   end  end",
            "title": "upload"
        },
        {
            "location": "/client-module/files/#download",
            "text": "Download files from the server.  core . files . download ( srcFilePath ,   destFilePath ,   baseDir ,   listener [,   transform ])   Parameters     Name  Description  Type  Required      srcFilePath  Remote source file path with extension.  String  Y    destFilePath  Local destination path with extension.  String  Y    baseDir  A Corona system directory constant.  Const  Y    listener  The download listener callback function.  Function  Y    transform  See  Image Transforms  below.  Table  N     Event Response  While downloading, a  progress  key will be available.  When the download is complete, the file will be available in the directory set in the  baseDir  parameter.  Download Listener  local   function   downloadListener (   evt   ) \n   if   evt . error   then \n     print (   evt . error   ) \n   else \n     if   evt . progress   then \n       print (   evt . progress   ) \n     else \n       print ( \"file download complete\" ) \n     end \n   end  end   Example  core . files . download ( \n   \"imgs/image001.png\" , \n   \"image.png\" , \n   system . DocumentsDirectory , \n   downloadListener )   Download Progress  By default the listener event returns a  progress  key with the current download progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.  If you don't care about the progress, you can write the listener function like so:  local   function   downloadListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     if   not   evt . progress   then \n       print ( \"file download complete\" ) \n     end \n   end  end",
            "title": "download"
        },
        {
            "location": "/client-module/files/#image-transforms",
            "text": "Image transformations are proportional. For example, when setting the  width  key, the image will be resized to the width provided, and the height will be resized  in proportion  to the width. The same holds true when setting the  height  key; the width will be resized in proportion to the height.  When setting both the  width  and  height  keys together, the image is resized to fit proportionally  within  the key values provided. This can be useful for display lists.  The  sharpen  key runs a \"sharpness\" filter on the final transformed image. If this key is not provided, no sharpening takes place.   Transforms only work with  PNG ,  JPG , and  GIF  file types.   Transform Keys     Name  Description  Type  Default      width  Proportionally resize image based on width.  Number  nil    height  Proportionally resize image based on height.  Number  nil    sharpen  Increases sharpness of the final image (0-255).  Number  0     Example  local   transform   =   { \n   width   =   100 , \n   height   =   100 , \n   sharpen   =   50  }  core . files . download ( \n   \"imgs/image001.png\" , \n   \"image.png\" , \n   system . DocumentsDirectory , \n   downloadListener , \n   transform )",
            "title": "Image Transforms"
        },
        {
            "location": "/client-module/files/#list",
            "text": "List the files in the specified directory path.  core . files . list ( dirpath ,   listener )   Parameters     Name  Description  Type  Required      dirpath  The directory on the server to list.  String  Y    listener  The listener callback function.  Function  Y     Event Response  On success, the  result  key will contain a  table  array with the items found in the directory, if any.  Example  local   function   onList ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       print ( evt . result [ i ])   --file name \n     end \n   end  end  core . files . list ( \"imgs\" ,   onList )    Special Note  This method will only list the  files  in the directory, not any directories. If no files are present, it will return an empty table.",
            "title": "list"
        },
        {
            "location": "/client-module/files/#remove",
            "text": "Delete a file from the server.  Once deleted the file is not recoverable.  core . files . remove ( srcFilePath ,   listener )   Parameters     Name  Description  Type  Required      srcFilePath  Remote source file path with extension.  String  Y    listener  The listener callback function.  Function  Y     Event Response  On success, the  result  key will be  true .  Example  local   function   deleteListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"Deleted\" ) \n   end  end  core . files . remove ( \"imgs/image001.png\" ,   deleteListener )",
            "title": "remove"
        },
        {
            "location": "/client-module/files/#android-file-restrictions",
            "text": "When working with Android, make sure you understand the file restrictions. You can find more information in the Corona documentation by  clicking here .  In the documentaion, there is a reference to a  copyFile  method. As a convenience, this method is available in the Coronium Core plugin and can be accessed like so:  core . utils . copyFile ( srcName ,   srcPath ,   dstName ,   dstPath ,   overwrite )",
            "title": "Android file restrictions"
        },
        {
            "location": "/client-module/mysql/",
            "text": "Provides a client-side api to the \nEZ query methods\n of the server-side MySQL module. For more complex data handling, you must provide an \napi\n on the server-side.\n\n\nselect\n\n\ncore\n.\nmysql\n.\nselect\n(\nquery_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery_tbl\n\n\nThe query parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\ncolumns\n\n\nArray of columns to select as strings.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nwhere\n\n\nAny additional WHERE clause to apply.\n\n\nString\n\n\nN\n\n\n\n\n\n\norderby\n\n\nThe sorting attributes. See \nOrderby\n below.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlimit\n\n\nLimit the records returned. See \nLimit\n below.\n\n\nNumber\n or \nTable\n\n\nN\n\n\n\n\n\n\ndistinct\n\n\nFilter out duplicate column values. Default: false\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nOrderby\n\n\nThe \norderby\n key should be a table filled with \ncolumn = direction\n pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order.\n\n\nLimit\n\n\nTo limit the rows returned, supply a \nnumber\n value to the \nlimit\n key. To \noffset\n the limit, supply a \ntable\n array of \nnumber\n values. For example, to return rows 6-15: \nlimit = {5, 10}\n.\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain a \ntable\n array of records.\n\n\nExample\n\n\nUsing the \"app\" database, select all records from the \"users\" table.\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nresult\n \ndo\n\n      \nprint\n(\nevt\n.\nresult\n[\ni\n].\nid\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nselect\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee the server-side \ncore.mysql.select\n method for more examples.\n\n\n\n\ninsert\n\n\ncore\n.\nmysql\n.\ninsert\n(\nquery_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery_tbl\n\n\nThe query parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA table of \ncolumn = value\n pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\n\n\nStrings in the \nvalues\n table will be automatically run through the server-side \ncore.mysql.escape\n method.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain the inserted record id as a \nnumber\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"insert id:\"\n,\n \nevt\n.\nresult\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n,\n\n  \nvalues\n \n=\n \n{\n\n    \nname\n \n=\n \n\"Bobby\"\n,\n\n    \nage\n \n=\n \n34\n\n  \n},\n\n\n}\n\n\n\ncore\n.\nmysql\n.\ninsert\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\nupdate\n\n\ncore\n.\nmysql\n.\nupdate\n(\nquery_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery_tbl\n\n\nThe query parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA table of \ncolumn = value\n pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nWhere the columns should be updated.\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\n\n\nStrings in the \nvalues\n table will be automatically run through the server-side \ncore.mysql.escape\n method.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain the amount of records updated as a \nnumber\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"updated:\"\n,\n \nevt\n.\nresult\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n,\n\n  \nvalues\n \n=\n \n{\n\n    \nname\n \n=\n \n\"Paco\"\n\n  \n},\n\n  \nwhere\n \n=\n \n\"name='Bobby'\"\n\n\n}\n\n\n\ncore\n.\nmysql\n.\nupdate\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\ndelete\n\n\ncore\n.\nmysql\n.\ndelete\n(\nquery_tbl\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery_tbl\n\n\nThe query parameters for the call.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nQuery Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndb\n\n\nThe database to run the query against.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntbl\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nA WHERE clause to limit deletions to.\n\n\nString\n\n\nN\n\n\n\n\n\n\nforce\n\n\nDisables safety check for missing \nwhere\n key.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nTo run the delete command without a \nwhere\n clause, you must set \nforce\n to true.\n\n\n\n\nEvent Response\n\n\nOn success, the \nresult\n will contain the amount of records deleted as a \nnumber\n.\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\n\"deleted:\"\n,\n \nevt\n.\nresult\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \ndb\n \n=\n \n\"app\"\n,\n\n  \ntbl\n \n=\n \n\"users\"\n,\n\n  \nwhere\n \n=\n \n\"id=10\"\n\n\n}\n\n\n\ncore\n.\nmysql\n.\ndelete\n(\nparams\n,\n \napiListener\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee the server-side \ncore.mysql.delete\n method for more examples.",
            "title": "MySQL"
        },
        {
            "location": "/client-module/mysql/#select",
            "text": "core . mysql . select ( query_tbl ,   listener )   Parameters     Name  Description  Type  Required      query_tbl  The query parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Query Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    tbl  Name of the table to operate on.  String  Y    columns  Array of columns to select as strings.  Table  N    where  Any additional WHERE clause to apply.  String  N    orderby  The sorting attributes. See  Orderby  below.  Table  N    limit  Limit the records returned. See  Limit  below.  Number  or  Table  N    distinct  Filter out duplicate column values. Default: false  Boolean  N     Orderby  The  orderby  key should be a table filled with  column = direction  pairs. The direction can be either \"ASC\" for ascending order or \"DESC\" for descending order.  Limit  To limit the rows returned, supply a  number  value to the  limit  key. To  offset  the limit, supply a  table  array of  number  values. For example, to return rows 6-15:  limit = {5, 10} .  Event Response  On success, the  result  will contain a  table  array of records.  Example  Using the \"app\" database, select all records from the \"users\" table.  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     for   i = 1 ,   # evt . result   do \n       print ( evt . result [ i ]. id ) \n     end \n   end  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\"  }  core . mysql . select ( params ,   apiListener )    Tip  See the server-side  core.mysql.select  method for more examples.",
            "title": "select"
        },
        {
            "location": "/client-module/mysql/#insert",
            "text": "core . mysql . insert ( query_tbl ,   listener )   Parameters     Name  Description  Type  Required      query_tbl  The query parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Query Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    tbl  Name of the table to operate on.  String  Y    values  A table of  column = value  pairs.  Table  Y      Strings in the  values  table will be automatically run through the server-side  core.mysql.escape  method.   Event Response  On success, the  result  will contain the inserted record id as a  number .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"insert id:\" ,   evt . result ) \n   end  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\" , \n   values   =   { \n     name   =   \"Bobby\" , \n     age   =   34 \n   },  }  core . mysql . insert ( params ,   apiListener )",
            "title": "insert"
        },
        {
            "location": "/client-module/mysql/#update",
            "text": "core . mysql . update ( query_tbl ,   listener )   Parameters     Name  Description  Type  Required      query_tbl  The query parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Query Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    tbl  The name of the table to operate on.  String  Y    values  A table of  column = value  pairs.  Table  Y    where  Where the columns should be updated.  String  N      Strings in the  values  table will be automatically run through the server-side  core.mysql.escape  method.   Event Response  On success, the  result  will contain the amount of records updated as a  number .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"updated:\" ,   evt . result ) \n   end  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\" , \n   values   =   { \n     name   =   \"Paco\" \n   }, \n   where   =   \"name='Bobby'\"  }  core . mysql . update ( params ,   apiListener )",
            "title": "update"
        },
        {
            "location": "/client-module/mysql/#delete",
            "text": "core . mysql . delete ( query_tbl ,   listener )   Parameters     Name  Description  Type  Required      query_tbl  The query parameters for the call.  Table  Y    listener  The api listener callback function.  Function  Y     Query Table Keys     Name  Description  Type  Required      db  The database to run the query against.  String  Y    tbl  The name of the table to operate on.  String  Y    where  A WHERE clause to limit deletions to.  String  N    force  Disables safety check for missing  where  key.  Boolean  N      Important  To run the delete command without a  where  clause, you must set  force  to true.   Event Response  On success, the  result  will contain the amount of records deleted as a  number .  Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( \"deleted:\" ,   evt . result ) \n   end  end  local   params   =   { \n   db   =   \"app\" , \n   tbl   =   \"users\" , \n   where   =   \"id=10\"  }  core . mysql . delete ( params ,   apiListener )    Tip  See the server-side  core.mysql.delete  method for more examples.",
            "title": "delete"
        },
        {
            "location": "/pages-guide/api/",
            "text": "Provides methods to handle web based requests, and issue responses. For full usage instructions see the \nUsage\n section.\n\n\n\n\nImportant\n\n\nSee the\n \nConfiguration\n \nsection before attempting to use pages.\n\n\n\n\nnew\n\n\nCreates a new \npages\n object instance.\n\n\ncore\n.\npages\n.\nnew\n()\n\n\n\n\n\n\nParameters\n\n\nThis method has no required parameters.\n\n\nProperties\n\n\nA \npages\n object instance contains the \nresponse\n and \ntemplate\n methods below, as well as, the following properties.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\nThe request method. Will be \"GET\" or \"POST\".\n\n\nString\n\n\n\n\n\n\nheaders\n\n\nThe request headers as key/value pairs.\n\n\nTable\n\n\n\n\n\n\nquery\n\n\nThe request query string as key/value pairs.\n\n\nTable\n\n\n\n\n\n\nform\n\n\nIf posted, will contain form key/value pairs.\n\n\nTable\n\n\n\n\n\n\nisAjax\n\n\nIf the request is an ajax style request.\n\n\nBoolean\n\n\n\n\n\n\n\n\nConstants\n\n\nThe \npages\n object has the following constants available.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nThe GET HTTP method.\n\n\n\"GET\"\n\n\n\n\n\n\nPOST\n\n\nThe POST HTTP method.\n\n\n\"POST\"\n\n\n\n\n\n\nHTML\n\n\nThe HTML content type.\n\n\n\"text/html\"\n\n\n\n\n\n\nJSON\n\n\nThe JSON content type.\n\n\n\"application/json\"\n\n\n\n\n\n\nTEXT\n\n\nThe plain text content type.\n\n\n\"text/plain\"\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\n\n\n\nRaw Request Post Body\n\n\nIn the rare case that you need access to the raw request body, pass \ntrue\n to the \ncore.pages\n method. The body is then available on the \nbody\n property of the pages object instance. Beware that this does take up additional memory per request, and should only be used if you specifically need it.\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n(\ntrue\n)\n\n\nlocal\n \nraw_body\n \n=\n \npage\n.\nbody\n\n\n\n\n\n\nresponse | resp\n\n\nSends the configured response back to the client browser. \n\n\n<\npage\n-\nobject\n>\n.\nresponse\n(\nbody\n[,\n \nheaders\n][,\n \ncontent\n][,\n \nstatus\n])\n\n\n\n\n\n\n\n\nImportant\n\n\nThis should be the last method in your page file.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nThe data to output to the client browser.\n\n\nString\n\n\nY\n\n\n\n\n\n\nheaders\n\n\nAdditional headers to send to the client browser.\n\n\nTable\n\n\nN\n\n\n\n\n\n\ncontent\n\n\nThe content-type to output to the client browser.\n\n\nConst\n\n\nN\n\n\n\n\n\n\nstatus\n\n\nNumerical http status code to output to the client browser.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\npage\n.\nresponse\n(\n\"Hello There\"\n)\n\n\n\n\n\n\n\n\nFor more detailed examples see the \nUsage\n section.\n\n\n\n\ntemplate | tpl\n\n\nCompiles a template file with the supplied values. Returns \nstring\n body, or nil and error.\n\n\n<\npage\n-\nobject\n>\n.\ntemplate\n(\ntpl_file\n,\n \ntpl_values\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntpl_file\n\n\nThe template file name.\n\n\nString\n\n\nY\n\n\n\n\n\n\ntpl_values\n\n\nValues for the template.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nbody\n \n=\n \npage\n.\ntemplate\n(\n\"greeting.tpl\"\n,\n \n{\ngreet\n=\n\"Hello!\"\n})\n\n\n\n\n\n\n\n\nFor detailed template usage information see the \nTemplates\n section.",
            "title": "Pages API"
        },
        {
            "location": "/pages-guide/api/#new",
            "text": "Creates a new  pages  object instance.  core . pages . new ()   Parameters  This method has no required parameters.  Properties  A  pages  object instance contains the  response  and  template  methods below, as well as, the following properties.     Name  Description  Type      method  The request method. Will be \"GET\" or \"POST\".  String    headers  The request headers as key/value pairs.  Table    query  The request query string as key/value pairs.  Table    form  If posted, will contain form key/value pairs.  Table    isAjax  If the request is an ajax style request.  Boolean     Constants  The  pages  object has the following constants available.     Name  Description  Value      GET  The GET HTTP method.  \"GET\"    POST  The POST HTTP method.  \"POST\"    HTML  The HTML content type.  \"text/html\"    JSON  The JSON content type.  \"application/json\"    TEXT  The plain text content type.  \"text/plain\"     Example  local   page   =   core . pages . new ()   Raw Request Post Body  In the rare case that you need access to the raw request body, pass  true  to the  core.pages  method. The body is then available on the  body  property of the pages object instance. Beware that this does take up additional memory per request, and should only be used if you specifically need it.  local   page   =   core . pages . new ( true )  local   raw_body   =   page . body",
            "title": "new"
        },
        {
            "location": "/pages-guide/api/#response-resp",
            "text": "Sends the configured response back to the client browser.   < page - object > . response ( body [,   headers ][,   content ][,   status ])    Important  This should be the last method in your page file.   Parameters     Name  Description  Type  Required      body  The data to output to the client browser.  String  Y    headers  Additional headers to send to the client browser.  Table  N    content  The content-type to output to the client browser.  Const  N    status  Numerical http status code to output to the client browser.  Number  N     Example  page . response ( \"Hello There\" )    For more detailed examples see the  Usage  section.",
            "title": "response | resp"
        },
        {
            "location": "/pages-guide/api/#template-tpl",
            "text": "Compiles a template file with the supplied values. Returns  string  body, or nil and error.  < page - object > . template ( tpl_file ,   tpl_values )   Parameters     Name  Description  Type  Required      tpl_file  The template file name.  String  Y    tpl_values  Values for the template.  Table  Y     Example  local   body   =   page . template ( \"greeting.tpl\" ,   { greet = \"Hello!\" })    For detailed template usage information see the  Templates  section.",
            "title": "template | tpl"
        },
        {
            "location": "/pages-guide/usage/",
            "text": "Pages allow you to display and collect data using your Coronium Core server. You can display simple static web pages, or serve \ndynamic pages\n using Lua.\n\n\nOnly the GET and POST HTTP methods are supported for server requests.\n\n\n\n\nSpecial Note\n\n\nThe \nPages\n module is meant to supplement the core functionality of the application server. It is not designed to serve entire websites.\n\n\n\n\nPages Directory\n\n\nAll pages and assets reside in the \n/home/coronium/pages\n directory, which is the \"root\" directory for all web based requests. Log in via SFTP to manage your page files.\n\n\nDynamic Pages\n\n\nTo create a dynamic web page, name the file with the \n.lua\n extension and use the \nnew\n method to create a pages object instance. The browser path will be the path relative to the pages directory. Call the Lua file by addressing it by name, without the .lua extension.\n\n\nExample Paths\n\n\nFile path: \n/home/coronium/pages/users/show.lua\n\n\nBrowser path: \nhttps://my.coronium.com/users/show\n\n\nExample Lua\n\n\n--users/show.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nbody\n \n=\n \n\n[[\n\n\n  <html>\n\n\n    <body>\n\n\n      <h1>Hello Pages!</h1>\n\n\n    </body>\n\n\n  </html>\n\n\n]]\n\n\n\npage\n.\nresponse\n(\nbody\n)\n\n\n\n\n\n\nResponses\n\n\nOutput responses to the client web browser by using the \nresponse\n method of the pages object instance. The default response type is html, but you can also respond with json, or plain text content types.\n\n\nHTML\n\n\nTo return content as html (default), pass a string body to the \nresponse\n method.\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nbody\n \n=\n \n\n[[\n\n\n  <html>\n\n\n    <body>\n\n\n      <h1>Hello Pages!</h1>\n\n\n    </body>\n\n\n  </html>\n\n\n]]\n\n\n\npage\n.\nresponse\n(\nbody\n)\n\n\n\n\n\n\nSee also: \nTemplates\n\n\nJSON\n\n\nTo return content as json, pass the \nJSON\n constant to the \ncontent\n response parameter.\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\n--use a table for easy construction\n\n\nlocal\n \ndata\n \n=\n \n{\n\n  \nname\n \n=\n \n\"Dani\"\n,\n\n  \nage\n \n=\n \n23\n\n\n}\n\n\n\nlocal\n \nbody\n \n=\n \ncore\n.\njson\n.\nencode\n(\ndata\n)\n\n\n\npage\n.\nresponse\n(\nbody\n,\n \nnil\n,\n \npage\n.\nJSON\n)\n\n\n\n\n\n\nTEXT\n\n\nTo return content as text, pass the \nTEXT\n constant to the \ncontent\n response parameter.\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nbody\n \n=\n \n\"This is some plain text\"\n\n\n\npage\n.\nresponse\n(\nbody\n,\n \nnil\n,\n \npage\n.\nTEXT\n)\n\n\n\n\n\n\nQueries\n\n\nTo access properties of a query string, use the \nquery\n property of the pages object instance. The \nquery\n is a table with name/value pairs.\n\n\nExample Path\n\n\n/mypage?name=Tim&age=42\n\n\nExample Lua\n\n\n--mypage.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nquery_tbl\n \n=\n \npage\n.\nquery\n\n\n\nprint\n(\nquery_tbl\n.\nname\n)\n \n--Tim\n\n\nprint\n(\nquery_tbl\n.\nage\n)\n \n--42\n\n\n\n--Loop over query name/values\n\n\nfor\n \nname\n,\n \nval\n \nin\n \npairs\n(\nquery_tbl\n)\n \ndo\n\n  \nprint\n(\nname\n..\n\"=\"\n..\nval\n)\n\n\nend\n\n\n\n...\n\n\n\n\n\n\nForms\n\n\nTo access properties of a posted form, use the \nform\n property of the pages object instance. The form is a \ntable\n with name/value pairs.\n\n\nExample Form\n\n\n<\nform\n>\n\n  First name:\n<\nbr\n>\n\n  \n<\ninput\n \ntype\n=\n\"text\"\n \nname\n=\n\"firstname\"\n><\nbr\n>\n\n  Last name:\n<\nbr\n>\n\n  \n<\ninput\n \ntype\n=\n\"text\"\n \nname\n=\n\"lastname\"\n>\n\n\n</\nform\n>\n\n\n\n\n\n\nExample Lua\n\n\n--mypage.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nform_tbl\n \n=\n \npage\n.\nform\n\n\n\nlocal\n \nfirst\n \n=\n \nform\n.\nfirstname\n\n\nlocal\n \nlast\n \n=\n \nform\n.\nlastname\n\n\n\nprint\n(\nfirst\n..\n\" \"\n..\nlast\n)\n\n\n\n--Loop over form name/values\n\n\nfor\n \nname\n,\n \nval\n \nin\n \npairs\n(\nform\n)\n \ndo\n\n  \nprint\n(\nname\n..\n\"=\"\n..\nval\n)\n\n\nend\n\n\n\n...\n\n\n\n\n\n\nHeaders\n\n\nTo access the request headers, use the \nheaders\n property of the pages object instance. The headers are in a \ntable\n as name/value pairs.\n\n\nExample\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nheaders\n \n=\n \npage\n.\nheaders\n\n\n\n--print \"Host\" header\n\n\nprint\n(\nheaders\n[\n\"Host\"\n])\n\n\n\n--Loop over headers name/values\n\n\nfor\n \nname\n,\n \nval\n \nin\n \npairs\n(\nheaders\n)\n \ndo\n\n  \nprint\n(\nname\n..\n\"=\"\n..\nval\n)\n\n\nend\n\n\n\n...\n\n\n\n\n\n\nCore Modules\n\n\nYou can use any of the core server modules in dynamic pages.\n\n\nExample Template\n\n\n<\nhtml\n>\n\n  \n<\nbody\n>\n\n    \n<\nh1\n>\n{{ name }}\n</\nh1\n>\n\n    \n<\np\n>\n{{ age }}\n</\np\n>\n\n    \n<\np\n>\n{{ _id }}\n</\np\n>\n\n  \n</\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nExample Lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \nusers\n \n=\n \ncore\n.\ndata\n(\n\"users\"\n)\n\n\nlocal\n \ndoc\n \n=\n \nusers\n:\nget\n(\n\"id1234\"\n)\n\n\n\nlocal\n \nbody\n \n=\n \npage\n.\ntemplate\n(\n\"user.tpl\"\n,\n \ndoc\n)\n\n\n\npage\n.\nresponse\n(\nbody\n)\n\n\n\n\n\n\nFiles Directory\n\n\nFiles uploaded to the \nfiles/public\n directory using the \nFiles\n module can be displayed using page templates. When referencing a file in a template, the path will be checked in the \npages\n directory first. If no file is found, then the \nfiles/public\n directory path will be checked.",
            "title": "Usage"
        },
        {
            "location": "/pages-guide/usage/#pages-directory",
            "text": "All pages and assets reside in the  /home/coronium/pages  directory, which is the \"root\" directory for all web based requests. Log in via SFTP to manage your page files.",
            "title": "Pages Directory"
        },
        {
            "location": "/pages-guide/usage/#dynamic-pages",
            "text": "To create a dynamic web page, name the file with the  .lua  extension and use the  new  method to create a pages object instance. The browser path will be the path relative to the pages directory. Call the Lua file by addressing it by name, without the .lua extension.  Example Paths  File path:  /home/coronium/pages/users/show.lua  Browser path:  https://my.coronium.com/users/show  Example Lua  --users/show.lua  local   page   =   core . pages . new ()  local   body   =   [[    <html>      <body>        <h1>Hello Pages!</h1>      </body>    </html>  ]]  page . response ( body )",
            "title": "Dynamic Pages"
        },
        {
            "location": "/pages-guide/usage/#responses",
            "text": "Output responses to the client web browser by using the  response  method of the pages object instance. The default response type is html, but you can also respond with json, or plain text content types.",
            "title": "Responses"
        },
        {
            "location": "/pages-guide/usage/#html",
            "text": "To return content as html (default), pass a string body to the  response  method.  local   page   =   core . pages . new ()  local   body   =   [[    <html>      <body>        <h1>Hello Pages!</h1>      </body>    </html>  ]]  page . response ( body )   See also:  Templates",
            "title": "HTML"
        },
        {
            "location": "/pages-guide/usage/#json",
            "text": "To return content as json, pass the  JSON  constant to the  content  response parameter.  local   page   =   core . pages . new ()  --use a table for easy construction  local   data   =   { \n   name   =   \"Dani\" , \n   age   =   23  }  local   body   =   core . json . encode ( data )  page . response ( body ,   nil ,   page . JSON )",
            "title": "JSON"
        },
        {
            "location": "/pages-guide/usage/#text",
            "text": "To return content as text, pass the  TEXT  constant to the  content  response parameter.  local   page   =   core . pages . new ()  local   body   =   \"This is some plain text\"  page . response ( body ,   nil ,   page . TEXT )",
            "title": "TEXT"
        },
        {
            "location": "/pages-guide/usage/#queries",
            "text": "To access properties of a query string, use the  query  property of the pages object instance. The  query  is a table with name/value pairs.  Example Path  /mypage?name=Tim&age=42  Example Lua  --mypage.lua  local   page   =   core . pages . new ()  local   query_tbl   =   page . query  print ( query_tbl . name )   --Tim  print ( query_tbl . age )   --42  --Loop over query name/values  for   name ,   val   in   pairs ( query_tbl )   do \n   print ( name .. \"=\" .. val )  end  ...",
            "title": "Queries"
        },
        {
            "location": "/pages-guide/usage/#forms",
            "text": "To access properties of a posted form, use the  form  property of the pages object instance. The form is a  table  with name/value pairs.  Example Form  < form > \n  First name: < br > \n   < input   type = \"text\"   name = \"firstname\" >< br > \n  Last name: < br > \n   < input   type = \"text\"   name = \"lastname\" >  </ form >   Example Lua  --mypage.lua  local   page   =   core . pages . new ()  local   form_tbl   =   page . form  local   first   =   form . firstname  local   last   =   form . lastname  print ( first .. \" \" .. last )  --Loop over form name/values  for   name ,   val   in   pairs ( form )   do \n   print ( name .. \"=\" .. val )  end  ...",
            "title": "Forms"
        },
        {
            "location": "/pages-guide/usage/#headers",
            "text": "To access the request headers, use the  headers  property of the pages object instance. The headers are in a  table  as name/value pairs.  Example  local   page   =   core . pages . new ()  local   headers   =   page . headers  --print \"Host\" header  print ( headers [ \"Host\" ])  --Loop over headers name/values  for   name ,   val   in   pairs ( headers )   do \n   print ( name .. \"=\" .. val )  end  ...",
            "title": "Headers"
        },
        {
            "location": "/pages-guide/usage/#core-modules",
            "text": "You can use any of the core server modules in dynamic pages.  Example Template  < html > \n   < body > \n     < h1 > {{ name }} </ h1 > \n     < p > {{ age }} </ p > \n     < p > {{ _id }} </ p > \n   </ body >  </ html >   Example Lua  local   page   =   core . pages . new ()  local   users   =   core . data ( \"users\" )  local   doc   =   users : get ( \"id1234\" )  local   body   =   page . template ( \"user.tpl\" ,   doc )  page . response ( body )",
            "title": "Core Modules"
        },
        {
            "location": "/pages-guide/usage/#files-directory",
            "text": "Files uploaded to the  files/public  directory using the  Files  module can be displayed using page templates. When referencing a file in a template, the path will be checked in the  pages  directory first. If no file is found, then the  files/public  directory path will be checked.",
            "title": "Files Directory"
        },
        {
            "location": "/pages-guide/templates/",
            "text": "A template is simply an HTML file laced with template tags that will be filled in by values dynamically. \n\n\nTemplate files are stored relative to the file that will be using them. The file referencing the template will be the .lua pages file.\n\n\nExample Template\n\n\nStored in /home/coronium/pages/users/show.tpl\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\n{{ title }}\n</\ntitle\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n>\n\n    \n<\np\n>\n{{ message }}\n</\np\n>\n\n  \n</\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nExample Lua\n\n\nStored in /home/coronium/pages/users/show.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \ndata\n \n=\n \n\n{\n\n  \ntitle\n \n=\n \n\"Welcome!\"\n,\n\n  \nmessage\n \n=\n \n\"You are now using templates.\"\n\n\n}\n\n\n\nlocal\n \nbody\n \n=\n \npage\n.\ntemplate\n(\n\"show.tpl\"\n,\n \ndata\n)\n\n\n\npage\n.\nresponse\n(\nbody\n)\n\n\n\n\n\n\nBrowser Location\n\n\nPath: https://my.coronium.com/users/show\n\n\n\n\nTip\n\n\nTo keep your template code from accidentally being viewed raw in the browser, be sure to name all template files with the \n.tpl\n extension.\n\n\n\n\nTemplate Tags\n\n\nEscaped Value\n\n\n{{\n \nexpression\n \n}}\n\n\n\n\n\n\nPlain Value\n\n\n{* expression *}\n\n\n\n\n\nLua Code\n\n\n{% code here %}\n\n\n\n\n\nInclude\n\n\n{(other.tpl)}\n\n\n\n\n\nRaw Block\n\n\n{-raw-}non-interpolated text{-raw-}\n\n\n\n\n\nLooping Data\n\n\nTemplate loops allow you to \"loop\" over data and generate the output.\n\n\nA Loop:\n\n\n{%\n \nfor\n \nidx\n,\n \nitem\n \nin\n \nipairs\n(\nitems\n)\n \ndo\n \n%}\n\n  \n<div>\n{{\n \nitem\n \n}}\n is item number \n{{\n \nidx\n \n}}\n</div>\n\n\n{%\n \nend\n \n%}\n\n\n\n\n\n\nExample Template\n\n\n<!-- users.tpl -->\n\n\n<html>\n\n\n<head>\n\n  \n<title>\n{{\n \ntitle\n \n}}\n</title>\n\n\n</head>\n\n\n<body>\n\n  \n<div\n \nclass=\n\"container\"\n>\n\n    \n<ul\n \nclass=\n\"user-list\"\n>\n\n      \n{%\n \nfor\n \n_\n,\n \nuser\n \nin\n \nipairs\n(\n \nusers\n \n)\n \ndo\n \n%}\n\n      \n<li\n \nclass=\n\"user\"\n>\n{{\n \nuser.first\n \n}}\n \n{{\n \nuser.last\n \n}}\n</li>\n\n      \n{%\n \nend\n \n%}\n\n    \n</ul>\n\n  \n</div>\n\n\n</body>\n\n\n</html>\n\n\n\n\n\n\nExample Lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \ndata\n \n=\n\n\n{\n\n  \ntitle\n \n=\n \n\"Users\"\n,\n\n  \nusers\n \n=\n\n  \n{\n\n    \n{\n \nfirst\n=\n\"Jim\"\n,\n \nlast\n=\n\"Bell\"\n \n},\n\n    \n{\n \nfirst\n=\n\"Dani\"\n,\n \nlast\n=\n\"Bell\"\n \n}\n\n  \n}\n\n\n}\n\n\n\nlocal\n \nbody\n \n=\n \npage\n.\ntemplate\n(\n'users.tpl'\n,\n \ndata\n)\n\n\n\npage\n.\nresponse\n(\nbody\n)\n\n\n\n\n\n\nOutput\n\n\n<html>\n\n\n<head>\n\n  \n<title>\nUsers\n</title>\n\n\n</head>\n\n\n<body>\n\n  \n<div\n \nclass=\n\"container\"\n>\n\n    \n<ul\n \nclass=\n\"user-list\"\n>\n\n      \n<li\n \nclass=\n\"user\"\n>\nJim Bell\n</li>\n\n      \n<li\n \nclass=\n\"user\"\n>\nDani Bell\n</li>\n\n    \n</ul>\n\n  \n</div>\n\n\n</body>\n\n\n</html>\n\n\n\n\n\n\nAsynchrous Request\n\n\nTo check for an asynchrous request, you can use the \nisAjax\n property of the pages object instance, and output the data in the required format.\n\n\nExample Lua\n\n\n-- cats.lua\n\n\nlocal\n \npage\n \n=\n \ncore\n.\npages\n.\nnew\n()\n\n\n\nlocal\n \ncats\n \n=\n\n\n{\n\n  \n'Snookie'\n,\n'Fluffy'\n,\n'Yip'\n\n\n}\n\n\n\nif\n \npage\n.\nisAjax\n \nthen\n\n  \n--return JSON array\n\n  \nlocal\n \njson\n \n=\n \ncore\n.\njson\n.\nencode\n(\ncats\n)\n\n  \npage\n.\nresponse\n(\njson\n,\n \nnil\n,\n \npage\n.\nJSON\n)\n\n\nelse\n\n  \n--pass it to a template instead\n\n  \nlocal\n \nbody\n \n=\n \npage\n.\ntemplate\n(\n\"cats.tpl\"\n,\n \ncats\n)\n\n  \npage\n.\nresponse\n(\nbody\n)\n\n\nend\n\n\n\n\n\n\nExample HTML\n\n\nUsing JQuery\n\n\n...\n\n\n<body>\n\n  \n<div\n \nid=\n'cats'\n>\ncats go here\n</div>\n\n\n  \n<script>\n\n    $.getJSON('https://my.coronium.com/cats', function(data) {\n      $('cats').innerHTML = data.request;\n    });\n  \n</script>\n\n\n</body>\n\n\n...",
            "title": "Templates"
        },
        {
            "location": "/pages-guide/templates/#template-tags",
            "text": "Escaped Value  {{   expression   }}   Plain Value  {* expression *}  Lua Code  {% code here %}  Include  {(other.tpl)}  Raw Block  {-raw-}non-interpolated text{-raw-}",
            "title": "Template Tags"
        },
        {
            "location": "/pages-guide/templates/#looping-data",
            "text": "Template loops allow you to \"loop\" over data and generate the output.  A Loop:  {%   for   idx ,   item   in   ipairs ( items )   do   %} \n   <div> {{   item   }}  is item number  {{   idx   }} </div>  {%   end   %}   Example Template  <!-- users.tpl -->  <html>  <head> \n   <title> {{   title   }} </title>  </head>  <body> \n   <div   class= \"container\" > \n     <ul   class= \"user-list\" > \n       {%   for   _ ,   user   in   ipairs (   users   )   do   %} \n       <li   class= \"user\" > {{   user.first   }}   {{   user.last   }} </li> \n       {%   end   %} \n     </ul> \n   </div>  </body>  </html>   Example Lua  local   page   =   core . pages . new ()  local   data   =  { \n   title   =   \"Users\" , \n   users   = \n   { \n     {   first = \"Jim\" ,   last = \"Bell\"   }, \n     {   first = \"Dani\" ,   last = \"Bell\"   } \n   }  }  local   body   =   page . template ( 'users.tpl' ,   data )  page . response ( body )   Output  <html>  <head> \n   <title> Users </title>  </head>  <body> \n   <div   class= \"container\" > \n     <ul   class= \"user-list\" > \n       <li   class= \"user\" > Jim Bell </li> \n       <li   class= \"user\" > Dani Bell </li> \n     </ul> \n   </div>  </body>  </html>",
            "title": "Looping Data"
        },
        {
            "location": "/pages-guide/templates/#asynchrous-request",
            "text": "To check for an asynchrous request, you can use the  isAjax  property of the pages object instance, and output the data in the required format.  Example Lua  -- cats.lua  local   page   =   core . pages . new ()  local   cats   =  { \n   'Snookie' , 'Fluffy' , 'Yip'  }  if   page . isAjax   then \n   --return JSON array \n   local   json   =   core . json . encode ( cats ) \n   page . response ( json ,   nil ,   page . JSON )  else \n   --pass it to a template instead \n   local   body   =   page . template ( \"cats.tpl\" ,   cats ) \n   page . response ( body )  end   Example HTML  Using JQuery  ... <body> \n   <div   id= 'cats' > cats go here </div> \n\n   <script> \n    $.getJSON('https://my.coronium.com/cats', function(data) {\n      $('cats').innerHTML = data.request;\n    });\n   </script>  </body> \n\n...",
            "title": "Asynchrous Request"
        },
        {
            "location": "/pages-guide/config/",
            "text": "Validation\n\n\nTo use Coronium Pages you will need to validate the server module against your Coronium Core plugin. This is a one-time process, and is done using a quick call through a Corona project.\n\n\nCreate the script\n\n\nFirst make sure your Coronium Core server is running, and then create a new Corona project with the \nCoronium Core plugin\n.\n\n\nAdd the following code to the \nmain.lua\n, after the \ninitialzation\n code:\n\n\ncore\n.\npages\n.\ngenerateAuth\n(\nfunction\n(\nevt\n)\n\n  \ncore\n.\ndebug\n(\nevt\n)\n\n\nend\n)\n\n\n\n\n\n\nRun the script\n\n\nRun the Corona project. If all goes well, you should see \nresult: true\n output to the Corona console.\n\n\nYour Pages module is now validated, you don't need to run this code again for this Coronium Core server instance.\n\n\n\n\nImportant\n\n\nIf you reinstall or move your \nCoronium Core\n server you will need to revalidate.",
            "title": "Configuration"
        },
        {
            "location": "/pages-guide/config/#validation",
            "text": "To use Coronium Pages you will need to validate the server module against your Coronium Core plugin. This is a one-time process, and is done using a quick call through a Corona project.",
            "title": "Validation"
        },
        {
            "location": "/pages-guide/config/#create-the-script",
            "text": "First make sure your Coronium Core server is running, and then create a new Corona project with the  Coronium Core plugin .  Add the following code to the  main.lua , after the  initialzation  code:  core . pages . generateAuth ( function ( evt ) \n   core . debug ( evt )  end )",
            "title": "Create the script"
        },
        {
            "location": "/pages-guide/config/#run-the-script",
            "text": "Run the Corona project. If all goes well, you should see  result: true  output to the Corona console.  Your Pages module is now validated, you don't need to run this code again for this Coronium Core server instance.   Important  If you reinstall or move your  Coronium Core  server you will need to revalidate.",
            "title": "Run the script"
        },
        {
            "location": "/ssl/",
            "text": "Secure your \nCoronium Core\n server by utilizing the free SSL certificate service \nLet's Encrypt\n.\n\n\n\n\nWarning\n\n\nSetting up a secure Coronium Core server is not a trivial process, so be sure to read through \nall\n of the steps before starting, and then follow them carefully.\n\n\n\n\n\n\nScreencast\n\n\nView the secure install instructions in a screencast format by \nclicking here\n.\n\n\n\n\nOverview\n\n\nTo be issued a secure certificate, you must have a fully qualified domain name, and the proper DNS set up to serve the domain.\n\n\nA fully qualified domain name is basically a registered domain name. Where you decide to purchase a domain is up to you. \nGoDaddy\n is a popular choice. \n\n\nOnce you have your domain name, you will need to \"point\" it to your Coronium Core server. Most domain registars provide a means of setting up DNS.\n\n\nYou will want to set up a 3rd level domain for your Coronium Core server. This looks something like:\n\n\ncoronium.<mydomain>.com\n\n\nAmazon\n\n\nWhen you first install Coronium Core, make sure to \nadd the proper ports\n to security group settings. You can then use the \nRoute 53\n service for your DNS. There are ample guides to assist you. \n\n\nOnce set up, proceed to the \nLet's Encrypt\n section below.\n\n\nDigitalOcean\n\n\nYou will need to point your domain to the DigitalOcean nameservers. The process for this varies by domain registar, but in all cases, you will need the DigitalOcean nameserver addresses, which are:\n\n\n\n\nns1.digitalocean.com\n\n\nns2.digitalocean.com\n\n\nns3.digitalocean.com\n\n\n\n\nInstructions for setting nameservers on GoDaddy can be found \nhere\n.\n\n\n\n\nImportant\n\n\nSpin up a Coronium Core droplet as outlined in the \nDigitalOcean Installation\n section before continuing.\n\n\n\n\n1. In the DigitalOcean control panel, click the \nNetworking\n link at the top:\n\n\n\n\n2. Enter your new domain name, without any prefix:\n\n\n\n\n3. Click the \nAdd Domain\n button:\n\n\n\n\n4. On the next screen, do the following:\n\n\n\n\nEnter the hostname (only the domain prefix) of your Coronium Core server. (1)\n\n\nFrom the \nWILL DIRECT TO\n field, select your Coronium Core droplet. (2)\n\n\n\n\n\n\n5. Click the \nCreate Record\n button on the right:\n\n\n\n\nAt this point your DNS is set up, but generally needs to propagate. This can take anywhere from 5 minutes to a number of hours (though usually within 15 minutes). \n\n\nYou can check the progress using a site like \nwhatsmydns\n. Enter the full domain, including the prefix, to test.\n\n\nLet's Encrypt\n\n\n\n\nDanger\n\n\nDo not continue with this guide until you have an active domain name for your Coronium Core server that you can reach through your web browser.\n\n\n\n\nTo move your Coronium Core server over to HTTPS, perform the following steps:\n\n\n1. Log into your Coronium Core droplet using the \nroot\n user:\n\n\nssh root@<your-coronium-domain>\n\n\n\n\n\nNote: The root user is \nubuntu\n if hosting on Amazon.\n\n\nIf you have not changed the password yet, the default is \ncloudadmin\n. You may be prompted for your password at various times during this process.\n\n\n2. Copy and paste the following on the command line to run the Coronium Core SSL updater:\n\n\n\n\nWarning\n\n\nAt this point make sure you're ready to move over to HTTPS. The following process will permanently modify your configuration settings.\n\n\n\n\nwget https://s3.amazonaws.com/coronium-core/ssl.sh && sudo bash ./ssl.sh\n\n\n\n\n\nThe script will install the needed components, and update the configuration files. \n\n\nYou will then be propted for the \nhostname\n, a \nfully qualified domain name\n, and a valid \nemail\n. These items are required to request a certificate from Let's Encrypt.\n\n\nAs stated earlier, you should have created a 3rd level domain, for example: \ncoronium.<domain>.com\n. Using the example, when entering the requested information, it might look like:\n\n\n\n\nNote\n\n\nMake sure to hit the \ndelete\n key a few times before entering values. If the update returns a confirmation instantly, then a space in the data is the most likely reason. If this happens, start again at step 2 above.\n\n\n\n\nEnter a hostname:\n \ncoronium\n\n\nEnter a FQDN:\n \ncoronium.<domain>.com\n\n\nEnter an email:\n \nyou@your-email.com\n\n\nBe sure to replace the information with your own answers.\n\n\n\n\nWarning\n\n\nMake sure to triple check your information. If not, then you might not be issued a certificate.\n\n\n\n\nAfter receiving your secure certificate, the script will exit and your Coronium Core server will be accesible using \nhttps\n. \n\n\n\n\nTip\n\n\nIt's generally a good idea to reboot the server instance by entering \nsudo reboot -h\n on the command line. Wait a minute, and then check to make sure the server is running again.\n\n\n\n\nBe sure to update the \nhost\n in the client configuration (in the Corona project):\n\n\ncore\n:\ninit\n({\n\n  \nserver\n \n=\n \n\"https://<coronium-core-host>\"\n\n  \n...\n\n\n})",
            "title": "HTTPS / SSL"
        },
        {
            "location": "/ssl/#overview",
            "text": "To be issued a secure certificate, you must have a fully qualified domain name, and the proper DNS set up to serve the domain.  A fully qualified domain name is basically a registered domain name. Where you decide to purchase a domain is up to you.  GoDaddy  is a popular choice.   Once you have your domain name, you will need to \"point\" it to your Coronium Core server. Most domain registars provide a means of setting up DNS.  You will want to set up a 3rd level domain for your Coronium Core server. This looks something like:  coronium.<mydomain>.com",
            "title": "Overview"
        },
        {
            "location": "/ssl/#amazon",
            "text": "When you first install Coronium Core, make sure to  add the proper ports  to security group settings. You can then use the  Route 53  service for your DNS. There are ample guides to assist you.   Once set up, proceed to the  Let's Encrypt  section below.",
            "title": "Amazon"
        },
        {
            "location": "/ssl/#digitalocean",
            "text": "You will need to point your domain to the DigitalOcean nameservers. The process for this varies by domain registar, but in all cases, you will need the DigitalOcean nameserver addresses, which are:   ns1.digitalocean.com  ns2.digitalocean.com  ns3.digitalocean.com   Instructions for setting nameservers on GoDaddy can be found  here .   Important  Spin up a Coronium Core droplet as outlined in the  DigitalOcean Installation  section before continuing.   1. In the DigitalOcean control panel, click the  Networking  link at the top:   2. Enter your new domain name, without any prefix:   3. Click the  Add Domain  button:   4. On the next screen, do the following:   Enter the hostname (only the domain prefix) of your Coronium Core server. (1)  From the  WILL DIRECT TO  field, select your Coronium Core droplet. (2)    5. Click the  Create Record  button on the right:   At this point your DNS is set up, but generally needs to propagate. This can take anywhere from 5 minutes to a number of hours (though usually within 15 minutes).   You can check the progress using a site like  whatsmydns . Enter the full domain, including the prefix, to test.",
            "title": "DigitalOcean"
        },
        {
            "location": "/ssl/#lets-encrypt",
            "text": "Danger  Do not continue with this guide until you have an active domain name for your Coronium Core server that you can reach through your web browser.   To move your Coronium Core server over to HTTPS, perform the following steps:  1. Log into your Coronium Core droplet using the  root  user:  ssh root@<your-coronium-domain>  Note: The root user is  ubuntu  if hosting on Amazon.  If you have not changed the password yet, the default is  cloudadmin . You may be prompted for your password at various times during this process.  2. Copy and paste the following on the command line to run the Coronium Core SSL updater:   Warning  At this point make sure you're ready to move over to HTTPS. The following process will permanently modify your configuration settings.   wget https://s3.amazonaws.com/coronium-core/ssl.sh && sudo bash ./ssl.sh  The script will install the needed components, and update the configuration files.   You will then be propted for the  hostname , a  fully qualified domain name , and a valid  email . These items are required to request a certificate from Let's Encrypt.  As stated earlier, you should have created a 3rd level domain, for example:  coronium.<domain>.com . Using the example, when entering the requested information, it might look like:   Note  Make sure to hit the  delete  key a few times before entering values. If the update returns a confirmation instantly, then a space in the data is the most likely reason. If this happens, start again at step 2 above.   Enter a hostname:   coronium  Enter a FQDN:   coronium.<domain>.com  Enter an email:   you@your-email.com  Be sure to replace the information with your own answers.   Warning  Make sure to triple check your information. If not, then you might not be issued a certificate.   After receiving your secure certificate, the script will exit and your Coronium Core server will be accesible using  https .    Tip  It's generally a good idea to reboot the server instance by entering  sudo reboot -h  on the command line. Wait a minute, and then check to make sure the server is running again.   Be sure to update the  host  in the client configuration (in the Corona project):  core : init ({ \n   server   =   \"https://<coronium-core-host>\" \n   ...  })",
            "title": "Let's Encrypt"
        },
        {
            "location": "/demo/",
            "text": "Download\n\n\nA simple Corona demo project showing a few Coronium Core client module features is available by clicking on the link below.\n\n\nCoronium Core Demo\n\n\nUsage\n\n\n\n\n\n\nReplace the \nCORONIUM_SERVER_HOST\n placeholder with your server address.\n\n\n\n\n\n\nReplace the \nCORONIUM_SERVER_KEY\n placeholder with your \nserver key\n.\n\n\n\n\n\n\nRun the project using \nCorona\n, click the buttons, and view the output in the console.",
            "title": "Demo Project"
        },
        {
            "location": "/demo/#download",
            "text": "A simple Corona demo project showing a few Coronium Core client module features is available by clicking on the link below.  Coronium Core Demo",
            "title": "Download"
        },
        {
            "location": "/demo/#usage",
            "text": "Replace the  CORONIUM_SERVER_HOST  placeholder with your server address.    Replace the  CORONIUM_SERVER_KEY  placeholder with your  server key .    Run the project using  Corona , click the buttons, and view the output in the console.",
            "title": "Usage"
        },
        {
            "location": "/about/",
            "text": "Coronium Core\n\n\n\nCode and documentation \u00a92017 C. Byerley ( \ndevelephant\n )\n\n\nSupport\n\n\nFor questions, assistance, and discussions, visit the \nCoronium forum\n.\n\n\nLicense\n\n\nBSD 3-Clause License\n\n\nCopyright (c) 2017, C. Byerley\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n\n\n\n\n\nNeither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nCredits\n\n\nCoronium Core\n wouldn't be possible without these great projects.\n\n\n\n\nnginx\n\n\nngx_http_lua_module\n\n\nMongoDB\n\n\nMySQL\n\n\nLuaJIT\n\n\nLuaRocks\n\n\nChef\n\n\n\n\nAnd most importantly; my Wife, Daughter, Izzy & Supples (my pet ratties), the Corona community, and coffee.",
            "title": "About"
        },
        {
            "location": "/about/#support",
            "text": "For questions, assistance, and discussions, visit the  Coronium forum .",
            "title": "Support"
        },
        {
            "location": "/about/#license",
            "text": "BSD 3-Clause License  Copyright (c) 2017, C. Byerley\nAll rights reserved.  Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:    Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.    Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.    Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "title": "License"
        },
        {
            "location": "/about/#credits",
            "text": "Coronium Core  wouldn't be possible without these great projects.   nginx  ngx_http_lua_module  MongoDB  MySQL  LuaJIT  LuaRocks  Chef   And most importantly; my Wife, Daughter, Izzy & Supples (my pet ratties), the Corona community, and coffee.",
            "title": "Credits"
        }
    ]
}