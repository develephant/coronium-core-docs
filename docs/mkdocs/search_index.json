{
    "docs": [
        {
            "location": "/",
            "text": "Coronium Core\n\n\nExtend your \nCorona\n business and game applications into the cloud.\n\n\nAvailable for installation as a \nDigitalOcean\n droplet or \nAmamzon EC2\n instance.\n\n\n\n\nPlugin Required\n\n\nYou will need the \nCoronium Core Plugin\n available in the \nCorona Marketplace\n, in addition to a running server install.",
            "title": "Introduction"
        },
        {
            "location": "/#coronium-core",
            "text": "Extend your  Corona  business and game applications into the cloud.  Available for installation as a  DigitalOcean  droplet or  Amamzon EC2  instance.   Plugin Required  You will need the  Coronium Core Plugin  available in the  Corona Marketplace , in addition to a running server install.",
            "title": "Coronium Core"
        },
        {
            "location": "/server-install/digitalocean/",
            "text": "Coronium Core\n runs best on a \nDigitalOcean\n Ubuntu 16.04\n droplet.\n\n\n\n\nTip\n\n\nIf you're new to \nDigitalOcean\n please consider signing up with \nthis link\n. Not only will you receive a $10 credit (2 free months), but it also helps support the continued development, and testing of \nCoronium SkyTable\n.\n\n\n\n\nCreate A Droplet\n\n\nOnce you log into your \nDigitalOcean\n account, click the \nCreate\n button and select \nDroplets\n from the menu.\n\n\n\n\nOn the next screen, first select a \nUbuntu 16.04\n droplet distribution.\n\n\n \n\n\nSelect the droplet size. A \n1 GB/1 CPU\n droplet is recommended as a minimum. If you're only testing, you can use a 512 MB droplet and increase the size later.\n\n\n\n\nNext, select a region for the droplet. Consider choosing a location closest to your most active user base.\n\n\n\n\nSelect your SSH profile to attach to the droplet.\n\n\n\n\n\n\nCaution\n\n\nThere is an option where you can use a password instead of an SSH key, which may be easier if you're only testing \nCoronium Core\n, though I wouldn't recommend it. You can learn more about generating SSH keys for \nDigitalOcean\n here: \nCreating SSH Keys\n.\n\n\n\n\nNow give your droplet a hostname.\n\n\n\n\nBe sure to replace \ncoronium.develephant.com\n with your own hostname.\n\n\nAnd finally, click the \nCreate\n button to spin up the droplet.\n\n\n\n\nInstall Coronium Core\n\n\nOnce your droplet is done spinning up, note the ip address.\n\n\n\n\nUsing a terminal/shell of your choice, SSH into the droplet.\n\n\n\n\nTip\n\n\nYou can use the built in shells on both OSX and Linux. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh root@<your-instance-ip>\n\n\n\n\n\nReplace \n<your-instance-ip>\n with the address that was assigned to your droplet.\n\n\nOnce you are connected to the droplet, copy and paste the following line into the terminal:\n\n\ncurl -LO https://s3.amazonaws.com/coronium-core/up.sh && sudo bash ./up.sh\n\n\nOnce the installation is complete, \nCoronium Core\n is ready for action. Log out of the server by typing \nexit\n on the command line.\n\n\n\n\nUpgrade to HTTPS\n\n\nNow is a good time to secure your Coronium Core server using HTTPS. See the \nHTTPS/SSL\n section of the documentation.",
            "title": "DigitalOcean"
        },
        {
            "location": "/server-install/digitalocean/#create-a-droplet",
            "text": "Once you log into your  DigitalOcean  account, click the  Create  button and select  Droplets  from the menu.   On the next screen, first select a  Ubuntu 16.04  droplet distribution.     Select the droplet size. A  1 GB/1 CPU  droplet is recommended as a minimum. If you're only testing, you can use a 512 MB droplet and increase the size later.   Next, select a region for the droplet. Consider choosing a location closest to your most active user base.   Select your SSH profile to attach to the droplet.    Caution  There is an option where you can use a password instead of an SSH key, which may be easier if you're only testing  Coronium Core , though I wouldn't recommend it. You can learn more about generating SSH keys for  DigitalOcean  here:  Creating SSH Keys .   Now give your droplet a hostname.   Be sure to replace  coronium.develephant.com  with your own hostname.  And finally, click the  Create  button to spin up the droplet.",
            "title": "Create A Droplet"
        },
        {
            "location": "/server-install/digitalocean/#install-coronium-core",
            "text": "Once your droplet is done spinning up, note the ip address.   Using a terminal/shell of your choice, SSH into the droplet.   Tip  You can use the built in shells on both OSX and Linux. For Windows, check out  PuTTY .   ssh root@<your-instance-ip>  Replace  <your-instance-ip>  with the address that was assigned to your droplet.  Once you are connected to the droplet, copy and paste the following line into the terminal:  curl -LO https://s3.amazonaws.com/coronium-core/up.sh && sudo bash ./up.sh  Once the installation is complete,  Coronium Core  is ready for action. Log out of the server by typing  exit  on the command line.   Upgrade to HTTPS  Now is a good time to secure your Coronium Core server using HTTPS. See the  HTTPS/SSL  section of the documentation.",
            "title": "Install Coronium Core"
        },
        {
            "location": "/server-install/ec2/",
            "text": "Coronium Core\n server is eligible for the EC2 free tier using Amazon Web Services.\n\n\n\n\nPrerequisites\n\n\nThis guide assumes that you have an active AWS account, and are familiar with managing EC2 instances.\n\n\n\n\n\n\nScreencast\n\n\nView the installation instructions in a screencast format by \nclicking here\n.\n\n\n\n\nCreate An Instance\n\n\nOnce you log into the \nAWS Console\n, navigate to the \nEC2\n service. Click the \nLaunch Instance\n button.\n\n\nOn the next screen, find the \nUbuntu Server 16.04 LTS (HVM)\n AMI, and click the \nSelect\n button on the right.\n\n\nSelect your preferred instance type. A \nt2.micro\n is a good starting point. You can always increase the size later.\n\n\nClick the \nAdd Rule\n button on the \nConfigure Security Group\n screen, and add the following:\n\n\n\n\n\n\n\n\nType\n\n\nProtocol\n\n\nPort Range\n\n\nSource\n\n\n\n\n\n\n\n\n\n\nCustom TCP\n\n\nTCP\n\n\n7173\n\n\nAnywhere\n\n\n\n\n\n\n\n\nAdjust any additional settings, and then \nLaunch\n the AMI.\n\n\nInstall Coronium Core\n\n\nOnce your instance is in a \nrunning\n state, note the \nIPv4 Public IP\n address.\n\n\nUsing a terminal/shell of your choice, SSH into the instance.\n\n\n\n\nTip\n\n\nYou can use the built in shells on both OSX and Linux. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh -i <path/to/.pem> ubuntu@<your-instance-ip>\n\n\n\n\n\nReplace \n<your-instance-ip>\n with the address that was assigned to your instance.\n\n\nOnce you are connected to the droplet, copy and paste the following line into the terminal:\n\n\ncurl -LO https://s3.amazonaws.com/coronium-skytable/ami.sh && sudo bash ./ami.sh\n\n\nOnce the installation is complete, \nCoronium Core\n is ready for action. Log out of the server by typing \nexit\n on the command line.\n\n\n\n\nUpgrade to HTTPS\n\n\nNow is a good time to secure your Coronium Core server using HTTPS. See the \nHTTPS/SSL\n section of the documentation.",
            "title": "Amazon EC2"
        },
        {
            "location": "/server-install/ec2/#create-an-instance",
            "text": "Once you log into the  AWS Console , navigate to the  EC2  service. Click the  Launch Instance  button.  On the next screen, find the  Ubuntu Server 16.04 LTS (HVM)  AMI, and click the  Select  button on the right.  Select your preferred instance type. A  t2.micro  is a good starting point. You can always increase the size later.  Click the  Add Rule  button on the  Configure Security Group  screen, and add the following:     Type  Protocol  Port Range  Source      Custom TCP  TCP  7173  Anywhere     Adjust any additional settings, and then  Launch  the AMI.",
            "title": "Create An Instance"
        },
        {
            "location": "/server-install/ec2/#install-coronium-core",
            "text": "Once your instance is in a  running  state, note the  IPv4 Public IP  address.  Using a terminal/shell of your choice, SSH into the instance.   Tip  You can use the built in shells on both OSX and Linux. For Windows, check out  PuTTY .   ssh -i <path/to/.pem> ubuntu@<your-instance-ip>  Replace  <your-instance-ip>  with the address that was assigned to your instance.  Once you are connected to the droplet, copy and paste the following line into the terminal:  curl -LO https://s3.amazonaws.com/coronium-skytable/ami.sh && sudo bash ./ami.sh  Once the installation is complete,  Coronium Core  is ready for action. Log out of the server by typing  exit  on the command line.   Upgrade to HTTPS  Now is a good time to secure your Coronium Core server using HTTPS. See the  HTTPS/SSL  section of the documentation.",
            "title": "Install Coronium Core"
        },
        {
            "location": "/server-install/postinstall/",
            "text": "Reboot\n\n\nAfter the \nCoronium Core\n installation runs, it is wise to reboot the server instance, so that you can free up any memory that may have been used during the installation process.\n\n\nOn the command line, enter:\n\n\nsudo reboot -h\n\n\n\n\n\nThis will start the reboot process. Wait 15-30 seconds before using the server. All processes will automatically reload.",
            "title": "Post Install"
        },
        {
            "location": "/server-install/postinstall/#reboot",
            "text": "After the  Coronium Core  installation runs, it is wise to reboot the server instance, so that you can free up any memory that may have been used during the installation process.  On the command line, enter:  sudo reboot -h  This will start the reboot process. Wait 15-30 seconds before using the server. All processes will automatically reload.",
            "title": "Reboot"
        },
        {
            "location": "/server-setup/",
            "text": "Password\n\n\nThe default password for a fresh install is: \ncloudadmin\n.\n\n\n\n\nWarning\n\n\nYou should change the default password after the install.\n\n\n\n\nLog in with the \ncoronium\n user:\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nUse the following command to change the password:\n\n\nsudo passwd coronium\n\n\n\n\n\nAnd then follow the prompts.\n\n\nWhen you are finished, close the connection:\n\n\nexit\n\n\n\n\n\n\n\nDatabases\n\n\nAfter the \nCoronium Core\n server is running, you will need to run the database setup tool so that you can connect to your databases, both internally, and externally.\n\n\n1. Log in with the \ncoronium\n user:\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\n2. Enter your password. If you have not updated the password yet, the default is \ncloudadmin\n.\n\n\n3. Run the database setup tool:\n\n\nsudo coronium-dbsetup\n\n\n\n\n\n4. Carefully follow the prompts to set up the passwords for both MySQL and MongoDB.\n\n\n5. When you are finished, close the shell connection:\n\n\nexit\n\n\n\n\n\n\n\nTip\n\n\nUse the passwords you set to access your databases externally.",
            "title": "Server Setup"
        },
        {
            "location": "/server-setup/#password",
            "text": "The default password for a fresh install is:  cloudadmin .   Warning  You should change the default password after the install.   Log in with the  coronium  user:  ssh coronium@<your-instance-ip>  Use the following command to change the password:  sudo passwd coronium  And then follow the prompts.  When you are finished, close the connection:  exit",
            "title": "Password"
        },
        {
            "location": "/server-setup/#databases",
            "text": "After the  Coronium Core  server is running, you will need to run the database setup tool so that you can connect to your databases, both internally, and externally.  1. Log in with the  coronium  user:  ssh coronium@<your-instance-ip>  2. Enter your password. If you have not updated the password yet, the default is  cloudadmin .  3. Run the database setup tool:  sudo coronium-dbsetup  4. Carefully follow the prompts to set up the passwords for both MySQL and MongoDB.  5. When you are finished, close the shell connection:  exit   Tip  Use the passwords you set to access your databases externally.",
            "title": "Databases"
        },
        {
            "location": "/server-guide/",
            "text": "Viewing Logs\n\n\nTo view log files, connect to the server with the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\n\n\nTip\n\n\nTo quickly monitor the main server log file, enter \ncclog\n on the command line.\n\n\n\n\nLog files can be found in the \n/usr/local/coronium/logs\n directory. Possible log files include \nnginx.log\n and \nmongo.log\n.\n\n\nTo watch a log file in real-time:\n\n\ntail -f /usr/local/coronium/logs/<log-name>.log\n\n\n\n\n\nPress \ncontrol-x\n to stop watching the log file.\n\n\n\n\nNote\n\n\nThe log files are managed automatically, and will be \"rotated\" once they exceed a certain size limit.\n\n\n\n\n\n\nTip\n\n\nTo view all logs consolidated into one file (including the mysql.log) type \ncc logs\n.\n\n\n\n\n\n\nSystem Services\n\n\nWhen your \nCoronium Core\n server starts, its monitored by a utility called \nMonit\n, which makes sure that the required processes stay active. In the event that a process runs into an issue or crashes, it will be restarted shortly.\n\n\nIn the rare case where you need to manually stop, start or restart the Coronium stack, log in using the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nTo stop the Coronium stack, on the command line, enter:\n\n\nsudo monit -g coronium stop\n\n\n\n\n\nTo start the Coronium stack, use:\n\n\nsudo monit -g coronium start\n\n\n\n\n\nTo restart the Coronium stack:\n\n\nsudo monit -g coronium restart\n\n\n\n\n\n\n\nCaution\n\n\nYou should rarely need to manually control the Coronium stack process.",
            "title": "Server Guide"
        },
        {
            "location": "/server-guide/#viewing-logs",
            "text": "To view log files, connect to the server with the  coronium  user.  ssh coronium@<your-instance-ip>   Tip  To quickly monitor the main server log file, enter  cclog  on the command line.   Log files can be found in the  /usr/local/coronium/logs  directory. Possible log files include  nginx.log  and  mongo.log .  To watch a log file in real-time:  tail -f /usr/local/coronium/logs/<log-name>.log  Press  control-x  to stop watching the log file.   Note  The log files are managed automatically, and will be \"rotated\" once they exceed a certain size limit.    Tip  To view all logs consolidated into one file (including the mysql.log) type  cc logs .",
            "title": "Viewing Logs"
        },
        {
            "location": "/server-guide/#system-services",
            "text": "When your  Coronium Core  server starts, its monitored by a utility called  Monit , which makes sure that the required processes stay active. In the event that a process runs into an issue or crashes, it will be restarted shortly.  In the rare case where you need to manually stop, start or restart the Coronium stack, log in using the  coronium  user.  ssh coronium@<your-instance-ip>  To stop the Coronium stack, on the command line, enter:  sudo monit -g coronium stop  To start the Coronium stack, use:  sudo monit -g coronium start  To restart the Coronium stack:  sudo monit -g coronium restart   Caution  You should rarely need to manually control the Coronium stack process.",
            "title": "System Services"
        },
        {
            "location": "/server-api/overview/",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/server-api/api/",
            "text": "Used to build your application api.\n\n\nlocal\n \napi\n \n=\n \ncore\n.\napi\n()\n\n\n\nfunction\n \napi\n.\necho\n(\n \ninput\n \n)\n\n  \nreturn\n \ninput\n\n\nend\n\n\n\nreturn\n \napi",
            "title": "API"
        },
        {
            "location": "/server-api/db/",
            "text": "Overview\n\n\nThe \nDB\n module provides simple access to a document style (schema-less) datastore.\n\n\n\n\nNote\n\n\nWhile the \nDB\n module uses Mongo, it is a simple abstraction layer providing basic functionality. It is not a full Mongo client. For complex query needs it is recommended that you use the \nMySQL\n module.",
            "title": "DB"
        },
        {
            "location": "/server-api/db/#overview",
            "text": "The  DB  module provides simple access to a document style (schema-less) datastore.   Note  While the  DB  module uses Mongo, it is a simple abstraction layer providing basic functionality. It is not a full Mongo client. For complex query needs it is recommended that you use the  MySQL  module.",
            "title": "Overview"
        },
        {
            "location": "/server-api/geoip/",
            "text": "Overview\n\n\nThe following methods use the \nGeoIP\n databases. All data is based on incoming IP, which may or may not be proxied.\n\n\n\n\nWarning\n\n\nThe following methods can only be used within a \ncore.api\n method.\n\n\n\n\n\n\nNote\n\n\nThe following methods may return nothing depending on the database IP matching.\n\n\n\n\n\n\ncountryCode\n\n\nTwo-letter country code, for example, \u201cRU\u201d, \u201cUS\u201d.\n\n\nExample\n\n\nlocal\n \ncountry_code\n \n=\n \ncore\n.\ngeoip\n.\ncountryCode\n()\n\n\n\n\n\n\n\n\ncountryCode3\n\n\nThree-letter country code, for example, \u201cRUS\u201d, \u201cUSA\u201d.\n\n\nExample\n\n\nlocal\n \ncountry_code3\n \n=\n \ncore\n.\ngeoip\n.\ncountryCode3\n()\n\n\n\n\n\n\n\n\ncountryName\n\n\nCountry name, for example, \u201cRussian Federation\u201d, \u201cUnited States\u201d.\n\n\nExample\n\n\nlocal\n \ncountry_name\n \n=\n \ncore\n.\ngeoip\n.\ncountryName\n()\n\n\n\n\n\n\n\n\ncity\n\n\nCity name, for example, \u201cMoscow\u201d, \u201cWashington\u201d.\n\n\nExample\n\n\nlocal\n \ncity\n \n=\n \ncore\n.\ngeoip\n.\ncity\n()\n\n\n\n\n\n\n\n\npostalCode\n\n\nPostal code.\n\n\nExample\n\n\nlocal\n \npostal_code\n \n=\n \ncloud\n.\ngeoip\n.\npostalCode\n()\n\n\n\n\n\n\n\n\ncityContinentCode\n\n\nTwo-letter continent code, for example, \u201cEU\u201d, \u201cNA\u201d.\n\n\nExample\n\n\nlocal\n \ncity_continent_code\n \n=\n \ncore\n.\ngeoip\n.\ncityContinentCode\n()\n\n\n\n\n\n\n\n\nregion\n\n\nTwo-symbol country region code (region, territory, state, province, etc.), for example, \u201c48\u201d, \u201cDC\u201d.\n\n\nExample\n\n\nlocal\n \nregion\n \n=\n \ncore\n.\ngeoip\n.\nregion\n()\n\n\n\n\n\n\n\n\nregionName\n\n\nCountry region name (region, territory, state, province, etc.), for example, \u201cMoscow City\u201d, \u201cDistrict of Columbia\u201d.\n\n\nExample\n\n\nlocal\n \nregion_name\n \n=\n \ncore\n.\ngeoip\n.\nregionName\n()\n\n\n\n\n\n\n\n\nlatitude\n\n\nLatitude.\n\n\nExample\n\n\nlocal\n \nlatitude\n \n=\n \ncore\n.\ngeoip\n.\nlatitude\n()\n\n\n\n\n\n\n\n\nlongitude\n\n\nLongitude.\n\n\nExample\n\n\nlocal\n \nlongitude\n \n=\n \ncore\n.\ngeoip\n.\nlongitude\n()",
            "title": "GeoIP"
        },
        {
            "location": "/server-api/geoip/#overview",
            "text": "The following methods use the  GeoIP  databases. All data is based on incoming IP, which may or may not be proxied.   Warning  The following methods can only be used within a  core.api  method.    Note  The following methods may return nothing depending on the database IP matching.",
            "title": "Overview"
        },
        {
            "location": "/server-api/geoip/#countrycode",
            "text": "Two-letter country code, for example, \u201cRU\u201d, \u201cUS\u201d.  Example  local   country_code   =   core . geoip . countryCode ()",
            "title": "countryCode"
        },
        {
            "location": "/server-api/geoip/#countrycode3",
            "text": "Three-letter country code, for example, \u201cRUS\u201d, \u201cUSA\u201d.  Example  local   country_code3   =   core . geoip . countryCode3 ()",
            "title": "countryCode3"
        },
        {
            "location": "/server-api/geoip/#countryname",
            "text": "Country name, for example, \u201cRussian Federation\u201d, \u201cUnited States\u201d.  Example  local   country_name   =   core . geoip . countryName ()",
            "title": "countryName"
        },
        {
            "location": "/server-api/geoip/#city",
            "text": "City name, for example, \u201cMoscow\u201d, \u201cWashington\u201d.  Example  local   city   =   core . geoip . city ()",
            "title": "city"
        },
        {
            "location": "/server-api/geoip/#postalcode",
            "text": "Postal code.  Example  local   postal_code   =   cloud . geoip . postalCode ()",
            "title": "postalCode"
        },
        {
            "location": "/server-api/geoip/#citycontinentcode",
            "text": "Two-letter continent code, for example, \u201cEU\u201d, \u201cNA\u201d.  Example  local   city_continent_code   =   core . geoip . cityContinentCode ()",
            "title": "cityContinentCode"
        },
        {
            "location": "/server-api/geoip/#region",
            "text": "Two-symbol country region code (region, territory, state, province, etc.), for example, \u201c48\u201d, \u201cDC\u201d.  Example  local   region   =   core . geoip . region ()",
            "title": "region"
        },
        {
            "location": "/server-api/geoip/#regionname",
            "text": "Country region name (region, territory, state, province, etc.), for example, \u201cMoscow City\u201d, \u201cDistrict of Columbia\u201d.  Example  local   region_name   =   core . geoip . regionName ()",
            "title": "regionName"
        },
        {
            "location": "/server-api/geoip/#latitude",
            "text": "Latitude.  Example  local   latitude   =   core . geoip . latitude ()",
            "title": "latitude"
        },
        {
            "location": "/server-api/geoip/#longitude",
            "text": "Longitude.  Example  local   longitude   =   core . geoip . longitude ()",
            "title": "longitude"
        },
        {
            "location": "/server-api/json/",
            "text": "encode\n\n\nlocal\n \njson_str\n \n=\n \ncore\n.\njson\n.\nencode\n(\n \ntbl\n \n)\n\n\n\n\n\n\n\n\ndecode\n\n\nlocal\n \ntbl\n \n=\n \ncore\n.\njson\n.\ndecode\n(\n \njson_str\n \n)",
            "title": "JSON"
        },
        {
            "location": "/server-api/json/#encode",
            "text": "local   json_str   =   core . json . encode (   tbl   )",
            "title": "encode"
        },
        {
            "location": "/server-api/json/#decode",
            "text": "local   tbl   =   core . json . decode (   json_str   )",
            "title": "decode"
        },
        {
            "location": "/server-api/mysql/",
            "text": "Overview\n\n\nYour Coronium Core server contains a local \nMySQL\n database. It's also possible to connect to a remote \nMySQL\n database as well.\n\n\n\n\nquery\n\n\ncore\n.\nmysql\n.\nquery\n(\n \nconnection_tbl\n,\n \nquery_str\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nconnection_tbl\n\n\nThe connection table for the database (see below).\n\n\nnil\n\n\nY\n\n\n\n\n\n\nquery_str\n\n\nThe MySQL query to send to the database.\n\n\nnil\n\n\nY\n\n\n\n\n\n\n\n\nThe Connection Table\n\n\nYou need to provide a database connection table to select the working database. The table uses the following keys:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndatabase\n\n\nThe database to work with.\n\n\nString\n\n\nY\n\n\n\n\n\n\nuser\n\n\nThe database user.\n\n\nString\n\n\nN\n\n\n\n\n\n\npassword\n\n\nThe user password\n\n\nString\n\n\nN\n\n\n\n\n\n\nhost\n\n\nThe database host, can be used for external connections.\n\n\nString\n\n\nN\n\n\n\n\n\n\nport\n\n\nThe database port number.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nclient_id\n \n=\n \n100\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n \ndatabase\n \n=\n \n\"clients\"\n \n}\n\n\nlocal\n \nquery\n \n=\n \ncloud\n.\nsf\n(\n\"SELECT * FROM orders WHERE id=%d\"\n,\n \nclient_id\n)\n\n\nlocal\n \nok\n,\n \nresult\n \n=\n \ncloud\n.\nmysql\n.\nquery\n(\nconn_tbl\n,\n \nquery\n)\n\n\nif\n \nnot\n \nok\n \nthen\n\n  \ncore\n.\nlog\n(\nresult\n)\n \n--error is in the result\n\n\nend\n\n\n\n-- `result` is a table array of records.\n\n\n\n\n\n\n\n\nstring\n\n\nReturn a \nMySQL\n safe string.\n\n\ncore\n.\nmysql\n.\nstring\n(\n \nunwashed_string\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nunwashed_string\n\n\nThe string to make SQL \"safe\".\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nsafe_str\n \n=\n \ncore\n.\nmysql\n.\nstring\n(\n\"Some possibly unsafe string.\"\n)\n\n\n\n\n\n\n\n\nDatabag Usage\n\n\nA \ndatabag\n wraps common MySQL actions into a module format.\n\n\n\n\nNote\n\n\nIf you prefer the query style shown above, feel free to use it instead. They both produce similar results.\n\n\n\n\n\n\ndatabag\n\n\nA prebuilt data object for basic \nMySQL\n handling.\n\n\ncore\n.\nmysql\n.\ndatabag\n(\n \nconnection_tbl\n \n)\n\n\n\n\n\n\nReturns\n\n\nA new databag instance.\n\n\nParameters\n\n\nSee \nThe Connection Table\n section above.\n\n\nExample\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n \ndatabase\n \n=\n \n\"leaderboard\"\n \n}\n\n\nlocal\n \ndatabag\n \n=\n \ncore\n.\nmysql\n.\ndatabag\n(\n \nconn_tbl\n \n)\n\n\n\n\n\n\n\n\nselect\n\n\ndatabag\n:\nselect\n(\n \nselect_tbl\n \n)\n\n\n\n\n\n\nParameters\n\n\nThis method requires a table with the following keys (not all keys required):\n\n\nSelect Table Keys\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntableName\n\n\nName of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\ncolumns\n\n\nSpecific columns to select as strings.\n\n\nTable array\n\n\nN\n\n\n\n\n\n\nwhere\n\n\nAny additional WHERE clause to apply.\n\n\nString\n\n\nN\n\n\n\n\n\n\norderby\n\n\nThe sorting attributes. See \nOrderby Table\n.\n\n\nTable\n\n\nN\n\n\n\n\n\n\nlimit\n\n\nLimit the amount of the return to this number.\n\n\nNumber\n\n\nN\n\n\n\n\n\n\ndistinct\n\n\nDo not select duplicate column values.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nOrderby Table Keys\n\n\nThe \norderby\n key in the \nSelect Table\n is a table array filled with table objects containing the following keys:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncolName\n\n\nName of a column to sort on.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndirection\n\n\nWhich direction to sort the column\n\n\ncore.ASC\n or \ncore.DESC\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nA \nresult\n or \nnil\n, \nerror\n, and possible \nerrorCode\n.\n\n\nExample\n\n\n-- Select and return all records from 'scores'.\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n \ndatabase\n \n=\n \n\"leaderboard\"\n \n}\n\n\nlocal\n \ndb\n \n=\n \ncore\n.\nmysql\n.\ndatabag\n(\nconn_tbl\n)\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ndb\n:\nselect\n({\n\n  \ntableName\n \n=\n \n'scores'\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n\nend\n\n\n\n-- Records are Lua tables in a table array.\n\n\nfor\n \n_\n,\n \nrecord\n \nin\n \nipairs\n(\nresult\n)\n \ndo\n\n  \ncore\n.\nlog\n(\nrecord\n.\nplayer\n..\n' scored '\n..\nrecord\n.\nscore\n)\n\n\nend\n\n\n\nreturn\n \nresult\n\n\n\n\n\n\nExample\n\n\n-- Select and return refined query.\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n \ndatabase\n \n=\n \n\"leaderboard\"\n \n}\n\n\nlocal\n \ndb\n \n=\n \ncore\n.\nmysql\n.\ndatabag\n(\n \nconn_tbl\n \n)\n\n\n\nlocal\n \nresult\n,\n \nerr\n,\n \nerrCode\n \n=\n \ndb\n:\nselect\n({\n\n  \ntableName\n \n=\n \n'scores'\n,\n\n  \ncolumns\n \n=\n \n{\n'score'\n},\n\n  \nwhere\n \n=\n \n'score > 10'\n,\n\n  \nlimit\n \n=\n \n10\n,\n\n  \norderby\n \n=\n \n{\n\n    \nscore\n \n=\n \ncore\n.\nDESCENDING\n\n  \n}\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \nreturn\n \ncore\n.\nerror\n(\n \nerr\n,\n \nerrCode\n \n)\n\n\nend\n\n\n\nreturn\n \nresult\n\n\n\n\n\n\n\n\ninsert\n\n\ndatabag\n:\ninsert\n(\n \ninsert_tbl\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ninsert_tbl\n\n\nThe insert table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nInsert Table Keys\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntableName\n\n\nThe MySQL table name to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\ncolumns\n\n\nAn array of column names as strings.\n\n\nTable array\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nAn array of values for each specified column.\n\n\nTable array (mixed)\n\n\nY\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe amount of columns must match the amount of values for this action to be successful.\n\n\n\n\nReturns\n\n\nA \nresult\n or \nnil\n, \nerror\n, and possible \nerrorCode\n.\n\n\nExample\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n \ndatabase\n \n=\n \n\"leaderboard\"\n \n}\n\n\nlocal\n \ndb\n \n=\n \ncore\n.\nmysql\n.\ndatabag\n(\n \nconn_tbl\n \n)\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ndb\n:\ninsert\n({\n\n  \ntableName\n \n=\n \n'scores'\n,\n\n  \ncolumns\n \n=\n \n{\n'score'\n,\n \n'player'\n},\n\n  \nvalues\n \n=\n \n{\n200\n,\n \n'Sandy'\n}\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n\nend\n\n\n\nreturn\n \nresult\n\n\n\n\n\n\n\n\nupdate\n\n\ndatabag\n:\nupdate\n(\n \nupdate_tbl\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nupdate_tbl\n\n\nThe update table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nUpdate Table Keys\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntableName\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nTable of name = val pairs.\n\n\nTable\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nWhere the colums should be updated.\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nA \nresult\n or \nnil\n, \nerror\n, and possible \nerrorCode\n.\n\n\nExample\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n \ndatabase\n \n=\n \n\"leaderboard\"\n \n}\n\n\nlocal\n \ndatabag\n \n=\n \ncore\n.\nmysql\n.\ndatabag\n(\n \nconn_tbl\n \n)\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ndatabag\n:\nupdate\n({\n\n  \ntableName\n \n=\n \n'scores'\n,\n\n  \nvalues\n \n=\n \n{\n\n    \nscore\n \n=\n \n230\n\n  \n},\n\n  \nwhere\n \n=\n \n'player='\n..\ncore\n.\nmysql\n.\nstring\n(\nplayer\n)\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n\nend\n\n\n\nreturn\n \nresult\n\n\n\n\n\n\n\n\ndelete\n\n\ndatabag\n:\ndelete\n(\n \ndelete_tbl\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndelete_tbl\n\n\nThe delete table options (see below).\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nDelete Table Keys\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntableName\n\n\nThe name of the table to operate on.\n\n\nString\n\n\nY\n\n\n\n\n\n\nwhere\n\n\nA WHERE clause to limit deletions to.\n\n\nString\n\n\nN\n\n\n\n\n\n\nforce\n\n\nDisables safety check for mising where clause.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThough optional, you should \nalways\n include a where key query when removing records. Without it, you could possibly delete \nall\n of the tables records.\n\n\n\n\nReturns\n\n\nA \nresult\n or \nnil\n, \nerror\n, and possible \nerrorCode\n.\n\n\nExample\n\n\nlocal\n \nconn_tbl\n \n=\n \n{\n \ndatabase\n \n=\n \n\"leaderboard\"\n \n}\n\n\nlocal\n \ndatabag\n \n=\n \ncore\n.\nmysql\n.\ndatabag\n(\n \nconn_tbl\n \n)\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \ndatabag\n:\ndelete\n({\n\n  \ntableName\n \n=\n \n'scores'\n,\n\n  \nwhere\n \n=\n \n'score < 10'\n\n\n})\n\n\n\nif\n \nnot\n \nresult\n \nthen\n\n  \nreturn\n \ncore\n.\nerror\n(\nerr\n)\n\n\nend\n\n\n\nreturn\n \nresult\n\n\n\n\n\n\n\n\ncleanbag\n\n\nClears all internal databag query variables \nexcept\n the connection table. The databag is still usable.\n\n\ndatabag\n:\ncleanbag\n()\n\n\n\n\n\n\n\n\nNote\n\n\nYou generally don't need to call this method. It's called automatically before any new actions take place.",
            "title": "MySQL"
        },
        {
            "location": "/server-api/mysql/#overview",
            "text": "Your Coronium Core server contains a local  MySQL  database. It's also possible to connect to a remote  MySQL  database as well.",
            "title": "Overview"
        },
        {
            "location": "/server-api/mysql/#query",
            "text": "core . mysql . query (   connection_tbl ,   query_str   )   Parameters     Name  Description  Default  Required      connection_tbl  The connection table for the database (see below).  nil  Y    query_str  The MySQL query to send to the database.  nil  Y     The Connection Table  You need to provide a database connection table to select the working database. The table uses the following keys:     Key  Description  Type  Required      database  The database to work with.  String  Y    user  The database user.  String  N    password  The user password  String  N    host  The database host, can be used for external connections.  String  N    port  The database port number.  Number  N     Example  local   client_id   =   100  local   conn_tbl   =   {   database   =   \"clients\"   }  local   query   =   cloud . sf ( \"SELECT * FROM orders WHERE id=%d\" ,   client_id )  local   ok ,   result   =   cloud . mysql . query ( conn_tbl ,   query )  if   not   ok   then \n   core . log ( result )   --error is in the result  end  -- `result` is a table array of records.",
            "title": "query"
        },
        {
            "location": "/server-api/mysql/#string",
            "text": "Return a  MySQL  safe string.  core . mysql . string (   unwashed_string   )   Parameters     Name  Description  Requried      unwashed_string  The string to make SQL \"safe\".  Y     Example  local   safe_str   =   core . mysql . string ( \"Some possibly unsafe string.\" )",
            "title": "string"
        },
        {
            "location": "/server-api/mysql/#databag-usage",
            "text": "A  databag  wraps common MySQL actions into a module format.   Note  If you prefer the query style shown above, feel free to use it instead. They both produce similar results.",
            "title": "Databag Usage"
        },
        {
            "location": "/server-api/mysql/#databag",
            "text": "A prebuilt data object for basic  MySQL  handling.  core . mysql . databag (   connection_tbl   )   Returns  A new databag instance.  Parameters  See  The Connection Table  section above.  Example  local   conn_tbl   =   {   database   =   \"leaderboard\"   }  local   databag   =   core . mysql . databag (   conn_tbl   )",
            "title": "databag"
        },
        {
            "location": "/server-api/mysql/#select",
            "text": "databag : select (   select_tbl   )   Parameters  This method requires a table with the following keys (not all keys required):  Select Table Keys     Key  Description  Type  Required      tableName  Name of the table to operate on.  String  Y    columns  Specific columns to select as strings.  Table array  N    where  Any additional WHERE clause to apply.  String  N    orderby  The sorting attributes. See  Orderby Table .  Table  N    limit  Limit the amount of the return to this number.  Number  N    distinct  Do not select duplicate column values.  Boolean  N     Orderby Table Keys  The  orderby  key in the  Select Table  is a table array filled with table objects containing the following keys:     Key  Description  Type  Required      colName  Name of a column to sort on.  String  Y    direction  Which direction to sort the column  core.ASC  or  core.DESC  N     Returns  A  result  or  nil ,  error , and possible  errorCode .  Example  -- Select and return all records from 'scores'.  local   conn_tbl   =   {   database   =   \"leaderboard\"   }  local   db   =   core . mysql . databag ( conn_tbl )  local   result ,   err   =   db : select ({ \n   tableName   =   'scores'  })  if   not   result   then \n   return   core . error ( err )  end  -- Records are Lua tables in a table array.  for   _ ,   record   in   ipairs ( result )   do \n   core . log ( record . player .. ' scored ' .. record . score )  end  return   result   Example  -- Select and return refined query.  local   conn_tbl   =   {   database   =   \"leaderboard\"   }  local   db   =   core . mysql . databag (   conn_tbl   )  local   result ,   err ,   errCode   =   db : select ({ \n   tableName   =   'scores' , \n   columns   =   { 'score' }, \n   where   =   'score > 10' , \n   limit   =   10 , \n   orderby   =   { \n     score   =   core . DESCENDING \n   }  })  if   not   result   then \n   return   core . error (   err ,   errCode   )  end  return   result",
            "title": "select"
        },
        {
            "location": "/server-api/mysql/#insert",
            "text": "databag : insert (   insert_tbl   )   Parameters     Key  Description  Type  Required      insert_tbl  The insert table options (see below).  Table  Y     Insert Table Keys     Key  Description  Type  Required      tableName  The MySQL table name to operate on.  String  Y    columns  An array of column names as strings.  Table array  Y    values  An array of values for each specified column.  Table array (mixed)  Y      Warning  The amount of columns must match the amount of values for this action to be successful.   Returns  A  result  or  nil ,  error , and possible  errorCode .  Example  local   conn_tbl   =   {   database   =   \"leaderboard\"   }  local   db   =   core . mysql . databag (   conn_tbl   )  local   result ,   err   =   db : insert ({ \n   tableName   =   'scores' , \n   columns   =   { 'score' ,   'player' }, \n   values   =   { 200 ,   'Sandy' }  })  if   not   result   then \n   return   core . error ( err )  end  return   result",
            "title": "insert"
        },
        {
            "location": "/server-api/mysql/#update",
            "text": "databag : update (   update_tbl   )   Parameters     Key  Description  Type  Required      update_tbl  The update table options (see below).  Table  Y     Update Table Keys     Key  Description  Type  Required      tableName  The name of the table to operate on.  String  Y    values  Table of name = val pairs.  Table  Y    where  Where the colums should be updated.  String  N     Returns  A  result  or  nil ,  error , and possible  errorCode .  Example  local   conn_tbl   =   {   database   =   \"leaderboard\"   }  local   databag   =   core . mysql . databag (   conn_tbl   )  local   result ,   err   =   databag : update ({ \n   tableName   =   'scores' , \n   values   =   { \n     score   =   230 \n   }, \n   where   =   'player=' .. core . mysql . string ( player )  })  if   not   result   then \n   return   core . error ( err )  end  return   result",
            "title": "update"
        },
        {
            "location": "/server-api/mysql/#delete",
            "text": "databag : delete (   delete_tbl   )   Parameters     Key  Description  Type  Required      delete_tbl  The delete table options (see below).  Table  Y     Delete Table Keys     Key  Description  Type  Required      tableName  The name of the table to operate on.  String  Y    where  A WHERE clause to limit deletions to.  String  N    force  Disables safety check for mising where clause.  Boolean  N      Warning  Though optional, you should  always  include a where key query when removing records. Without it, you could possibly delete  all  of the tables records.   Returns  A  result  or  nil ,  error , and possible  errorCode .  Example  local   conn_tbl   =   {   database   =   \"leaderboard\"   }  local   databag   =   core . mysql . databag (   conn_tbl   )  local   result ,   err   =   databag : delete ({ \n   tableName   =   'scores' , \n   where   =   'score < 10'  })  if   not   result   then \n   return   core . error ( err )  end  return   result",
            "title": "delete"
        },
        {
            "location": "/server-api/mysql/#cleanbag",
            "text": "Clears all internal databag query variables  except  the connection table. The databag is still usable.  databag : cleanbag ()    Note  You generally don't need to call this method. It's called automatically before any new actions take place.",
            "title": "cleanbag"
        },
        {
            "location": "/server-api/network/",
            "text": "Overview\n\n\nMake external HTTP network requests and retrieve the results.\n\n\nExample\n\n\nlocal\n \nrequest\n \n=\n \ncloud\n.\nnetwork\n.\nnew\n(\n'google.com'\n)\n \n--host only, no path\n\n\nrequest\n:\npath\n(\n'/end/point'\n)\n\n\nrequest\n:\nmethod\n(\ncloud\n.\nPOST\n)\n\n\nrequest\n:\nbody\n(\n<\nJSON\n \nCONTENT\n>\n)\n\n\nrequest\n:\nheaders\n({\n\n  \n[\n'Content-Type'\n]\n \n=\n \n'application/json'\n,\n\n  \n-- add more headers\n\n\n})\n\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \nrequest\n:\nresult\n()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nAll of the network methods, except for \nnew\n and \nrequest\n are getters and setters.\n\n\n\n\nUsing getters and setters\n\n\n-- To get a value, omit any arguments\n\n\nlocal\n \nhost\n \n=\n \nrequest\n:\nhost\n()\n\n\n\n-- To set a an option\n\n\nrequest\n:\nhost\n(\n'12.12.12.12'\n)\n\n\n\n-- Chain options\n\n\nrequest\n:\nhost\n(\n'12.12.12.12'\n):\nport\n(\n8080\n)\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \nrequest\n:\nresult\n()\n\n\n\n\n\n\n\n\nnew\n\n\ncore\n.\nnetwork\n.\nnew\n(\n \n[\nhost\n][,\n \nport\n]\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nThe hostname to connect to.\n\n\nString\n\n\n'127.0.0.1'\n\n\nN\n\n\n\n\n\n\nport\n\n\nThe port number to connect with.\n\n\nNumber\n\n\n80\n\n\nN\n\n\n\n\n\n\n\n\nThe host and port can be set with the network instance methods as well.\n\n\nReturns\n\n\nA new request connection object.\n\n\nExample\n\n\nlocal\n \nrequest\n \n=\n \ncore\n.\nnetwork\n.\nnew\n(\n'123.123.123.123'\n,\n \n8080\n)\n\n\n\n\n\n\n\n\nhost\n\n\nrequest\n:\nhost\n(\n \nhostname\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nhostname\n\n\nThe hostname to connect to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe hostname if no value is passed.\n\n\nExample\n\n\nlocal\n \nhostname\n \n=\n \nrequest\n:\nhostname\n()\n\n\n\n--set\n\n\nrequest\n:\nhostname\n(\n'13.13.13.13'\n)\n\n\n\n\n\n\n\n\nport\n\n\nrequest\n:\nport\n(\n \nport\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nport\n\n\nThe port to connect to.\n\n\nNumber\n\n\n80\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe port if no value is passed.\n\n\nExample\n\n\nlocal\n \nport\n \n=\n \nrequest\n:\nport\n()\n\n\n\n--set\n\n\nrequest\n:\nport\n(\n8080\n)\n\n\n\n\n\n\n\n\npath\n\n\nrequest\n:\npath\n(\n \npath\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe path to connect to.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe path if no value is passed.\n\n\nExample\n\n\nlocal\n \npath\n \n=\n \nrequest\n:\npath\n()\n\n\n\n--set\n\n\nrequest\n:\npath\n(\n'/echo/test'\n)\n\n\n\n\n\n\n\n\nheader\n\n\nrequest\n:\nheader\n(\n \nname\n,\n \nvalue\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe header name\n\n\nString\n\n\nY\n\n\n\n\n\n\nvalue\n\n\nThe header value.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe header value if only the name key is passed.\n\n\nExample\n\n\nlocal\n \nheader\n \n=\n \nrequest\n:\nheader\n(\n'Content-Type'\n)\n\n\n\n--set\n\n\nrequest\n:\nheader\n(\n'Content-Type'\n,\n'application/json'\n)\n\n\n\n\n\n\n\n\nheaders\n\n\nrequest\n:\nheaders\n(\n \nheaders\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nheaders\n\n\nA table of request headers.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nAll headers if no arguments are passed.\n\n\nExample\n\n\nlocal\n \nheader\n \n=\n \nrequest\n:\nheaders\n()\n\n\n\n--set\n\n\nrequest\n:\nheaders\n({\n\n  \n'Content-Type'\n \n=\n \n'application/json'\n,\n\n  \n'Host'\n \n=\n \n'12.12.12.12.'\n\n\n})\n\n\n\n\n\n\n\n\nWarning\n\n\nThe \nheaders\n method will clear \nall\n existing header assigments.\n\n\n\n\n\n\nmethod\n\n\nrequest\n:\nmethod\n(\n \nmethod\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\nA HTTP method. Can use method constants (see below).\n\n\ncore.POST\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe HTTP method name if no arguments are passed.\n\n\nExample\n\n\nlocal\n \nmethod\n \n=\n \nrequest\n:\nmethod\n()\n\n\n\n--set\n\n\nrequest\n:\nmethod\n(\ncloud\n.\nGET\n)\n\n\n\n\n\n\nMethod Constants\n\n\n\n\n\n\n\n\nConstant\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncore.POST\n\n\nPOST request method\n\n\n\n\n\n\ncore.GET\n\n\nGET request method\n\n\n\n\n\n\ncore.DELETE\n\n\nDELETE request method\n\n\n\n\n\n\ncore.UPDATE\n\n\nUPDATE request method\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\nrequest\n:\ntimeout\n(\n \ntimeout\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\nTimeout in \nmilliseconds\n.\n\n\nNumber\n\n\n500\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nThe timeout setting if no arguments are passed.\n\n\nExample\n\n\nlocal\n \ntimeout\n \n=\n \nrequest\n:\ntimeout\n()\n\n\n\n--set\n\n\nrequest\n:\ntimeout\n(\n30\n)\n\n\n\n\n\n\n\n\nssl_verify\n\n\nrequest\n:\nssl_verify\n(\n \nverify_flag\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nverify_flag\n\n\nEnable or disable SSL verification.\n\n\nBoolean\n\n\nfalse\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nThe ssl_verify value, if no arguments are passed.\n\n\nExample\n\n\nlocal\n \nssl_verify\n \n=\n \nrequest\n:\nssl_verify\n()\n\n\n\n--set\n\n\nrequest\n:\nssl_verify\n(\ntrue\n)\n\n\n\n\n\n\n\n\nbody\n\n\nrequest\n:\nbody\n(\n \nbody_data\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbody_data\n\n\nSet or retrieve the request body.\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nReturns\n\n\nThe body data value, if no arguments are passed.\n\n\nExample\n\n\nlocal\n \nbody_data\n \n=\n \nrequest\n:\nbody\n()\n\n\n\n--set\n\n\nrequest\n:\nbody\n(\n\"Here is some body data\"\n)\n\n\n\n\n\n\n\n\nresult\n\n\nCompiles the options and makes the network request. Must be the last method called on a network request object.\n\n\nrequest\n:\nresult\n()\n\n\n\n\n\n\nReturns\n\n\nThe \nresult\n if successful, otherwise \nnil\n and \nerror\n message.\n\n\nExample\n\n\nlocal\n \nresult\n,\n \nerr\n \n=\n \nrequest\n:\nresult\n()",
            "title": "Network"
        },
        {
            "location": "/server-api/network/#overview",
            "text": "Make external HTTP network requests and retrieve the results.  Example  local   request   =   cloud . network . new ( 'google.com' )   --host only, no path  request : path ( '/end/point' )  request : method ( cloud . POST )  request : body ( < JSON   CONTENT > )  request : headers ({ \n   [ 'Content-Type' ]   =   'application/json' , \n   -- add more headers  })  local   result ,   err   =   request : result ()     Note  All of the network methods, except for  new  and  request  are getters and setters.   Using getters and setters  -- To get a value, omit any arguments  local   host   =   request : host ()  -- To set a an option  request : host ( '12.12.12.12' )  -- Chain options  request : host ( '12.12.12.12' ): port ( 8080 )  local   result ,   err   =   request : result ()",
            "title": "Overview"
        },
        {
            "location": "/server-api/network/#new",
            "text": "core . network . new (   [ host ][,   port ]   )   Parameters     Name  Description  Type  Default  Required      host  The hostname to connect to.  String  '127.0.0.1'  N    port  The port number to connect with.  Number  80  N     The host and port can be set with the network instance methods as well.  Returns  A new request connection object.  Example  local   request   =   core . network . new ( '123.123.123.123' ,   8080 )",
            "title": "new"
        },
        {
            "location": "/server-api/network/#host",
            "text": "request : host (   hostname   )   Parameters     Name  Description  Type  Required      hostname  The hostname to connect to.  String  Y     Returns  The hostname if no value is passed.  Example  local   hostname   =   request : hostname ()  --set  request : hostname ( '13.13.13.13' )",
            "title": "host"
        },
        {
            "location": "/server-api/network/#port",
            "text": "request : port (   port   )   Parameters     Name  Description  Type  Default  Required      port  The port to connect to.  Number  80  Y     Returns  The port if no value is passed.  Example  local   port   =   request : port ()  --set  request : port ( 8080 )",
            "title": "port"
        },
        {
            "location": "/server-api/network/#path",
            "text": "request : path (   path   )   Parameters     Name  Description  Type  Required      path  The path to connect to.  String  Y     Returns  The path if no value is passed.  Example  local   path   =   request : path ()  --set  request : path ( '/echo/test' )",
            "title": "path"
        },
        {
            "location": "/server-api/network/#header",
            "text": "request : header (   name ,   value   )   Parameters     Name  Description  Type  Required      name  The header name  String  Y    value  The header value.  String  Y     Returns  The header value if only the name key is passed.  Example  local   header   =   request : header ( 'Content-Type' )  --set  request : header ( 'Content-Type' , 'application/json' )",
            "title": "header"
        },
        {
            "location": "/server-api/network/#headers",
            "text": "request : headers (   headers   )   Parameters     Name  Description  Type  Required      headers  A table of request headers.  Table  N     Returns  All headers if no arguments are passed.  Example  local   header   =   request : headers ()  --set  request : headers ({ \n   'Content-Type'   =   'application/json' , \n   'Host'   =   '12.12.12.12.'  })    Warning  The  headers  method will clear  all  existing header assigments.",
            "title": "headers"
        },
        {
            "location": "/server-api/network/#method",
            "text": "request : method (   method   )   Parameters     Name  Description  Default  Required      method  A HTTP method. Can use method constants (see below).  core.POST  Y     Returns  The HTTP method name if no arguments are passed.  Example  local   method   =   request : method ()  --set  request : method ( cloud . GET )   Method Constants     Constant  Description      core.POST  POST request method    core.GET  GET request method    core.DELETE  DELETE request method    core.UPDATE  UPDATE request method",
            "title": "method"
        },
        {
            "location": "/server-api/network/#timeout",
            "text": "request : timeout (   timeout   )   Parameters     Name  Description  Type  Default  Required      timeout  Timeout in  milliseconds .  Number  500  Y     Returns  The timeout setting if no arguments are passed.  Example  local   timeout   =   request : timeout ()  --set  request : timeout ( 30 )",
            "title": "timeout"
        },
        {
            "location": "/server-api/network/#ssl_verify",
            "text": "request : ssl_verify (   verify_flag   )   Parameters     Name  Description  Type  Default  Required      verify_flag  Enable or disable SSL verification.  Boolean  false  N     Returns  The ssl_verify value, if no arguments are passed.  Example  local   ssl_verify   =   request : ssl_verify ()  --set  request : ssl_verify ( true )",
            "title": "ssl_verify"
        },
        {
            "location": "/server-api/network/#body",
            "text": "request : body (   body_data   )   Parameters     Name  Description  Type  Required      body_data  Set or retrieve the request body.  String  N     Returns  The body data value, if no arguments are passed.  Example  local   body_data   =   request : body ()  --set  request : body ( \"Here is some body data\" )",
            "title": "body"
        },
        {
            "location": "/server-api/network/#result",
            "text": "Compiles the options and makes the network request. Must be the last method called on a network request object.  request : result ()   Returns  The  result  if successful, otherwise  nil  and  error  message.  Example  local   result ,   err   =   request : result ()",
            "title": "result"
        },
        {
            "location": "/server-api/utils/",
            "text": "Overview\n\n\nHere you can find various helpers available in the root \ncore\n namespace.\n\n\n\n\nlog\n\n\nPrints a string message to the \n/usr/local/coronium/logs/coronium.log\n file.\n\n\ncore\n.\nlog\n(\n \nmessage\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message string to log.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\ncore\n.\nlog\n(\n'something to log'\n)\n\n\n\n\n\n\n\n\nsf (string format)\n\n\nFormat a string based on token replacment. This method shares the same attributes as the Lua string.format method.\n\n\ncore\n.\nsf\n(\n \nstr_template\n,\n \nvalues\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nstr_template\n\n\nThe string containing replacment tokens.\n\n\nY\n\n\n\n\n\n\nvalues\n\n\nA list of values for token replacment.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nusername\n \n=\n \n\"Dave\"\n\n\nlocal\n \nformatted_str\n \n=\n \ncore\n.\nsf\n(\n\"Hello, %s!\"\n,\n \nusername\n)\n\n\n\n-- formatted_str = \"Hello, Dave!\"\n\n\n\n\n\n\nNotes\n\n\nSome common token types:\n\n\n\n\n\n\n\n\nToken\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n%s\n\n\nUsed as a string replacment, any other type will error.\n\n\n\n\n\n\n%d\n\n\nUsed as a number replacment, any other type will error.\n\n\n\n\n\n\n\n\nYou can mix tokens, as well as have multiples:\n\n\nlocal\n \nstr\n \n=\n \ncore\n.\nsf\n(\n\"Ordered %d %s with %s.\"\n,\n \n2\n,\n \n'burgers'\n,\n \n'cheese'\n)\n\n\n-- `str` contains \"Ordered 2 burgers with cheese.\"\n\n\n\n\n\n\n\n\nTip\n\n\nThe \nsf\n method is useful for creating SQL queries, as well as other type-safe replacments.\n\n\n\n\n\n\ntrim\n\n\nRemoves empty space from the start and end of a string, if any.\n\n\ncore\n.\ntrim\n(\n \nstring\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nThe string to trim.\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ntrimmed_str\n \n=\n \ncore\n.\ntrim\n(\n\"  I could use a trim  \"\n)\n\n\n\n-- trimmed_str = \"I could use a trim\"\n\n\n\n\n\n\n\n\nsplit\n\n\nConverts a delimited string into a Lua table array.\n\n\ncore\n.\nsplit\n(\n \nstring\n[,\n \ndelimiter\n \n]\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nThe delimited string to split.\n\n\nNone\n\n\nY\n\n\n\n\n\n\ndelimiter\n\n\nThe delimiter to split the string with.\n\n\nComma\n ( , )\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ntbl_array\n \n=\n \ncore\n.\nsplit\n(\n\"Red,Green,Blue\"\n)\n\n\n\n-- `tbl_array` contains {\"Red\",\"Green\",\"Blue\"}\n\n\n\n\n\n\nUsing a custom delimiter:\n\n\nlocal\n \ntbl_array\n \n=\n \ncore\n.\nsplit\n(\n\"User:2001:Storage\"\n,\n \n\":\"\n)\n\n\n\n-- `tbl_array` contains {\"User\",\"2001\",\"Storage\"}\n\n\n\n\n\n\n\n\nuuid\n\n\nGenerates a universally unique id.\n\n\nExample\n\n\nlocal\n \nuuid\n \n=\n \ncore\n.\nuuid\n()\n\n\n\n-- `uuid` will contain something like \"1f0af2fa-8b06-4605-bace-e13a85aa36d5\"\n\n\n\n\n\n\n\n\ntblmerge\n\n\nMerge a series of tables, with optional default inputs. Last value wins.\n\n\ncore\n.\ntblmerge\n(\n \ndefault_vals\n,\n \ntbl_obj_1\n[,\n \ntbl_obj_2\n[,\n \n...]]\n \n)\n\n\n\n\n\n\n\n\nNote\n\n\nThis method only works on the root table keys.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequried\n\n\n\n\n\n\n\n\n\n\ndefault_vals\n\n\nA keyed table of default values. These values can be overridden.\n\n\nTable\n\n\nY\n\n\n\n\n\n\ntbl_obj_N\n\n\nA keyed table of values. Will override any existing default_vals. You can add as many additional tables as needed.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nReturns\n\n\nMerged table.\n\n\nUsage\n\n\n--some \"defaults\"\n\n\nlocal\n \ndefaults\n \n=\n\n\n{\n\n  \ncolor\n \n=\n \n\"blue\"\n,\n\n  \npoints\n \n=\n \n0\n\n\n}\n\n\n\n--a \"user config\"\n\n\nlocal\n \nuser_config\n \n=\n\n\n{\n\n  \ncolor\n \n=\n \n\"red\"\n\n\n}\n\n\n\n--some other meta\n\n\nlocal\n \nmeta\n \n=\n\n\n{\n\n  \nlast_score\n \n=\n \n200\n,\n\n  \nfav_avatar\n \n=\n \n\"orange\"\n,\n\n  \npoints\n \n=\n \n10\n\n\n}\n\n\n\n--merge tables\n\n\nlocal\n \nmerged_tbl\n \n=\n \ncore\n.\ntblmerge\n(\n \ndefaults\n,\n \nuser_config\n,\n \nmeta\n \n)\n\n\n\n\n\n\nThe merged table result:\n\n\n{\n\n  \ncolor\n \n=\n \n\"red\"\n,\n\n  \npoints\n \n=\n \n10\n,\n\n  \nlast_score\n \n=\n \n200\n,\n\n  \nfav_avatar\n \n=\n \n\"orange\"\n\n\n}",
            "title": "Utils"
        },
        {
            "location": "/server-api/utils/#overview",
            "text": "Here you can find various helpers available in the root  core  namespace.",
            "title": "Overview"
        },
        {
            "location": "/server-api/utils/#log",
            "text": "Prints a string message to the  /usr/local/coronium/logs/coronium.log  file.  core . log (   message   )   Parameters     Name  Description  Requried      message  The message string to log.  Y     Example  core . log ( 'something to log' )",
            "title": "log"
        },
        {
            "location": "/server-api/utils/#sf-string-format",
            "text": "Format a string based on token replacment. This method shares the same attributes as the Lua string.format method.  core . sf (   str_template ,   values   )   Parameters     Name  Description  Requried      str_template  The string containing replacment tokens.  Y    values  A list of values for token replacment.  Y     Example  local   username   =   \"Dave\"  local   formatted_str   =   core . sf ( \"Hello, %s!\" ,   username )  -- formatted_str = \"Hello, Dave!\"   Notes  Some common token types:     Token  Description      %s  Used as a string replacment, any other type will error.    %d  Used as a number replacment, any other type will error.     You can mix tokens, as well as have multiples:  local   str   =   core . sf ( \"Ordered %d %s with %s.\" ,   2 ,   'burgers' ,   'cheese' )  -- `str` contains \"Ordered 2 burgers with cheese.\"    Tip  The  sf  method is useful for creating SQL queries, as well as other type-safe replacments.",
            "title": "sf (string format)"
        },
        {
            "location": "/server-api/utils/#trim",
            "text": "Removes empty space from the start and end of a string, if any.  core . trim (   string   )   Parameters     Name  Description  Requried      string  The string to trim.  Y     Example  local   trimmed_str   =   core . trim ( \"  I could use a trim  \" )  -- trimmed_str = \"I could use a trim\"",
            "title": "trim"
        },
        {
            "location": "/server-api/utils/#split",
            "text": "Converts a delimited string into a Lua table array.  core . split (   string [,   delimiter   ]   )   Parameters     Name  Description  Default  Requried      string  The delimited string to split.  None  Y    delimiter  The delimiter to split the string with.  Comma  ( , )  N     Example  local   tbl_array   =   core . split ( \"Red,Green,Blue\" )  -- `tbl_array` contains {\"Red\",\"Green\",\"Blue\"}   Using a custom delimiter:  local   tbl_array   =   core . split ( \"User:2001:Storage\" ,   \":\" )  -- `tbl_array` contains {\"User\",\"2001\",\"Storage\"}",
            "title": "split"
        },
        {
            "location": "/server-api/utils/#uuid",
            "text": "Generates a universally unique id.  Example  local   uuid   =   core . uuid ()  -- `uuid` will contain something like \"1f0af2fa-8b06-4605-bace-e13a85aa36d5\"",
            "title": "uuid"
        },
        {
            "location": "/server-api/utils/#tblmerge",
            "text": "Merge a series of tables, with optional default inputs. Last value wins.  core . tblmerge (   default_vals ,   tbl_obj_1 [,   tbl_obj_2 [,   ...]]   )    Note  This method only works on the root table keys.   Parameters     Name  Description  Type  Requried      default_vals  A keyed table of default values. These values can be overridden.  Table  Y    tbl_obj_N  A keyed table of values. Will override any existing default_vals. You can add as many additional tables as needed.  Table  Y     Returns  Merged table.  Usage  --some \"defaults\"  local   defaults   =  { \n   color   =   \"blue\" , \n   points   =   0  }  --a \"user config\"  local   user_config   =  { \n   color   =   \"red\"  }  --some other meta  local   meta   =  { \n   last_score   =   200 , \n   fav_avatar   =   \"orange\" , \n   points   =   10  }  --merge tables  local   merged_tbl   =   core . tblmerge (   defaults ,   user_config ,   meta   )   The merged table result:  { \n   color   =   \"red\" , \n   points   =   10 , \n   last_score   =   200 , \n   fav_avatar   =   \"orange\"  }",
            "title": "tblmerge"
        },
        {
            "location": "/client-setup/",
            "text": "Get The Plugin\n\n\nIf you don't already have it, get the \nCoronium Core Plugin\n from the \nCorona Marketplace\n.\n\n\nAdding The Plugin\n\n\nAdd the plugin by adding an entry to the \nplugins\n table of \nbuild.settings\n file:\n\n\nsettings =\n{\n    plugins =\n    {\n        [\"plugin.coronium\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}\n\n\n\n\n\nYou're now ready to use the \nCoronium Core\n plugin.",
            "title": "Client Setup"
        },
        {
            "location": "/client-setup/#get-the-plugin",
            "text": "If you don't already have it, get the  Coronium Core Plugin  from the  Corona Marketplace .",
            "title": "Get The Plugin"
        },
        {
            "location": "/client-setup/#adding-the-plugin",
            "text": "Add the plugin by adding an entry to the  plugins  table of  build.settings  file:  settings =\n{\n    plugins =\n    {\n        [\"plugin.coronium\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}  You're now ready to use the  Coronium Core  plugin.",
            "title": "Adding The Plugin"
        },
        {
            "location": "/client-guide/",
            "text": "Overview",
            "title": "Client Guide"
        },
        {
            "location": "/client-guide/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/client-api/api/",
            "text": "Overview\n\n\nUsed to call your server-side project api methods.\n\n\n\n\nImportant\n\n\nYou must set the project using the \ncore.useProject\n method before using the \napi\n method.\n\n\n\n\napi\n\n\ncore\n.\napi\n.\n<\napi\n-\nmethod\n>\n(\n \ndata_tbl\n,\n \nlistener\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_tbl\n\n\nA data table to pass to the api method.\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe api listener callback function.\n\n\nY\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf you're api method does not require any data, then pass an empty table ( {} ) to the \ndata_tbl\n parameter.\n\n\n\n\nAPI Listener\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\n \nevt\n.\nerror\n \n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\n<\nsome\n-\nkey\n>\n)\n\n  \nend\n\n\nend\n\n\n\n\n\n\n\n\nServer-Side\n\n\nClick \nhere\n to learn how to set up the matching server-side api method.\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \napiListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nresult\n.\nmessage\n)\n \n-- Hello\n\n  \nend\n\n\nend\n\n\n\n-- Assuming you have an \"echo\" server-side method\n\n\ncore\n.\napi\n.\necho\n({\nmessage\n=\n\"Hello\"\n},\n \napiListener\n)",
            "title": "API"
        },
        {
            "location": "/client-api/api/#overview",
            "text": "Used to call your server-side project api methods.   Important  You must set the project using the  core.useProject  method before using the  api  method.",
            "title": "Overview"
        },
        {
            "location": "/client-api/api/#api",
            "text": "core . api . < api - method > (   data_tbl ,   listener   )   Parameters     Name  Description  Required      data_tbl  A data table to pass to the api method.  Y    listener  The api listener callback function.  Y      Note  If you're api method does not require any data, then pass an empty table ( {} ) to the  data_tbl  parameter.   API Listener  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print (   evt . error   ) \n   else \n     print ( evt . result . < some - key > ) \n   end  end    Server-Side  Click  here  to learn how to set up the matching server-side api method.   Example  local   function   apiListener (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n     print ( evt . result . message )   -- Hello \n   end  end  -- Assuming you have an \"echo\" server-side method  core . api . echo ({ message = \"Hello\" },   apiListener )",
            "title": "api"
        },
        {
            "location": "/client-api/core/",
            "text": "Overview\n\n\nSet up the client side plugin.\n\n\ninit\n\n\nInitalize the client.\n\n\ncore\n.\ninit\n(\n \nconfig_tbl\n \n)\n\n\n\n\n\n\nConfig Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nserver\n\n\nYour Coronium Core server endpoint.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndebug\n\n\nShow message output in the console.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\ncore\n.\ninit\n({\n\n  \nserver\n \n=\n \n\"http://<coronium-host-address>\"\n,\n\n  \ndebug\n \n=\n \ntrue\n\n\n})\n\n\n\n\n\n\n\n\nuseProject\n\n\nSelect the server-side project to issue commands against.\n\n\ncore\n.\nuseProject\n(\n \nname\n,\n \nkey\n \n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe project name on the server instance.\n\n\nString\n\n\nY\n\n\n\n\n\n\nkey\n\n\nThe key as set in the project config.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\ncore\n.\nsetProject\n(\n\"default\"\n,\n \n\"1234\"\n)",
            "title": "Core"
        },
        {
            "location": "/client-api/core/#overview",
            "text": "Set up the client side plugin.",
            "title": "Overview"
        },
        {
            "location": "/client-api/core/#init",
            "text": "Initalize the client.  core . init (   config_tbl   )   Config Table Keys     Name  Description  Type  Required      server  Your Coronium Core server endpoint.  String  Y    debug  Show message output in the console.  Boolean  N     Example  core . init ({ \n   server   =   \"http://<coronium-host-address>\" , \n   debug   =   true  })",
            "title": "init"
        },
        {
            "location": "/client-api/core/#useproject",
            "text": "Select the server-side project to issue commands against.  core . useProject (   name ,   key   )   Parameters     Name  Description  Type  Required      name  The project name on the server instance.  String  Y    key  The key as set in the project config.  String  Y     Example  core . setProject ( \"default\" ,   \"1234\" )",
            "title": "useProject"
        },
        {
            "location": "/client-api/files/",
            "text": "Overview\n\n\nUpload and download files to and from the server.\n\n\n\n\nupload\n\n\nUpload a file to the server.\n\n\ncore\n.\nfiles\n.\nupload\n(\nsrcFilePath\n,\n \nbaseDir\n,\n \ndestFilePath\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcFilePath\n\n\nLocal source file path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbaseDir\n\n\nA Corona directory constant.\n\n\nConst\n\n\nY\n\n\n\n\n\n\ndestFilePath\n\n\nRemote destination path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe upload listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nUpload Listener\n\n\nlocal\n \nfunction\n \nuploadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\n \nevt\n.\nerror\n \n)\n\n  \nelse\n\n    \nif\n \nnot\n \nevt\n.\nresult\n.\ndone\n \nthen\n\n      \nprint\n(\n \nevt\n.\nprogress\n \n)\n\n    \nelse\n\n      \nprint\n(\n\"file upload complete\"\n)\n\n      \nprint\n(\n\"filePath: \"\n,\n \nevt\n.\nresult\n.\npath\n)\n\n      \nprint\n(\n\"fileName: \"\n,\n \nevt\n.\nresult\n.\nfile\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nExample\n\n\n\n\ndownload\n\n\nDownload files from the server.\n\n\ncore\n.\nfiles\n.\ndownload\n(\nsrcFilePath\n,\n \ndestFilePath\n,\n \nbaseDir\n,\n \nlistener\n[,\n \ntransform\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsrcFilePath\n\n\nRemote source file path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\ndestFilePath\n\n\nLocal destination path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbaseDir\n\n\nA Corona system directory constant.\n\n\nConst\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nThe download listener callback function.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\ntransform\n\n\nOptional parameters for image transform (See below).\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nDownload Listener\n\n\nlocal\n \nfunction\n \ndownloadListener\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\n \nevt\n.\nerror\n \n)\n\n  \nelse\n\n    \nif\n \nnot\n \nevt\n.\nresult\n.\ndone\n \nthen\n\n      \nprint\n(\n \nevt\n.\nprogress\n \n)\n\n    \nelse\n\n      \nprint\n(\n\"file download complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\nExample\n\n\nImage Transforms\n\n\nDownload an image with transformations.\n\n\n\n\nNote\n\n\nTransforms only work with \nPNG\n, \nJPG\n, and \nGIF\n file types.\n\n\n\n\nTransform Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nwidth\n\n\nProportionally resize image based on width.\n\n\nNumber\n\n\nnil\n\n\n\n\n\n\nheight\n\n\nProportionally resize image based on height.\n\n\nNumber\n\n\nnil\n\n\n\n\n\n\nsharpen\n\n\nIncreases sharpness of the final image (0-100).\n\n\nNumber\n\n\n0\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \ntransform\n \n=\n \n{\n\n  \nwidth\n \n=\n \n100\n,\n\n  \nheight\n \n=\n \n100\n,\n\n  \nsharpen\n \n=\n \n50\n\n\n}",
            "title": "Files"
        },
        {
            "location": "/client-api/files/#overview",
            "text": "Upload and download files to and from the server.",
            "title": "Overview"
        },
        {
            "location": "/client-api/files/#upload",
            "text": "Upload a file to the server.  core . files . upload ( srcFilePath ,   baseDir ,   destFilePath ,   listener )   Parameters     Name  Description  Type  Required      srcFilePath  Local source file path with extension.  String  Y    baseDir  A Corona directory constant.  Const  Y    destFilePath  Remote destination path with extension.  String  Y    listener  The upload listener callback function.  Function  Y     Upload Listener  local   function   uploadListener (   evt   ) \n   if   evt . error   then \n     print (   evt . error   ) \n   else \n     if   not   evt . result . done   then \n       print (   evt . progress   ) \n     else \n       print ( \"file upload complete\" ) \n       print ( \"filePath: \" ,   evt . result . path ) \n       print ( \"fileName: \" ,   evt . result . file ) \n     end \n   end  end   Example",
            "title": "upload"
        },
        {
            "location": "/client-api/files/#download",
            "text": "Download files from the server.  core . files . download ( srcFilePath ,   destFilePath ,   baseDir ,   listener [,   transform ])   Parameters     Name  Description  Type  Required      srcFilePath  Remote source file path with extension.  String  Y    destFilePath  Local destination path with extension.  String  Y    baseDir  A Corona system directory constant.  Const  Y    listener  The download listener callback function.  Function  Y    transform  Optional parameters for image transform (See below).  Table  N     Download Listener  local   function   downloadListener (   evt   ) \n   if   evt . error   then \n     print (   evt . error   ) \n   else \n     if   not   evt . result . done   then \n       print (   evt . progress   ) \n     else \n       print ( \"file download complete\" ) \n     end \n   end  end   Example",
            "title": "download"
        },
        {
            "location": "/client-api/files/#image-transforms",
            "text": "Download an image with transformations.   Note  Transforms only work with  PNG ,  JPG , and  GIF  file types.   Transform Keys     Name  Description  Type  Default      width  Proportionally resize image based on width.  Number  nil    height  Proportionally resize image based on height.  Number  nil    sharpen  Increases sharpness of the final image (0-100).  Number  0     Example  local   transform   =   { \n   width   =   100 , \n   height   =   100 , \n   sharpen   =   50  }",
            "title": "Image Transforms"
        },
        {
            "location": "/example/",
            "text": "Demo\n\n\nYou can find the demo files here: \nhttps://github.com/develephant/coronium-skytable-demo\n\n\n\n\nScreencast\n\n\nLearn how to use the demo while viewing a screencast by \nclicking here\n.\n\n\n\n\n\n\nBasic Get\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \ntbl\n \n=\n \nevt\n.\ndata\n \n--data table\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\nonResult\n)\n\n\n\n\n\n\n\n\nGet with Path\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\ndata\n)\n \n--will be the \"name\" value\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"name\"\n,\n \nonResult\n)\n\n\n\n\n\n\n\n\nGet with Tags\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\ntag\n \n==\n \n\"get-name\"\n \nthen\n\n      \nprint\n(\nevt\n.\ndata\n)\n \n--will be the \"name\" value\n\n    \nelseif\n \nevt\n.\ntag\n \n==\n \n\"get-street\"\n \nthen\n\n      \nprint\n(\nevt\n.\ndata\n)\n \n--will be the \"street\" value\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"name\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"get-name\"\n})\n\n\nlocation\n:\nget\n(\n\"address.street\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"get-street\"\n})\n\n\n\n\n\n\n\n\nBasic Set\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"123 Main St.\"\n,\n\n    \ncity\n \n=\n \n\"San City\"\n,\n\n    \nstate\n \n=\n \n\"Anywhere\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n)\n\n\n\n\n\n\n\n\nSet with Path\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\nlocation\n:\nset\n(\n\"address.state\"\n,\n \n\"Someplace\"\n,\n \nonSetResult\n)\n\n\n\n\n\n\n\n\nSet with Tags\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\ntag\n \n==\n \n\"set-location\"\n \nthen\n\n      \nprint\n(\n\"Set location\"\n,\n \nevt\n.\nsuccess\n)\n\n    \nelseif\n \nevt\n.\ntag\n \n==\n \n\"set-profile-name\"\n \nthen\n\n      \nprint\n(\n\"Set profile\"\n,\n \nevt\n.\nsuccess\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"123 Main St.\"\n,\n\n    \ncity\n \n=\n \n\"San City\"\n,\n\n    \nstate\n \n=\n \n\"Anywhere\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n,\n \n{\ntag\n=\n\"set-location\"\n})\n\n\nprofile\n:\nset\n(\n\"name\"\n,\n \n\"Steve\"\n,\n \nonSetResult\n,\n \n{\ntag\n=\n\"set-profile-name\"\n})\n\n\n\n\n\n\n\n\nSet with Flags\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"555 1st Ave.\"\n,\n\n    \ncity\n \n=\n \n\"Citopia\"\n,\n\n    \nstate\n \n=\n \n\"Bliss\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n,\n \n{\nflag\n \n=\n \n\"XX\"\n})\n\n\n\n\n\n\nSet with Expiry\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n,\n \nevt\n.\nexpiry\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"555 1st Ave.\"\n,\n\n    \ncity\n \n=\n \n\"Citopia\"\n,\n\n    \nstate\n \n=\n \n\"Bliss\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n,\n \n{\nexpiry\n \n=\n \n60\n})",
            "title": "Examples"
        },
        {
            "location": "/example/#demo",
            "text": "You can find the demo files here:  https://github.com/develephant/coronium-skytable-demo   Screencast  Learn how to use the demo while viewing a screencast by  clicking here .",
            "title": "Demo"
        },
        {
            "location": "/example/#basic-get",
            "text": "local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     local   tbl   =   evt . data   --data table \n   end  end  profile : get ( onResult )",
            "title": "Basic Get"
        },
        {
            "location": "/example/#get-with-path",
            "text": "local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . data )   --will be the \"name\" value \n   end  end  profile : get ( \"name\" ,   onResult )",
            "title": "Get with Path"
        },
        {
            "location": "/example/#get-with-tags",
            "text": "local   profile   =   skytable : open ( \"profile\" )  local   location   =   skytable : open ( \"location\" )  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     if   evt . tag   ==   \"get-name\"   then \n       print ( evt . data )   --will be the \"name\" value \n     elseif   evt . tag   ==   \"get-street\"   then \n       print ( evt . data )   --will be the \"street\" value \n     end \n   end  end  profile : get ( \"name\" ,   onResult ,   { tag = \"get-name\" })  location : get ( \"address.street\" ,   onResult ,   { tag = \"get-street\" })",
            "title": "Get with Tags"
        },
        {
            "location": "/example/#basic-set",
            "text": "local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"123 Main St.\" , \n     city   =   \"San City\" , \n     state   =   \"Anywhere\" \n   }  }  location : set ( locationData ,   onSetResult )",
            "title": "Basic Set"
        },
        {
            "location": "/example/#set-with-path",
            "text": "local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  location : set ( \"address.state\" ,   \"Someplace\" ,   onSetResult )",
            "title": "Set with Path"
        },
        {
            "location": "/example/#set-with-tags",
            "text": "local   location   =   skytable : open ( \"location\" )  local   profile   =   skytable : open ( \"profile\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     if   evt . tag   ==   \"set-location\"   then \n       print ( \"Set location\" ,   evt . success ) \n     elseif   evt . tag   ==   \"set-profile-name\"   then \n       print ( \"Set profile\" ,   evt . success ) \n     end \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"123 Main St.\" , \n     city   =   \"San City\" , \n     state   =   \"Anywhere\" \n   }  }  location : set ( locationData ,   onSetResult ,   { tag = \"set-location\" })  profile : set ( \"name\" ,   \"Steve\" ,   onSetResult ,   { tag = \"set-profile-name\" })",
            "title": "Set with Tags"
        },
        {
            "location": "/example/#set-with-flags",
            "text": "local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"555 1st Ave.\" , \n     city   =   \"Citopia\" , \n     state   =   \"Bliss\" \n   }  }  location : set ( locationData ,   onSetResult ,   { flag   =   \"XX\" })",
            "title": "Set with Flags"
        },
        {
            "location": "/example/#set-with-expiry",
            "text": "local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ,   evt . expiry ) \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"555 1st Ave.\" , \n     city   =   \"Citopia\" , \n     state   =   \"Bliss\" \n   }  }  location : set ( locationData ,   onSetResult ,   { expiry   =   60 })",
            "title": "Set with Expiry"
        },
        {
            "location": "/ssl/",
            "text": "Overview\n\n\n\n\nScreencast\n\n\nView the secure install instructions in a screencast format by \nclicking here\n.\n\n\n\n\nSecure your \nCoronium Core\n server by utilizing the free SSL certificate service \nLet's Encrypt\n.\n\n\n\n\nWarning\n\n\nSetting up a secure Coronium Core server is not a trivial process, so be sure to read through \nall\n of the steps before starting, and then follow them carefully.\n\n\n\n\nTo be issued a secure certificate, you must have a fully qualified domain name, and the proper DNS set up to serve the domain.\n\n\nA fully qualified domain name is basically a registered domain name. Where you decide to purchase a domain is up to you. \nGoDaddy\n is a popular choice. \n\n\nOnce you have your domain name, you will need to \"point\" it to your Coronium Core server. Most domain registars provide a means of setting up DNS.\n\n\nYou will want to set up a 3rd level domain for your Coronium Core server. This looks something like:\n\n\ncoronium.<mydomain>.com__\n\n\nAmazon\n\n\nWhen you first install SkyTable, make sure to add port 443 to your security group settings. You can then use the \nRoute 53\n service for your DNS. There are ample guides to assist you. \n\n\nOnce set up, proceed to the \nLet's Encrypt\n section below.\n\n\nDigitalOcean\n\n\nYou will need to point your domain to the DigitalOcean nameservers. The process for this varies by domain registar, but in all cases, you will need the DigitalOcean nameserver addresses, which are:\n\n\n\n\nns1.digitalocean.com\n\n\nns2.digitalocean.com\n\n\nns3.digitalocean.com\n\n\n\n\nInstructions for setting nameservers on GoDaddy can be found \nhere\n.\n\n\n\n\nImportant\n\n\nSpin up a SkyTable droplet as outlined in the \nDigitalOcean Installation\n section before continuing.\n\n\n\n\n1. In the DigitalOcean control panel, click the \nNetworking\n link at the top:\n\n\n\n\n2. Enter your new domain name, without any prefix:\n\n\n\n\n3. Click the \nAdd Domain\n button:\n\n\n\n\n4. On the next screen, do the following:\n\n\n\n\nEnter the hostname (only the domain prefix) of your Coronium Core server. (1)\n\n\nFrom the \nWILL DIRECT TO\n field, select your Coronium Core droplet. (2)\n\n\n\n\n\n\n5. Click the \nCreate Record\n button on the right:\n\n\n\n\nAt this point your DNS is set up, but generally needs to propagate. This can take anywhere from 5 minutes to a number of hours (though usually within 15 minutes). \n\n\nYou can check the progress using a site like \nwhatsmydns\n. Enter the full domain, including the prefix, to test.\n\n\nLet's Encrypt\n\n\n\n\nDanger\n\n\nDo not continue with this guide until you have an active domain name for your SkyTable server that you can reach through your web browser.\n\n\n\n\nTo move your Coronium Core server over to HTTPS, perform the following steps:\n\n\n1. Log into your Coronium Core droplet using the \nroot\n user:\n\n\nssh root@<your-coronium-domain>\n\n\n\n\n\nNote: The root user is \nubuntu\n if hosting on Amazon.\n\n\nIf you have not changed the password yet, the default is \ncloudadmin\n. You may be prompted for your password at various times during this process.\n\n\n2. Copy and paste the following on the command line to run the Coronium Core SSL updater:\n\n\n\n\nWarning\n\n\nAt this point make sure you're ready to move over to HTTPS. The following process will permanently modify your configuration settings.\n\n\n\n\ncurl -LO https://s3.amazonaws.com/coronium-core/ssl.sh && sudo bash ./ssl.sh\n\n\nThe script will install the needed components, and update the configuration files. \n\n\nYou will then be propted for the \nhostname\n, a \nfully qualified domain name\n, and a valid \nemail\n. These items are required to request a certificate from Let's Encrypt.\n\n\nAs stated earlier, you should have created a 3rd level domain, for example: \ncoronium.<domain>.com\n. Using the example, when entering the requested information, it might look like:\n\n\n\n\nNote\n\n\nMake sure to hit the \ndelete\n key a few times before entering values. If the update returns a confirmation instantly, then a space in the data is the most likely reason. If this happens, start again at step 2 above.\n\n\n\n\nEnter a hostname:\n \ncoronium\n\n\nEnter a FQDN:\n \ncoronium.<domain>.com\n\n\nEnter an email:\n \nyou@your-email.com\n\n\nBe sure to replace the information with your own answers.\n\n\n\n\nWarning\n\n\nMake sure to triple check your information. If not, then you might not be issued a certificate.\n\n\n\n\nAfter receiving your secure certificate, the script will exit and your Coronium Core server will be accesible using \nhttps\n. \n\n\n\n\nTip\n\n\nIt's generally a good idea to reboot the server instance by entering \nsudo reboot -h\n on the command line. Wait a minute, and then check to make sure the server is running again.\n\n\n\n\nBe sure to update the \nhost\n in the client configuration (in the Corona project):\n\n\ncore\n:\ninit\n({\n\n  \nserver\n \n=\n \n\"https://<coronium-core-host>\"\n\n\n})",
            "title": "HTTPS / SSL"
        },
        {
            "location": "/ssl/#overview",
            "text": "Screencast  View the secure install instructions in a screencast format by  clicking here .   Secure your  Coronium Core  server by utilizing the free SSL certificate service  Let's Encrypt .   Warning  Setting up a secure Coronium Core server is not a trivial process, so be sure to read through  all  of the steps before starting, and then follow them carefully.   To be issued a secure certificate, you must have a fully qualified domain name, and the proper DNS set up to serve the domain.  A fully qualified domain name is basically a registered domain name. Where you decide to purchase a domain is up to you.  GoDaddy  is a popular choice.   Once you have your domain name, you will need to \"point\" it to your Coronium Core server. Most domain registars provide a means of setting up DNS.  You will want to set up a 3rd level domain for your Coronium Core server. This looks something like:  coronium.<mydomain>.com__",
            "title": "Overview"
        },
        {
            "location": "/ssl/#amazon",
            "text": "When you first install SkyTable, make sure to add port 443 to your security group settings. You can then use the  Route 53  service for your DNS. There are ample guides to assist you.   Once set up, proceed to the  Let's Encrypt  section below.",
            "title": "Amazon"
        },
        {
            "location": "/ssl/#digitalocean",
            "text": "You will need to point your domain to the DigitalOcean nameservers. The process for this varies by domain registar, but in all cases, you will need the DigitalOcean nameserver addresses, which are:   ns1.digitalocean.com  ns2.digitalocean.com  ns3.digitalocean.com   Instructions for setting nameservers on GoDaddy can be found  here .   Important  Spin up a SkyTable droplet as outlined in the  DigitalOcean Installation  section before continuing.   1. In the DigitalOcean control panel, click the  Networking  link at the top:   2. Enter your new domain name, without any prefix:   3. Click the  Add Domain  button:   4. On the next screen, do the following:   Enter the hostname (only the domain prefix) of your Coronium Core server. (1)  From the  WILL DIRECT TO  field, select your Coronium Core droplet. (2)    5. Click the  Create Record  button on the right:   At this point your DNS is set up, but generally needs to propagate. This can take anywhere from 5 minutes to a number of hours (though usually within 15 minutes).   You can check the progress using a site like  whatsmydns . Enter the full domain, including the prefix, to test.",
            "title": "DigitalOcean"
        },
        {
            "location": "/ssl/#lets-encrypt",
            "text": "Danger  Do not continue with this guide until you have an active domain name for your SkyTable server that you can reach through your web browser.   To move your Coronium Core server over to HTTPS, perform the following steps:  1. Log into your Coronium Core droplet using the  root  user:  ssh root@<your-coronium-domain>  Note: The root user is  ubuntu  if hosting on Amazon.  If you have not changed the password yet, the default is  cloudadmin . You may be prompted for your password at various times during this process.  2. Copy and paste the following on the command line to run the Coronium Core SSL updater:   Warning  At this point make sure you're ready to move over to HTTPS. The following process will permanently modify your configuration settings.   curl -LO https://s3.amazonaws.com/coronium-core/ssl.sh && sudo bash ./ssl.sh  The script will install the needed components, and update the configuration files.   You will then be propted for the  hostname , a  fully qualified domain name , and a valid  email . These items are required to request a certificate from Let's Encrypt.  As stated earlier, you should have created a 3rd level domain, for example:  coronium.<domain>.com . Using the example, when entering the requested information, it might look like:   Note  Make sure to hit the  delete  key a few times before entering values. If the update returns a confirmation instantly, then a space in the data is the most likely reason. If this happens, start again at step 2 above.   Enter a hostname:   coronium  Enter a FQDN:   coronium.<domain>.com  Enter an email:   you@your-email.com  Be sure to replace the information with your own answers.   Warning  Make sure to triple check your information. If not, then you might not be issued a certificate.   After receiving your secure certificate, the script will exit and your Coronium Core server will be accesible using  https .    Tip  It's generally a good idea to reboot the server instance by entering  sudo reboot -h  on the command line. Wait a minute, and then check to make sure the server is running again.   Be sure to update the  host  in the client configuration (in the Corona project):  core : init ({ \n   server   =   \"https://<coronium-core-host>\"  })",
            "title": "Let's Encrypt"
        },
        {
            "location": "/about/",
            "text": "Code and documentation \u00a92017 C. Byerley (\ndevelephant\n).",
            "title": "About"
        }
    ]
}